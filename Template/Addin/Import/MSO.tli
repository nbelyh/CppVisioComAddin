// Created by Microsoft (R) C/C++ Compiler Version 12.00.21005.1 (95be59fa).
//
// c:\projects\consoleapplication1\consoleapplication1\debug\MSO.tli
//
// Wrapper implementations for Win32 type library {2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}
// compiler-generated file created 04/03/14 at 11:24:12 - DO NOT EDIT!

#pragma once

namespace Office {

//
// interface IAccessible wrapper method implementations
//

IDispatchPtr IAccessible::GetaccParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_accParent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IAccessible::GetaccChildCount ( ) {
    long _result = 0;
    HRESULT _hr = get_accChildCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IAccessible::GetaccChild ( const _variant_t & varChild ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_accChild(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IAccessible::GetaccName ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accName(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAccessible::GetaccValue ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accValue(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IAccessible::GetaccDescription ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDescription(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IAccessible::GetaccRole ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accRole(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAccessible::GetaccState ( const _variant_t & varChild ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accState(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IAccessible::GetaccHelp ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accHelp(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long IAccessible::GetaccHelpTopic ( BSTR * pszHelpFile, const _variant_t & varChild ) {
    long _result = 0;
    HRESULT _hr = get_accHelpTopic(pszHelpFile, varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IAccessible::GetaccKeyboardShortcut ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accKeyboardShortcut(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IAccessible::GetaccFocus ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accFocus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAccessible::GetaccSelection ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_accSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IAccessible::GetaccDefaultAction ( const _variant_t & varChild ) {
    BSTR _result = 0;
    HRESULT _hr = get_accDefaultAction(varChild, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IAccessible::accSelect ( long flagsSelect, const _variant_t & varChild ) {
    HRESULT _hr = raw_accSelect(flagsSelect, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAccessible::accLocation ( long * pxLeft, long * pyTop, long * pcxWidth, long * pcyHeight, const _variant_t & varChild ) {
    HRESULT _hr = raw_accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IAccessible::accNavigate ( long navDir, const _variant_t & varStart ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accNavigate(navDir, varStart, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IAccessible::accHitTest ( long xLeft, long yTop ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_accHitTest(xLeft, yTop, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IAccessible::accDoDefaultAction ( const _variant_t & varChild ) {
    HRESULT _hr = raw_accDoDefaultAction(varChild);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void IAccessible::PutaccName ( const _variant_t & varChild, _bstr_t pszName ) {
    HRESULT _hr = put_accName(varChild, pszName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IAccessible::PutaccValue ( const _variant_t & varChild, _bstr_t pszValue ) {
    HRESULT _hr = put_accValue(varChild, pszValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface _IMsoDispObj wrapper method implementations
//

IDispatchPtr _IMsoDispObj::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long _IMsoDispObj::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IMsoOleAccDispObj wrapper method implementations
//

IDispatchPtr _IMsoOleAccDispObj::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long _IMsoOleAccDispObj::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Adjustments wrapper method implementations
//

IDispatchPtr Adjustments::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int Adjustments::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float Adjustments::GetItem ( int Index ) {
    float _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Adjustments::PutItem ( int Index, float Val ) {
    HRESULT _hr = put_Item(Index, Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CalloutFormat wrapper method implementations
//

IDispatchPtr CalloutFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT CalloutFormat::AutomaticLength ( ) {
    HRESULT _hr = raw_AutomaticLength();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CalloutFormat::CustomDrop ( float Drop ) {
    HRESULT _hr = raw_CustomDrop(Drop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CalloutFormat::CustomLength ( float Length ) {
    HRESULT _hr = raw_CustomLength(Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CalloutFormat::PresetDrop ( enum MsoCalloutDropType DropType ) {
    HRESULT _hr = raw_PresetDrop(DropType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTriState CalloutFormat::GetAccent ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Accent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutAccent ( enum MsoTriState Accent ) {
    HRESULT _hr = put_Accent(Accent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoCalloutAngleType CalloutFormat::GetAngle ( ) {
    enum MsoCalloutAngleType _result;
    HRESULT _hr = get_Angle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutAngle ( enum MsoCalloutAngleType Angle ) {
    HRESULT _hr = put_Angle(Angle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState CalloutFormat::GetAutoAttach ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoAttach(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutAutoAttach ( enum MsoTriState AutoAttach ) {
    HRESULT _hr = put_AutoAttach(AutoAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState CalloutFormat::GetAutoLength ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState CalloutFormat::GetBorder ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutBorder ( enum MsoTriState Border ) {
    HRESULT _hr = put_Border(Border);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float CalloutFormat::GetDrop ( ) {
    float _result = 0;
    HRESULT _hr = get_Drop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoCalloutDropType CalloutFormat::GetDropType ( ) {
    enum MsoCalloutDropType _result;
    HRESULT _hr = get_DropType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float CalloutFormat::GetGap ( ) {
    float _result = 0;
    HRESULT _hr = get_Gap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutGap ( float Gap ) {
    HRESULT _hr = put_Gap(Gap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float CalloutFormat::GetLength ( ) {
    float _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoCalloutType CalloutFormat::GetType ( ) {
    enum MsoCalloutType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CalloutFormat::PutType ( enum MsoCalloutType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeNode wrapper method implementations
//

IDispatchPtr ShapeNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum MsoEditingType ShapeNode::GetEditingType ( ) {
    enum MsoEditingType _result;
    HRESULT _hr = get_EditingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t ShapeNode::GetPoints ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Points(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoSegmentType ShapeNode::GetSegmentType ( ) {
    enum MsoSegmentType _result;
    HRESULT _hr = get_SegmentType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ShapeNodes wrapper method implementations
//

IDispatchPtr ShapeNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int ShapeNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapeNodePtr ShapeNodes::Item ( const _variant_t & Index ) {
    struct ShapeNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodePtr(_result, false);
}

IUnknownPtr ShapeNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT ShapeNodes::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeNodes::Insert ( int Index, enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_Insert(Index, SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeNodes::SetEditingType ( int Index, enum MsoEditingType EditingType ) {
    HRESULT _hr = raw_SetEditingType(Index, EditingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeNodes::SetPosition ( int Index, float X1, float Y1 ) {
    HRESULT _hr = raw_SetPosition(Index, X1, Y1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeNodes::SetSegmentType ( int Index, enum MsoSegmentType SegmentType ) {
    HRESULT _hr = raw_SetSegmentType(Index, SegmentType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Script wrapper method implementations
//

IDispatchPtr Script::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t Script::GetExtended ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extended(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Script::PutExtended ( _bstr_t Extended ) {
    HRESULT _hr = put_Extended(Extended);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Script::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Script::PutId ( _bstr_t Id ) {
    HRESULT _hr = put_Id(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoScriptLanguage Script::GetLanguage ( ) {
    enum MsoScriptLanguage _result;
    HRESULT _hr = get_Language(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Script::PutLanguage ( enum MsoScriptLanguage Language ) {
    HRESULT _hr = put_Language(Language);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoScriptLocation Script::GetLocation ( ) {
    enum MsoScriptLocation _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Script::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr Script::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t Script::GetScriptText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ScriptText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Script::PutScriptText ( _bstr_t Script ) {
    HRESULT _hr = put_ScriptText(Script);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Scripts wrapper method implementations
//

IDispatchPtr Scripts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Scripts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr Scripts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

ScriptPtr Scripts::Item ( const _variant_t & Index ) {
    struct Script * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

ScriptPtr Scripts::Add ( IDispatch * Anchor, enum MsoScriptLocation Location, enum MsoScriptLanguage Language, _bstr_t Id, _bstr_t Extended, _bstr_t ScriptText ) {
    struct Script * _result = 0;
    HRESULT _hr = raw_Add(Anchor, Location, Language, Id, Extended, ScriptText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

HRESULT Scripts::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextEffectFormat wrapper method implementations
//

IDispatchPtr TextEffectFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT TextEffectFormat::ToggleVerticalText ( ) {
    HRESULT _hr = raw_ToggleVerticalText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTextEffectAlignment TextEffectFormat::GetAlignment ( ) {
    enum MsoTextEffectAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutAlignment ( enum MsoTextEffectAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextEffectFormat::GetFontBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontBold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutFontBold ( enum MsoTriState FontBold ) {
    HRESULT _hr = put_FontBold(FontBold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextEffectFormat::GetFontItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FontItalic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutFontItalic ( enum MsoTriState FontItalic ) {
    HRESULT _hr = put_FontItalic(FontItalic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t TextEffectFormat::GetFontName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FontName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void TextEffectFormat::PutFontName ( _bstr_t FontName ) {
    HRESULT _hr = put_FontName(FontName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextEffectFormat::GetFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutFontSize ( float FontSize ) {
    HRESULT _hr = put_FontSize(FontSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextEffectFormat::GetKernedPairs ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_KernedPairs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutKernedPairs ( enum MsoTriState KernedPairs ) {
    HRESULT _hr = put_KernedPairs(KernedPairs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextEffectFormat::GetNormalizedHeight ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NormalizedHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutNormalizedHeight ( enum MsoTriState NormalizedHeight ) {
    HRESULT _hr = put_NormalizedHeight(NormalizedHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetTextEffectShape TextEffectFormat::GetPresetShape ( ) {
    enum MsoPresetTextEffectShape _result;
    HRESULT _hr = get_PresetShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutPresetShape ( enum MsoPresetTextEffectShape PresetShape ) {
    HRESULT _hr = put_PresetShape(PresetShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetTextEffect TextEffectFormat::GetPresetTextEffect ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_PresetTextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutPresetTextEffect ( enum MsoPresetTextEffect Preset ) {
    HRESULT _hr = put_PresetTextEffect(Preset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextEffectFormat::GetRotatedChars ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotatedChars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutRotatedChars ( enum MsoTriState RotatedChars ) {
    HRESULT _hr = put_RotatedChars(RotatedChars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t TextEffectFormat::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void TextEffectFormat::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextEffectFormat::GetTracking ( ) {
    float _result = 0;
    HRESULT _hr = get_Tracking(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextEffectFormat::PutTracking ( float Tracking ) {
    HRESULT _hr = put_Tracking(Tracking);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextFrame wrapper method implementations
//

IDispatchPtr TextFrame::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

float TextFrame::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextOrientation TextFrame::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoDispCagNotifySink wrapper method implementations
//

HRESULT IMsoDispCagNotifySink::InsertClip ( IUnknown * pClipMoniker, IUnknown * pItemMoniker ) {
    HRESULT _hr = raw_InsertClip(pClipMoniker, pItemMoniker);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoDispCagNotifySink::WindowIsClosing ( ) {
    HRESULT _hr = raw_WindowIsClosing();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Balloon wrapper method implementations
//

IDispatchPtr Balloon::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr Balloon::GetCheckboxes ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Checkboxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr Balloon::GetLabels ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Labels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void Balloon::PutBalloonType ( enum MsoBalloonType pbty ) {
    HRESULT _hr = put_BalloonType(pbty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBalloonType Balloon::GetBalloonType ( ) {
    enum MsoBalloonType _result;
    HRESULT _hr = get_BalloonType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Balloon::PutIcon ( enum MsoIconType picn ) {
    HRESULT _hr = put_Icon(picn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoIconType Balloon::GetIcon ( ) {
    enum MsoIconType _result;
    HRESULT _hr = get_Icon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Balloon::PutHeading ( _bstr_t pbstr ) {
    HRESULT _hr = put_Heading(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Balloon::GetHeading ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Heading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Balloon::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Balloon::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Balloon::PutMode ( enum MsoModeType pmd ) {
    HRESULT _hr = put_Mode(pmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoModeType Balloon::GetMode ( ) {
    enum MsoModeType _result;
    HRESULT _hr = get_Mode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Balloon::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoAnimationType Balloon::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Balloon::PutButton ( enum MsoButtonSetType psbs ) {
    HRESULT _hr = put_Button(psbs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoButtonSetType Balloon::GetButton ( ) {
    enum MsoButtonSetType _result;
    HRESULT _hr = get_Button(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Balloon::PutCallback ( _bstr_t pbstr ) {
    HRESULT _hr = put_Callback(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Balloon::GetCallback ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Callback(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Balloon::PutPrivate ( long plPrivate ) {
    HRESULT _hr = put_Private(plPrivate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long Balloon::GetPrivate ( ) {
    long _result = 0;
    HRESULT _hr = get_Private(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Balloon::SetAvoidRectangle ( int Left, int Top, int Right, int Bottom ) {
    HRESULT _hr = raw_SetAvoidRectangle(Left, Top, Right, Bottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t Balloon::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoBalloonButtonType Balloon::Show ( ) {
    enum MsoBalloonButtonType _result;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Balloon::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface BalloonCheckboxes wrapper method implementations
//

_bstr_t BalloonCheckboxes::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr BalloonCheckboxes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr BalloonCheckboxes::GetItem ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int BalloonCheckboxes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BalloonCheckboxes::PutCount ( int pccbx ) {
    HRESULT _hr = put_Count(pccbx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr BalloonCheckboxes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonCheckbox wrapper method implementations
//

_bstr_t BalloonCheckbox::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t BalloonCheckbox::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr BalloonCheckbox::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void BalloonCheckbox::PutChecked ( VARIANT_BOOL pvarfChecked ) {
    HRESULT _hr = put_Checked(pvarfChecked);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL BalloonCheckbox::GetChecked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Checked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BalloonCheckbox::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t BalloonCheckbox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface BalloonLabels wrapper method implementations
//

_bstr_t BalloonLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr BalloonLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr BalloonLabels::GetItem ( int Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int BalloonLabels::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BalloonLabels::PutCount ( int pcwz ) {
    HRESULT _hr = put_Count(pcwz);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr BalloonLabels::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface BalloonLabel wrapper method implementations
//

_bstr_t BalloonLabel::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t BalloonLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr BalloonLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void BalloonLabel::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t BalloonLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface AnswerWizardFiles wrapper method implementations
//

IDispatchPtr AnswerWizardFiles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t AnswerWizardFiles::GetItem ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int AnswerWizardFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT AnswerWizardFiles::Add ( _bstr_t FileName ) {
    HRESULT _hr = raw_Add(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT AnswerWizardFiles::Delete ( _bstr_t FileName ) {
    HRESULT _hr = raw_Delete(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface AnswerWizard wrapper method implementations
//

IDispatchPtr AnswerWizard::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

AnswerWizardFilesPtr AnswerWizard::GetFiles ( ) {
    struct AnswerWizardFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AnswerWizardFilesPtr(_result, false);
}

HRESULT AnswerWizard::ClearFileList ( ) {
    HRESULT _hr = raw_ClearFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT AnswerWizard::ResetFileList ( ) {
    HRESULT _hr = raw_ResetFileList();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DocumentProperty wrapper method implementations
//

HRESULT DocumentProperty::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t DocumentProperty::GetName ( long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void DocumentProperty::PutName ( long lcid, _bstr_t pbstrRetVal ) {
    HRESULT _hr = put_Name(lcid, pbstrRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t DocumentProperty::GetValue ( long lcid ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void DocumentProperty::PutValue ( long lcid, const _variant_t & pvargRetVal ) {
    HRESULT _hr = put_Value(lcid, pvargRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoDocProperties DocumentProperty::GetType ( long lcid ) {
    enum MsoDocProperties _result;
    HRESULT _hr = get_Type(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void DocumentProperty::PutType ( long lcid, enum MsoDocProperties ptypeRetVal ) {
    HRESULT _hr = put_Type(lcid, ptypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL DocumentProperty::GetLinkToContent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LinkToContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void DocumentProperty::PutLinkToContent ( VARIANT_BOOL pfLinkRetVal ) {
    HRESULT _hr = put_LinkToContent(pfLinkRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t DocumentProperty::GetLinkSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LinkSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void DocumentProperty::PutLinkSource ( _bstr_t pbstrSourceRetVal ) {
    HRESULT _hr = put_LinkSource(pbstrSourceRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr DocumentProperty::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long DocumentProperty::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface __DocumentProperties wrapper method implementations
//

DocumentPropertyPtr __DocumentProperties::GetItem ( const _variant_t & Index, long lcid ) {
    struct DocumentProperty * _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

long __DocumentProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DocumentPropertyPtr __DocumentProperties::Add ( _bstr_t Name, VARIANT_BOOL LinkToContent, const _variant_t & Type, const _variant_t & Value, const _variant_t & LinkSource, long lcid ) {
    struct DocumentProperty * _result = 0;
    HRESULT _hr = raw_Add(Name, LinkToContent, Type, Value, LinkSource, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentPropertyPtr(_result, false);
}

IUnknownPtr __DocumentProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr __DocumentProperties::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long __DocumentProperties::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFoundFiles wrapper method implementations
//

_bstr_t IFoundFiles::GetItem ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int IFoundFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr IFoundFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IFind wrapper method implementations
//

_bstr_t IFind::Get__SearchPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get___SearchPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IFind::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IFind::GetSubDir ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SubDir(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IFind::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IFind::GetAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Author(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IFind::GetKeywords ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Keywords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IFind::GetSubject ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Subject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoFileFindOptions IFind::GetOptions ( ) {
    enum MsoFileFindOptions _result;
    HRESULT _hr = get_Options(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IFind::GetMatchCase ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchCase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t IFind::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IFind::GetPatternMatch ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PatternMatch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IFind::GetDateSavedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IFind::GetDateSavedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateSavedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IFind::GetSavedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SavedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IFind::GetDateCreatedFrom ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedFrom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IFind::GetDateCreatedTo ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DateCreatedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoFileFindView IFind::GetView ( ) {
    enum MsoFileFindView _result;
    HRESULT _hr = get_View(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoFileFindSortBy IFind::GetSortBy ( ) {
    enum MsoFileFindSortBy _result;
    HRESULT _hr = get_SortBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoFileFindListBy IFind::GetListBy ( ) {
    enum MsoFileFindListBy _result;
    HRESULT _hr = get_ListBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IFind::GetSelectedFile ( ) {
    int _result = 0;
    HRESULT _hr = get_SelectedFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IFoundFilesPtr IFind::GetResults ( ) {
    struct IFoundFiles * _result = 0;
    HRESULT _hr = get_Results(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFoundFilesPtr(_result, false);
}

int IFind::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IFind::Put__SearchPath ( _bstr_t pbstr ) {
    HRESULT _hr = put___SearchPath(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutName ( _bstr_t pbstr ) {
    HRESULT _hr = put_Name(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutSubDir ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_SubDir(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutTitle ( _bstr_t pbstr ) {
    HRESULT _hr = put_Title(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutAuthor ( _bstr_t pbstr ) {
    HRESULT _hr = put_Author(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutKeywords ( _bstr_t pbstr ) {
    HRESULT _hr = put_Keywords(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutSubject ( _bstr_t pbstr ) {
    HRESULT _hr = put_Subject(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutOptions ( enum MsoFileFindOptions penmOptions ) {
    HRESULT _hr = put_Options(penmOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutMatchCase ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_MatchCase(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutPatternMatch ( VARIANT_BOOL retval ) {
    HRESULT _hr = put_PatternMatch(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutDateSavedFrom ( const _variant_t & pdatSavedFrom ) {
    HRESULT _hr = put_DateSavedFrom(pdatSavedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutDateSavedTo ( const _variant_t & pdatSavedTo ) {
    HRESULT _hr = put_DateSavedTo(pdatSavedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutSavedBy ( _bstr_t pbstr ) {
    HRESULT _hr = put_SavedBy(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutDateCreatedFrom ( const _variant_t & pdatCreatedFrom ) {
    HRESULT _hr = put_DateCreatedFrom(pdatCreatedFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutDateCreatedTo ( const _variant_t & pdatCreatedTo ) {
    HRESULT _hr = put_DateCreatedTo(pdatCreatedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutView ( enum MsoFileFindView penmView ) {
    HRESULT _hr = put_View(penmView);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutSortBy ( enum MsoFileFindSortBy penmSortBy ) {
    HRESULT _hr = put_SortBy(penmSortBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutListBy ( enum MsoFileFindListBy penmListBy ) {
    HRESULT _hr = put_ListBy(penmListBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IFind::PutSelectedFile ( int pintSelectedFile ) {
    HRESULT _hr = put_SelectedFile(pintSelectedFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IFind::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IFind::Load ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Load(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IFind::Save ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Save(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IFind::Delete ( _bstr_t bstrQueryName ) {
    HRESULT _hr = raw_Delete(bstrQueryName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IFind::GetFileType ( ) {
    long _result = 0;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IFind::PutFileType ( long plFileType ) {
    HRESULT _hr = put_FileType(plFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FoundFiles wrapper method implementations
//

_bstr_t FoundFiles::GetItem ( int Index, long lcid ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long FoundFiles::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr FoundFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PropertyTest wrapper method implementations
//

_bstr_t PropertyTest::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoCondition PropertyTest::GetCondition ( ) {
    enum MsoCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t PropertyTest::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t PropertyTest::GetSecondValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SecondValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoConnector PropertyTest::GetConnector ( ) {
    enum MsoConnector _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PropertyTests wrapper method implementations
//

PropertyTestPtr PropertyTests::GetItem ( int Index, long lcid ) {
    struct PropertyTest * _result = 0;
    HRESULT _hr = get_Item(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestPtr(_result, false);
}

long PropertyTests::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT PropertyTests::Add ( _bstr_t Name, enum MsoCondition Condition, const _variant_t & Value, const _variant_t & SecondValue, enum MsoConnector Connector ) {
    HRESULT _hr = raw_Add(Name, Condition, Value, SecondValue, Connector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT PropertyTests::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr PropertyTests::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface COMAddIn wrapper method implementations
//

_bstr_t COMAddIn::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void COMAddIn::PutDescription ( _bstr_t RetValue ) {
    HRESULT _hr = put_Description(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t COMAddIn::GetProgId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProgId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t COMAddIn::GetGuid ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Guid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL COMAddIn::GetConnect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Connect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void COMAddIn::PutConnect ( VARIANT_BOOL RetValue ) {
    HRESULT _hr = put_Connect(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr COMAddIn::GetObject ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Object(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void COMAddIn::PutObject ( IDispatch * RetValue ) {
    HRESULT _hr = put_Object(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr COMAddIn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface COMAddIns wrapper method implementations
//

COMAddInPtr COMAddIns::Item ( VARIANT * Index ) {
    struct COMAddIn * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return COMAddInPtr(_result, false);
}

long COMAddIns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr COMAddIns::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT COMAddIns::Update ( ) {
    HRESULT _hr = raw_Update();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr COMAddIns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT COMAddIns::SetAppModal ( VARIANT_BOOL varfModal ) {
    HRESULT _hr = raw_SetAppModal(varfModal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface LanguageSettings wrapper method implementations
//

int LanguageSettings::GetLanguageID ( enum MsoAppLanguageID Id ) {
    int _result = 0;
    HRESULT _hr = get_LanguageID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL LanguageSettings::GetLanguagePreferredForEditing ( enum MsoLanguageID lid ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LanguagePreferredForEditing(lid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr LanguageSettings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface _CommandBarsEvents wrapper method implementations
//

HRESULT _CommandBarsEvents::OnUpdate ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// dispinterface _CommandBarComboBoxEvents wrapper method implementations
//

HRESULT _CommandBarComboBoxEvents::Change ( struct _CommandBarComboBox * Ctrl ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Ctrl);
}

//
// dispinterface _CommandBarButtonEvents wrapper method implementations
//

HRESULT _CommandBarButtonEvents::Click ( struct _CommandBarButton * Ctrl, VARIANT_BOOL * CancelDefault ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x400b", Ctrl, CancelDefault);
}

//
// interface WebPageFont wrapper method implementations
//

_bstr_t WebPageFont::GetProportionalFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProportionalFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebPageFont::PutProportionalFont ( _bstr_t pstr ) {
    HRESULT _hr = put_ProportionalFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float WebPageFont::GetProportionalFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_ProportionalFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebPageFont::PutProportionalFontSize ( float pf ) {
    HRESULT _hr = put_ProportionalFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebPageFont::GetFixedWidthFont ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FixedWidthFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebPageFont::PutFixedWidthFont ( _bstr_t pstr ) {
    HRESULT _hr = put_FixedWidthFont(pstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float WebPageFont::GetFixedWidthFontSize ( ) {
    float _result = 0;
    HRESULT _hr = get_FixedWidthFontSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebPageFont::PutFixedWidthFontSize ( float pf ) {
    HRESULT _hr = put_FixedWidthFontSize(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface WebPageFonts wrapper method implementations
//

int WebPageFonts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

WebPageFontPtr WebPageFonts::GetItem ( enum MsoCharacterSet Index ) {
    struct WebPageFont * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebPageFontPtr(_result, false);
}

IUnknownPtr WebPageFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface HTMLProjectItem wrapper method implementations
//

_bstr_t HTMLProjectItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL HTMLProjectItem::GetIsOpen ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT HTMLProjectItem::LoadFromFile ( _bstr_t FileName ) {
    HRESULT _hr = raw_LoadFromFile(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT HTMLProjectItem::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT HTMLProjectItem::SaveCopyAs ( _bstr_t FileName ) {
    HRESULT _hr = raw_SaveCopyAs(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t HTMLProjectItem::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void HTMLProjectItem::PutText ( _bstr_t Text ) {
    HRESULT _hr = put_Text(Text);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr HTMLProjectItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProjectItems wrapper method implementations
//

HTMLProjectItemPtr HTMLProjectItems::Item ( VARIANT * Index ) {
    struct HTMLProjectItem * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemPtr(_result, false);
}

long HTMLProjectItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr HTMLProjectItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr HTMLProjectItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface HTMLProject wrapper method implementations
//

enum MsoHTMLProjectState HTMLProject::GetState ( ) {
    enum MsoHTMLProjectState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT HTMLProject::RefreshProject ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshProject(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT HTMLProject::RefreshDocument ( VARIANT_BOOL Refresh ) {
    HRESULT _hr = raw_RefreshDocument(Refresh);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HTMLProjectItemsPtr HTMLProject::GetHTMLProjectItems ( ) {
    struct HTMLProjectItems * _result = 0;
    HRESULT _hr = get_HTMLProjectItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return HTMLProjectItemsPtr(_result, false);
}

IDispatchPtr HTMLProject::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT HTMLProject::Open ( enum MsoHTMLProjectOpen OpenKind ) {
    HRESULT _hr = raw_Open(OpenKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface MsoDebugOptions wrapper method implementations
//

int MsoDebugOptions::GetFeatureReports ( ) {
    int _result = 0;
    HRESULT _hr = get_FeatureReports(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void MsoDebugOptions::PutFeatureReports ( int puintFeatureReports ) {
    HRESULT _hr = put_FeatureReports(puintFeatureReports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL MsoDebugOptions::GetOutputToDebugger ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToDebugger(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void MsoDebugOptions::PutOutputToDebugger ( VARIANT_BOOL pvarfOutputToDebugger ) {
    HRESULT _hr = put_OutputToDebugger(pvarfOutputToDebugger);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL MsoDebugOptions::GetOutputToFile ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void MsoDebugOptions::PutOutputToFile ( VARIANT_BOOL pvarfOutputToFile ) {
    HRESULT _hr = put_OutputToFile(pvarfOutputToFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL MsoDebugOptions::GetOutputToMessageBox ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_OutputToMessageBox(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void MsoDebugOptions::PutOutputToMessageBox ( VARIANT_BOOL pvarfOutputToMessageBox ) {
    HRESULT _hr = put_OutputToMessageBox(pvarfOutputToMessageBox);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr MsoDebugOptions::GetUnitTestManager ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_UnitTestManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT MsoDebugOptions::AddIgnoredAssertTag ( _bstr_t bstrTagToIgnore ) {
    HRESULT _hr = raw_AddIgnoredAssertTag(bstrTagToIgnore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT MsoDebugOptions::RemoveIgnoredAssertTag ( _bstr_t bstrTagToIgnore ) {
    HRESULT _hr = raw_RemoveIgnoredAssertTag(bstrTagToIgnore);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FileDialogSelectedItems wrapper method implementations
//

IDispatchPtr FileDialogSelectedItems::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IUnknownPtr FileDialogSelectedItems::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long FileDialogSelectedItems::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t FileDialogSelectedItems::Item ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilter wrapper method implementations
//

IDispatchPtr FileDialogFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t FileDialogFilter::GetExtensions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Extensions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t FileDialogFilter::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface FileDialogFilters wrapper method implementations
//

IDispatchPtr FileDialogFilters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IUnknownPtr FileDialogFilters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

long FileDialogFilters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

FileDialogFilterPtr FileDialogFilters::Item ( int Index ) {
    struct FileDialogFilter * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

HRESULT FileDialogFilters::Delete ( const _variant_t & filter ) {
    HRESULT _hr = raw_Delete(filter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FileDialogFilters::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

FileDialogFilterPtr FileDialogFilters::Add ( _bstr_t Description, _bstr_t Extensions, const _variant_t & Position ) {
    struct FileDialogFilter * _result = 0;
    HRESULT _hr = raw_Add(Description, Extensions, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFilterPtr(_result, false);
}

//
// interface FileDialog wrapper method implementations
//

IDispatchPtr FileDialog::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

FileDialogFiltersPtr FileDialog::GetFilters ( ) {
    struct FileDialogFilters * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogFiltersPtr(_result, false);
}

int FileDialog::GetFilterIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_FilterIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileDialog::PutFilterIndex ( int FilterIndex ) {
    HRESULT _hr = put_FilterIndex(FilterIndex);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileDialog::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileDialog::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileDialog::GetButtonName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ButtonName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileDialog::PutButtonName ( _bstr_t ButtonName ) {
    HRESULT _hr = put_ButtonName(ButtonName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL FileDialog::GetAllowMultiSelect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowMultiSelect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileDialog::PutAllowMultiSelect ( VARIANT_BOOL pvarfAllowMultiSelect ) {
    HRESULT _hr = put_AllowMultiSelect(pvarfAllowMultiSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoFileDialogView FileDialog::GetInitialView ( ) {
    enum MsoFileDialogView _result;
    HRESULT _hr = get_InitialView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileDialog::PutInitialView ( enum MsoFileDialogView pinitialview ) {
    HRESULT _hr = put_InitialView(pinitialview);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileDialog::GetInitialFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_InitialFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileDialog::PutInitialFileName ( _bstr_t InitialFileName ) {
    HRESULT _hr = put_InitialFileName(InitialFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

FileDialogSelectedItemsPtr FileDialog::GetSelectedItems ( ) {
    struct FileDialogSelectedItems * _result = 0;
    HRESULT _hr = get_SelectedItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileDialogSelectedItemsPtr(_result, false);
}

enum MsoFileDialogType FileDialog::GetDialogType ( ) {
    enum MsoFileDialogType _result;
    HRESULT _hr = get_DialogType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t FileDialog::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int FileDialog::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT FileDialog::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoEnvelopeVB wrapper method implementations
//

_bstr_t IMsoEnvelopeVB::GetIntroduction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Introduction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoEnvelopeVB::PutIntroduction ( _bstr_t pbstrIntro ) {
    HRESULT _hr = put_Introduction(pbstrIntro);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoEnvelopeVB::GetItem ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoEnvelopeVB::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoEnvelopeVB::GetCommandBars ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_CommandBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// dispinterface IMsoEnvelopeVBEvents wrapper method implementations
//

HRESULT IMsoEnvelopeVBEvents::EnvelopeShow ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

HRESULT IMsoEnvelopeVBEvents::EnvelopeHide ( ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

//
// interface Assistant wrapper method implementations
//

IDispatchPtr Assistant::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT Assistant::Move ( int xLeft, int yTop ) {
    HRESULT _hr = raw_Move(xLeft, yTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void Assistant::PutTop ( int pyTop ) {
    HRESULT _hr = put_Top(pyTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int Assistant::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutLeft ( int pxLeft ) {
    HRESULT _hr = put_Left(pxLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int Assistant::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Assistant::Help ( ) {
    HRESULT _hr = raw_Help();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long Assistant::StartWizard ( VARIANT_BOOL On, _bstr_t Callback, long PrivateX, const _variant_t & Animation, const _variant_t & CustomTeaser, const _variant_t & Top, const _variant_t & Left, const _variant_t & Bottom, const _variant_t & Right ) {
    long _result = 0;
    HRESULT _hr = raw_StartWizard(On, Callback, PrivateX, Animation, CustomTeaser, Top, Left, Bottom, Right, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Assistant::EndWizard ( long WizardID, VARIANT_BOOL varfSuccess, const _variant_t & Animation ) {
    HRESULT _hr = raw_EndWizard(WizardID, varfSuccess, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Assistant::ActivateWizard ( long WizardID, enum MsoWizardActType act, const _variant_t & Animation ) {
    HRESULT _hr = raw_ActivateWizard(WizardID, act, Animation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Assistant::ResetTips ( ) {
    HRESULT _hr = raw_ResetTips();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

BalloonPtr Assistant::GetNewBalloon ( ) {
    struct Balloon * _result = 0;
    HRESULT _hr = get_NewBalloon(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BalloonPtr(_result, false);
}

enum MsoBalloonErrorType Assistant::GetBalloonError ( ) {
    enum MsoBalloonErrorType _result;
    HRESULT _hr = get_BalloonError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL Assistant::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoAnimationType Assistant::GetAnimation ( ) {
    enum MsoAnimationType _result;
    HRESULT _hr = get_Animation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutAnimation ( enum MsoAnimationType pfca ) {
    HRESULT _hr = put_Animation(pfca);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetReduced ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Reduced(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutReduced ( VARIANT_BOOL pvarfReduced ) {
    HRESULT _hr = put_Reduced(pvarfReduced);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void Assistant::PutAssistWithHelp ( VARIANT_BOOL pvarfAssistWithHelp ) {
    HRESULT _hr = put_AssistWithHelp(pvarfAssistWithHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetAssistWithHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutAssistWithWizards ( VARIANT_BOOL pvarfAssistWithWizards ) {
    HRESULT _hr = put_AssistWithWizards(pvarfAssistWithWizards);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetAssistWithWizards ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithWizards(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutAssistWithAlerts ( VARIANT_BOOL pvarfAssistWithAlerts ) {
    HRESULT _hr = put_AssistWithAlerts(pvarfAssistWithAlerts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetAssistWithAlerts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AssistWithAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutMoveWhenInTheWay ( VARIANT_BOOL pvarfMove ) {
    HRESULT _hr = put_MoveWhenInTheWay(pvarfMove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetMoveWhenInTheWay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MoveWhenInTheWay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutSounds ( VARIANT_BOOL pvarfSounds ) {
    HRESULT _hr = put_Sounds(pvarfSounds);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetSounds ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Sounds(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutFeatureTips ( VARIANT_BOOL pvarfFeatures ) {
    HRESULT _hr = put_FeatureTips(pvarfFeatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetFeatureTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_FeatureTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutMouseTips ( VARIANT_BOOL pvarfMouse ) {
    HRESULT _hr = put_MouseTips(pvarfMouse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetMouseTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MouseTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutKeyboardShortcutTips ( VARIANT_BOOL pvarfKeyboardShortcuts ) {
    HRESULT _hr = put_KeyboardShortcutTips(pvarfKeyboardShortcuts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetKeyboardShortcutTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_KeyboardShortcutTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutHighPriorityTips ( VARIANT_BOOL pvarfHighPriorityTips ) {
    HRESULT _hr = put_HighPriorityTips(pvarfHighPriorityTips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetHighPriorityTips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HighPriorityTips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutTipOfDay ( VARIANT_BOOL pvarfTipOfDay ) {
    HRESULT _hr = put_TipOfDay(pvarfTipOfDay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetTipOfDay ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TipOfDay(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutGuessHelp ( VARIANT_BOOL pvarfGuessHelp ) {
    HRESULT _hr = put_GuessHelp(pvarfGuessHelp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetGuessHelp ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_GuessHelp(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutSearchWhenProgramming ( VARIANT_BOOL pvarfSearchInProgram ) {
    HRESULT _hr = put_SearchWhenProgramming(pvarfSearchInProgram);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Assistant::GetSearchWhenProgramming ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchWhenProgramming(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t Assistant::GetItem ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t Assistant::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Assistant::PutFileName ( _bstr_t pbstr ) {
    HRESULT _hr = put_FileName(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Assistant::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL Assistant::GetOn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_On(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Assistant::PutOn ( VARIANT_BOOL pvarfOn ) {
    HRESULT _hr = put_On(pvarfOn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int Assistant::DoAlert ( _bstr_t bstrAlertTitle, _bstr_t bstrAlertText, enum MsoAlertButtonType alb, enum MsoAlertIconType alc, enum MsoAlertDefaultType ald, enum MsoAlertCancelType alq, VARIANT_BOOL varfSysAlert ) {
    int _result = 0;
    HRESULT _hr = raw_DoAlert(bstrAlertTitle, bstrAlertText, alb, alc, ald, alq, varfSysAlert, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface FileTypes wrapper method implementations
//

enum MsoFileType FileTypes::GetItem ( int Index ) {
    enum MsoFileType _result;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int FileTypes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT FileTypes::Add ( enum MsoFileType FileType ) {
    HRESULT _hr = raw_Add(FileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FileTypes::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr FileTypes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface OfficeDataSourceObject wrapper method implementations
//

_bstr_t OfficeDataSourceObject::GetConnectString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ConnectString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void OfficeDataSourceObject::PutConnectString ( _bstr_t pbstrConnect ) {
    HRESULT _hr = put_ConnectString(pbstrConnect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t OfficeDataSourceObject::GetTable ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Table(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void OfficeDataSourceObject::PutTable ( _bstr_t pbstrTable ) {
    HRESULT _hr = put_Table(pbstrTable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t OfficeDataSourceObject::GetDataSource ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void OfficeDataSourceObject::PutDataSource ( _bstr_t pbstrSrc ) {
    HRESULT _hr = put_DataSource(pbstrSrc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr OfficeDataSourceObject::GetColumns ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Columns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long OfficeDataSourceObject::GetRowCount ( ) {
    long _result = 0;
    HRESULT _hr = get_RowCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr OfficeDataSourceObject::GetFilters ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Filters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int OfficeDataSourceObject::Move ( enum MsoMoveRow MsoMoveRow, int RowNbr ) {
    int _result = 0;
    HRESULT _hr = raw_Move(MsoMoveRow, RowNbr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT OfficeDataSourceObject::Open ( _bstr_t bstrSrc, _bstr_t bstrConnect, _bstr_t bstrTable, long fOpenExclusive, long fNeverPrompt ) {
    HRESULT _hr = raw_Open(bstrSrc, bstrConnect, bstrTable, fOpenExclusive, fNeverPrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT OfficeDataSourceObject::SetSortOrder ( _bstr_t SortField1, VARIANT_BOOL SortAscending1, _bstr_t SortField2, VARIANT_BOOL SortAscending2, _bstr_t SortField3, VARIANT_BOOL SortAscending3 ) {
    HRESULT _hr = raw_SetSortOrder(SortField1, SortAscending1, SortField2, SortAscending2, SortField3, SortAscending3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT OfficeDataSourceObject::ApplyFilter ( ) {
    HRESULT _hr = raw_ApplyFilter();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ODSOColumn wrapper method implementations
//

long ODSOColumn::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ODSOColumn::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr ODSOColumn::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t ODSOColumn::GetValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ODSOColumns wrapper method implementations
//

long ODSOColumns::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ODSOColumns::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr ODSOColumns::Item ( const _variant_t & varIndex ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(varIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ODSOFilter wrapper method implementations
//

long ODSOFilter::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ODSOFilter::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t ODSOFilter::GetColumn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ODSOFilter::PutColumn ( _bstr_t pbstrCol ) {
    HRESULT _hr = put_Column(pbstrCol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoFilterComparison ODSOFilter::GetComparison ( ) {
    enum MsoFilterComparison _result;
    HRESULT _hr = get_Comparison(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ODSOFilter::PutComparison ( enum MsoFilterComparison pComparison ) {
    HRESULT _hr = put_Comparison(pComparison);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t ODSOFilter::GetCompareTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CompareTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ODSOFilter::PutCompareTo ( _bstr_t pbstrCompareTo ) {
    HRESULT _hr = put_CompareTo(pbstrCompareTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoFilterConjunction ODSOFilter::GetConjunction ( ) {
    enum MsoFilterConjunction _result;
    HRESULT _hr = get_Conjunction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ODSOFilter::PutConjunction ( enum MsoFilterConjunction pConjunction ) {
    HRESULT _hr = put_Conjunction(pConjunction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ODSOFilters wrapper method implementations
//

long ODSOFilters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ODSOFilters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr ODSOFilters::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ODSOFilters::Add ( _bstr_t Column, enum MsoFilterComparison Comparison, enum MsoFilterConjunction Conjunction, _bstr_t bstrCompareTo, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Add(Column, Comparison, Conjunction, bstrCompareTo, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ODSOFilters::Delete ( long Index, VARIANT_BOOL DeferUpdate ) {
    HRESULT _hr = raw_Delete(Index, DeferUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface NewFile wrapper method implementations
//

VARIANT_BOOL NewFile::Add ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Add(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL NewFile::Remove ( _bstr_t FileName, const _variant_t & Section, const _variant_t & DisplayName, const _variant_t & Action ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Remove(FileName, Section, DisplayName, Action, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WebComponent wrapper method implementations
//

IDispatchPtr WebComponent::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t WebComponent::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponent::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponent::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponent::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponent::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponent::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponent::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponent::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponent::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponent::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT WebComponent::SetPlaceHolderGraphic ( _bstr_t PlaceHolderGraphic ) {
    HRESULT _hr = raw_SetPlaceHolderGraphic(PlaceHolderGraphic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT WebComponent::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT WebComponent::Revert ( ) {
    HRESULT _hr = raw_Revert();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface WebComponentWindowExternal wrapper method implementations
//

long WebComponentWindowExternal::GetInterfaceVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_InterfaceVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t WebComponentWindowExternal::GetApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long WebComponentWindowExternal::GetApplicationVersion ( ) {
    long _result = 0;
    HRESULT _hr = get_ApplicationVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr WebComponentWindowExternal::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT WebComponentWindowExternal::CloseWindow ( ) {
    HRESULT _hr = raw_CloseWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

WebComponentPtr WebComponentWindowExternal::GetWebComponent ( ) {
    struct WebComponent * _result = 0;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WebComponentPtr(_result, false);
}

//
// interface WebComponentFormat wrapper method implementations
//

IDispatchPtr WebComponentFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr WebComponentFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t WebComponentFormat::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentFormat::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentFormat::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentFormat::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentFormat::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentFormat::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponentFormat::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponentFormat::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponentFormat::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponentFormat::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentFormat::GetPreviewGraphic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentFormat::PutPreviewGraphic ( _bstr_t retval ) {
    HRESULT _hr = put_PreviewGraphic(retval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT WebComponentFormat::LaunchPropertiesWindow ( ) {
    HRESULT _hr = raw_LaunchPropertiesWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ILicWizExternal wrapper method implementations
//

HRESULT ILicWizExternal::PrintHtmlDocument ( IUnknown * punkHtmlDoc ) {
    HRESULT _hr = raw_PrintHtmlDocument(punkHtmlDoc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::InvokeDateTimeApplet ( ) {
    HRESULT _hr = raw_InvokeDateTimeApplet();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicWizExternal::FormatDate ( DATE date, _bstr_t pFormat ) {
    BSTR _result = 0;
    HRESULT _hr = raw_FormatDate(date, pFormat, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicWizExternal::ShowHelp ( VARIANT * pvarId ) {
    HRESULT _hr = raw_ShowHelp(pvarId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::Terminate ( ) {
    HRESULT _hr = raw_Terminate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::DisableVORWReminder ( long BPC ) {
    HRESULT _hr = raw_DisableVORWReminder(BPC);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicWizExternal::SaveReceipt ( _bstr_t bstrReceipt ) {
    BSTR _result = 0;
    HRESULT _hr = raw_SaveReceipt(bstrReceipt, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicWizExternal::OpenInDefaultBrowser ( _bstr_t bstrUrl ) {
    HRESULT _hr = raw_OpenInDefaultBrowser(bstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long ILicWizExternal::MsoAlert ( _bstr_t bstrText, _bstr_t bstrButtons, _bstr_t bstrIcon ) {
    long _result = 0;
    HRESULT _hr = raw_MsoAlert(bstrText, bstrButtons, bstrIcon, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long ILicWizExternal::DepositPidKey ( _bstr_t bstrKey, int fMORW ) {
    long _result = 0;
    HRESULT _hr = raw_DepositPidKey(bstrKey, fMORW, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicWizExternal::WriteLog ( _bstr_t bstrMessage ) {
    HRESULT _hr = raw_WriteLog(bstrMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::ResignDpc ( _bstr_t bstrProductCode ) {
    HRESULT _hr = raw_ResignDpc(bstrProductCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::ResetPID ( ) {
    HRESULT _hr = raw_ResetPID();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::SetDialogSize ( long dx, long dy ) {
    HRESULT _hr = raw_SetDialogSize(dx, dy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long ILicWizExternal::VerifyClock ( long lMode ) {
    long _result = 0;
    HRESULT _hr = raw_VerifyClock(lMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicWizExternal::SortSelectOptions ( IDispatch * pdispSelect ) {
    HRESULT _hr = raw_SortSelectOptions(pdispSelect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicWizExternal::InternetDisconnect ( ) {
    HRESULT _hr = raw_InternetDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int ILicWizExternal::GetConnectedState ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetConnectedState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long ILicWizExternal::GetContext ( ) {
    long _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ILicWizExternal::GetValidator ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Validator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr ILicWizExternal::GetLicAgent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_LicAgent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t ILicWizExternal::GetCountryInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CountryInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ILicWizExternal::PutWizardVisible ( int _arg1 ) {
    HRESULT _hr = put_WizardVisible(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void ILicWizExternal::PutWizardTitle ( _bstr_t _arg1 ) {
    HRESULT _hr = put_WizardTitle(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int ILicWizExternal::GetAnimationEnabled ( ) {
    int _result = 0;
    HRESULT _hr = get_AnimationEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ILicWizExternal::PutCurrentHelpId ( long _arg1 ) {
    HRESULT _hr = put_CurrentHelpId(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t ILicWizExternal::GetOfficeOnTheWebUrl ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OfficeOnTheWebUrl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ILicValidator wrapper method implementations
//

_variant_t ILicValidator::GetProducts ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Products(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

int ILicValidator::GetSelection ( ) {
    int _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ILicValidator::PutSelection ( int piSel ) {
    HRESULT _hr = put_Selection(piSel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ILicAgent wrapper method implementations
//

unsigned long ILicAgent::Initialize ( unsigned long dwBPC, unsigned long dwMode, _bstr_t bstrLicSource ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_Initialize(dwBPC, dwMode, bstrLicSource, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ILicAgent::GetFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetOrgName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOrgName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetOrgName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOrgName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetEmail ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetEmail(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetAddress1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetState ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetCountryCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetCountryDesc ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCountryDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetCountryDesc ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetCountryDesc(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

unsigned long ILicAgent::GetIsoLanguage ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetIsoLanguage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::SetIsoLanguage ( unsigned long dwNewVal ) {
    HRESULT _hr = raw_SetIsoLanguage(dwNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetMSUpdate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMSUpdate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetMSUpdate ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSUpdate(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetMSOffer ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMSOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetMSOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetMSOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetOtherOffer ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOtherOffer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetOtherOffer ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetOtherOffer(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetAddress2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

unsigned long ILicAgent::CheckSystemClock ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_CheckSystemClock(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE ILicAgent::GetExistingExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetExistingExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE ILicAgent::GetNewExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetNewExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ILicAgent::GetBillingFirstName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingFirstName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingFirstName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingFirstName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingLastName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingLastName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingLastName ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingLastName(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingPhone ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingPhone(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingAddress1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingAddress1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingAddress1 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress1(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingAddress2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingAddress2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingAddress2 ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingAddress2(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingCity ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingCity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingCity ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCity(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingState ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingState(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingState ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingState(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingCountryCode ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingCountryCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingCountryCode ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingCountryCode(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetBillingZip ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBillingZip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT ILicAgent::SetBillingZip ( _bstr_t bstrNewVal ) {
    HRESULT _hr = raw_SetBillingZip(bstrNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

unsigned long ILicAgent::SaveBillingInfo ( int bSave ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_SaveBillingInfo(bSave, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ILicAgent::IsCCRenewalCountry ( _bstr_t bstrCountryCode ) {
    int _result = 0;
    HRESULT _hr = raw_IsCCRenewalCountry(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ILicAgent::GetVATLabel ( _bstr_t bstrCountryCode ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVATLabel(bstrCountryCode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

DATE ILicAgent::GetCCRenewalExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCCRenewalExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::SetVATNumber ( _bstr_t bstrVATNumber ) {
    HRESULT _hr = raw_SetVATNumber(bstrVATNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::SetCreditCardType ( _bstr_t bstrCCCode ) {
    HRESULT _hr = raw_SetCreditCardType(bstrCCCode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::SetCreditCardNumber ( _bstr_t bstrCCNumber ) {
    HRESULT _hr = raw_SetCreditCardNumber(bstrCCNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::SetCreditCardExpiryYear ( unsigned long dwCCYear ) {
    HRESULT _hr = raw_SetCreditCardExpiryYear(dwCCYear);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::SetCreditCardExpiryMonth ( unsigned long dwCCMonth ) {
    HRESULT _hr = raw_SetCreditCardExpiryMonth(dwCCMonth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

unsigned long ILicAgent::GetCreditCardCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ILicAgent::GetCreditCardCode ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardCode(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetCreditCardName ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardName(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetVATNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetVATNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetCreditCardType ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetCreditCardNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCreditCardNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

unsigned long ILicAgent::GetCreditCardExpiryYear ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardExpiryYear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

unsigned long ILicAgent::GetCreditCardExpiryMonth ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCreditCardExpiryMonth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ILicAgent::GetDisconnectOption ( ) {
    int _result = 0;
    HRESULT _hr = raw_GetDisconnectOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::SetDisconnectOption ( int bNewVal ) {
    HRESULT _hr = raw_SetDisconnectOption(bNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessHandshakeRequest ( int bReviseCustInfo ) {
    HRESULT _hr = raw_AsyncProcessHandshakeRequest(bReviseCustInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessNewLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessNewLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessReissueLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReissueLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessRetailRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessRetailRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessReviseCustInfoRequest ( ) {
    HRESULT _hr = raw_AsyncProcessReviseCustInfoRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessCCRenewalPriceRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalPriceRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessCCRenewalLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessCCRenewalLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

unsigned long ILicAgent::GetAsyncProcessReturnCode ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetAsyncProcessReturnCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ILicAgent::IsUpgradeAvailable ( ) {
    int _result = 0;
    HRESULT _hr = raw_IsUpgradeAvailable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::WantUpgrade ( int bWantUpgrade ) {
    HRESULT _hr = raw_WantUpgrade(bWantUpgrade);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ILicAgent::AsyncProcessDroppedLicenseRequest ( ) {
    HRESULT _hr = raw_AsyncProcessDroppedLicenseRequest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GenerateInstallationId ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GenerateInstallationId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

unsigned long ILicAgent::DepositConfirmationId ( _bstr_t bstrVal ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_DepositConfirmationId(bstrVal, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ILicAgent::VerifyCheckDigits ( _bstr_t bstrCIDIID ) {
    int _result = 0;
    HRESULT _hr = raw_VerifyCheckDigits(bstrCIDIID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE ILicAgent::GetCurrentExpiryDate ( ) {
    DATE _result = 0;
    HRESULT _hr = raw_GetCurrentExpiryDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::CancelAsyncProcessRequest ( int bIsLicenseRequest ) {
    HRESULT _hr = raw_CancelAsyncProcessRequest(bIsLicenseRequest);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetCurrencyDescription ( unsigned long dwCurrencyIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCurrencyDescription(dwCurrencyIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

unsigned long ILicAgent::GetPriceItemCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetPriceItemCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ILicAgent::GetPriceItemLabel ( unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPriceItemLabel(dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetPriceItemValue ( unsigned long dwCurrencyIndex, unsigned long dwIndex ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetPriceItemValue(dwCurrencyIndex, dwIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetInvoiceText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetInvoiceText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ILicAgent::GetBackendErrorMsg ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetBackendErrorMsg(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

unsigned long ILicAgent::GetCurrencyOption ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_GetCurrencyOption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ILicAgent::SetCurrencyOption ( unsigned long dwCurrencyOption ) {
    HRESULT _hr = raw_SetCurrencyOption(dwCurrencyOption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t ILicAgent::GetEndOfLifeHtmlText ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEndOfLifeHtmlText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

unsigned long ILicAgent::DisplaySSLCert ( ) {
    unsigned long _result = 0;
    HRESULT _hr = raw_DisplaySSLCert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoEServicesDialog wrapper method implementations
//

HRESULT IMsoEServicesDialog::Close ( VARIANT_BOOL ApplyWebComponentChanges ) {
    HRESULT _hr = raw_Close(ApplyWebComponentChanges);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoEServicesDialog::AddTrustedDomain ( _bstr_t Domain ) {
    HRESULT _hr = raw_AddTrustedDomain(Domain);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t IMsoEServicesDialog::GetApplicationName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IMsoEServicesDialog::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoEServicesDialog::GetWebComponent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_WebComponent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoEServicesDialog::GetClipArt ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ClipArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface WebComponentProperties wrapper method implementations
//

IDispatchPtr WebComponentProperties::GetShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t WebComponentProperties::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutName ( _bstr_t RetValue ) {
    HRESULT _hr = put_Name(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentProperties::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutURL ( _bstr_t RetValue ) {
    HRESULT _hr = put_URL(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentProperties::GetHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_HTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentProperties::GetPreviewGraphic ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewGraphic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutPreviewGraphic ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewGraphic(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentProperties::GetPreviewHTML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PreviewHTML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutPreviewHTML ( _bstr_t RetValue ) {
    HRESULT _hr = put_PreviewHTML(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponentProperties::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponentProperties::PutWidth ( long RetValue ) {
    HRESULT _hr = put_Width(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long WebComponentProperties::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void WebComponentProperties::PutHeight ( long RetValue ) {
    HRESULT _hr = put_Height(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t WebComponentProperties::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void WebComponentProperties::PutTag ( _bstr_t RetValue ) {
    HRESULT _hr = put_Tag(RetValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SmartDocument wrapper method implementations
//

_bstr_t SmartDocument::GetSolutionID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SmartDocument::PutSolutionID ( _bstr_t pbstrID ) {
    HRESULT _hr = put_SolutionID(pbstrID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SmartDocument::GetSolutionURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SolutionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SmartDocument::PutSolutionURL ( _bstr_t pbstrUrl ) {
    HRESULT _hr = put_SolutionURL(pbstrUrl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT SmartDocument::PickSolution ( VARIANT_BOOL ConsiderAllSchemas ) {
    HRESULT _hr = raw_PickSolution(ConsiderAllSchemas);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SmartDocument::RefreshPane ( ) {
    HRESULT _hr = raw_RefreshPane();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SharedWorkspaceMember wrapper method implementations
//

_bstr_t SharedWorkspaceMember::GetDomainName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DomainName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SharedWorkspaceMember::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SharedWorkspaceMember::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Email(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT SharedWorkspaceMember::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t SharedWorkspaceMember::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr SharedWorkspaceMember::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceMembers wrapper method implementations
//

IUnknownPtr SharedWorkspaceMembers::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SharedWorkspaceMemberPtr SharedWorkspaceMembers::GetItem ( int Index ) {
    struct SharedWorkspaceMember * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

int SharedWorkspaceMembers::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SharedWorkspaceMemberPtr SharedWorkspaceMembers::Add ( _bstr_t Email, _bstr_t DomainName, _bstr_t DisplayName, const _variant_t & Role ) {
    struct SharedWorkspaceMember * _result = 0;
    HRESULT _hr = raw_Add(Email, DomainName, DisplayName, Role, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMemberPtr(_result, false);
}

IDispatchPtr SharedWorkspaceMembers::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL SharedWorkspaceMembers::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceTask wrapper method implementations
//

_bstr_t SharedWorkspaceTask::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceTask::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceTask::GetAssignedTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssignedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceTask::PutAssignedTo ( _bstr_t AssignedTo ) {
    HRESULT _hr = put_AssignedTo(AssignedTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoSharedWorkspaceTaskStatus SharedWorkspaceTask::GetStatus ( ) {
    enum MsoSharedWorkspaceTaskStatus _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SharedWorkspaceTask::PutStatus ( enum MsoSharedWorkspaceTaskStatus Status ) {
    HRESULT _hr = put_Status(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoSharedWorkspaceTaskPriority SharedWorkspaceTask::GetPriority ( ) {
    enum MsoSharedWorkspaceTaskPriority _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SharedWorkspaceTask::PutPriority ( enum MsoSharedWorkspaceTaskPriority Priority ) {
    HRESULT _hr = put_Priority(Priority);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceTask::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceTask::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t SharedWorkspaceTask::GetDueDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void SharedWorkspaceTask::PutDueDate ( const _variant_t & DueDate ) {
    HRESULT _hr = put_DueDate(DueDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceTask::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceTask::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t SharedWorkspaceTask::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceTask::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT SharedWorkspaceTask::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SharedWorkspaceTask::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SharedWorkspaceTask::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceTasks wrapper method implementations
//

SharedWorkspaceTaskPtr SharedWorkspaceTasks::GetItem ( int Index ) {
    struct SharedWorkspaceTask * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

int SharedWorkspaceTasks::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SharedWorkspaceTaskPtr SharedWorkspaceTasks::Add ( _bstr_t Title, const _variant_t & Status, const _variant_t & Priority, const _variant_t & Assignee, const _variant_t & Description, const _variant_t & DueDate ) {
    struct SharedWorkspaceTask * _result = 0;
    HRESULT _hr = raw_Add(Title, Status, Priority, Assignee, Description, DueDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTaskPtr(_result, false);
}

IDispatchPtr SharedWorkspaceTasks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL SharedWorkspaceTasks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr SharedWorkspaceTasks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SharedWorkspaceFile wrapper method implementations
//

_bstr_t SharedWorkspaceFile::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SharedWorkspaceFile::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceFile::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t SharedWorkspaceFile::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceFile::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT SharedWorkspaceFile::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SharedWorkspaceFile::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFiles wrapper method implementations
//

IUnknownPtr SharedWorkspaceFiles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SharedWorkspaceFilePtr SharedWorkspaceFiles::GetItem ( int Index ) {
    struct SharedWorkspaceFile * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

int SharedWorkspaceFiles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SharedWorkspaceFilePtr SharedWorkspaceFiles::Add ( _bstr_t FileName, const _variant_t & ParentFolder, const _variant_t & OverwriteIfFileAlreadyExists, const _variant_t & KeepInSync ) {
    struct SharedWorkspaceFile * _result = 0;
    HRESULT _hr = raw_Add(FileName, ParentFolder, OverwriteIfFileAlreadyExists, KeepInSync, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilePtr(_result, false);
}

IDispatchPtr SharedWorkspaceFiles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL SharedWorkspaceFiles::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceFolder wrapper method implementations
//

_bstr_t SharedWorkspaceFolder::GetFolderName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FolderName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT SharedWorkspaceFolder::Delete ( const _variant_t & DeleteEventIfFolderContainsFiles ) {
    HRESULT _hr = raw_Delete(DeleteEventIfFolderContainsFiles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SharedWorkspaceFolder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceFolders wrapper method implementations
//

IUnknownPtr SharedWorkspaceFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SharedWorkspaceFolderPtr SharedWorkspaceFolders::GetItem ( int Index ) {
    struct SharedWorkspaceFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

int SharedWorkspaceFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SharedWorkspaceFolderPtr SharedWorkspaceFolders::Add ( _bstr_t FolderName, const _variant_t & ParentFolder ) {
    struct SharedWorkspaceFolder * _result = 0;
    HRESULT _hr = raw_Add(FolderName, ParentFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFolderPtr(_result, false);
}

IDispatchPtr SharedWorkspaceFolders::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL SharedWorkspaceFolders::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspaceLink wrapper method implementations
//

_bstr_t SharedWorkspaceLink::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceLink::PutURL ( _bstr_t URL ) {
    HRESULT _hr = put_URL(URL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceLink::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceLink::PutDescription ( _bstr_t Description ) {
    HRESULT _hr = put_Description(Description);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceLink::GetNotes ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Notes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspaceLink::PutNotes ( _bstr_t Notes ) {
    HRESULT _hr = put_Notes(Notes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SharedWorkspaceLink::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceLink::GetCreatedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t SharedWorkspaceLink::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t SharedWorkspaceLink::GetModifiedDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ModifiedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT SharedWorkspaceLink::Save ( ) {
    HRESULT _hr = raw_Save();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SharedWorkspaceLink::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SharedWorkspaceLink::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface SharedWorkspaceLinks wrapper method implementations
//

IUnknownPtr SharedWorkspaceLinks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SharedWorkspaceLinkPtr SharedWorkspaceLinks::GetItem ( int Index ) {
    struct SharedWorkspaceLink * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

int SharedWorkspaceLinks::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SharedWorkspaceLinkPtr SharedWorkspaceLinks::Add ( _bstr_t URL, const _variant_t & Description, const _variant_t & Notes ) {
    struct SharedWorkspaceLink * _result = 0;
    HRESULT _hr = raw_Add(URL, Description, Notes, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinkPtr(_result, false);
}

IDispatchPtr SharedWorkspaceLinks::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL SharedWorkspaceLinks::GetItemCountExceeded ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ItemCountExceeded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SharedWorkspace wrapper method implementations
//

_bstr_t SharedWorkspace::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspace::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SharedWorkspaceMembersPtr SharedWorkspace::GetMembers ( ) {
    struct SharedWorkspaceMembers * _result = 0;
    HRESULT _hr = get_Members(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceMembersPtr(_result, false);
}

SharedWorkspaceTasksPtr SharedWorkspace::GetTasks ( ) {
    struct SharedWorkspaceTasks * _result = 0;
    HRESULT _hr = get_Tasks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceTasksPtr(_result, false);
}

SharedWorkspaceFilesPtr SharedWorkspace::GetFiles ( ) {
    struct SharedWorkspaceFiles * _result = 0;
    HRESULT _hr = get_Files(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFilesPtr(_result, false);
}

SharedWorkspaceFoldersPtr SharedWorkspace::GetFolders ( ) {
    struct SharedWorkspaceFolders * _result = 0;
    HRESULT _hr = get_Folders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceFoldersPtr(_result, false);
}

SharedWorkspaceLinksPtr SharedWorkspace::GetLinks ( ) {
    struct SharedWorkspaceLinks * _result = 0;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SharedWorkspaceLinksPtr(_result, false);
}

HRESULT SharedWorkspace::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SharedWorkspace::CreateNew ( const _variant_t & URL, const _variant_t & Name ) {
    HRESULT _hr = raw_CreateNew(URL, Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SharedWorkspace::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SharedWorkspace::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t SharedWorkspace::GetURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_URL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL SharedWorkspace::GetConnected ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Connected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t SharedWorkspace::GetLastRefreshed ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastRefreshed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t SharedWorkspace::GetSourceURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SourceURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SharedWorkspace::PutSourceURL ( _bstr_t pbstrSourceURL ) {
    HRESULT _hr = put_SourceURL(pbstrSourceURL);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT SharedWorkspace::RemoveDocument ( ) {
    HRESULT _hr = raw_RemoveDocument();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SharedWorkspace::Disconnect ( ) {
    HRESULT _hr = raw_Disconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Sync wrapper method implementations
//

enum MsoSyncStatusType Sync::GetStatus ( ) {
    enum MsoSyncStatusType _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t Sync::GetWorkspaceLastChangedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkspaceLastChangedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t Sync::GetLastSyncTime ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LastSyncTime(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoSyncErrorType Sync::GetErrorType ( ) {
    enum MsoSyncErrorType _result;
    HRESULT _hr = get_ErrorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Sync::GetUpdate ( ) {
    HRESULT _hr = raw_GetUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Sync::PutUpdate ( ) {
    HRESULT _hr = raw_PutUpdate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Sync::OpenVersion ( enum MsoSyncVersionType SyncVersionType ) {
    HRESULT _hr = raw_OpenVersion(SyncVersionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Sync::ResolveConflict ( enum MsoSyncConflictResolutionType SyncConflictResolution ) {
    HRESULT _hr = raw_ResolveConflict(SyncConflictResolution);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Sync::Unsuspend ( ) {
    HRESULT _hr = raw_Unsuspend();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr Sync::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersion wrapper method implementations
//

_variant_t DocumentLibraryVersion::GetModified ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Modified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

long DocumentLibraryVersion::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr DocumentLibraryVersion::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t DocumentLibraryVersion::GetModifiedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ModifiedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t DocumentLibraryVersion::GetComments ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Comments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT DocumentLibraryVersion::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr DocumentLibraryVersion::Open ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Open(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr DocumentLibraryVersion::Restore ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Restore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentLibraryVersions wrapper method implementations
//

DocumentLibraryVersionPtr DocumentLibraryVersions::GetItem ( long lIndex ) {
    struct DocumentLibraryVersion * _result = 0;
    HRESULT _hr = get_Item(lIndex, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentLibraryVersionPtr(_result, false);
}

long DocumentLibraryVersions::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr DocumentLibraryVersions::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL DocumentLibraryVersions::GetIsVersioningEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVersioningEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr DocumentLibraryVersions::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface UserPermission wrapper method implementations
//

_bstr_t UserPermission::GetUserId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_UserId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long UserPermission::GetPermission ( ) {
    long _result = 0;
    HRESULT _hr = get_Permission(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void UserPermission::PutPermission ( long Permission ) {
    HRESULT _hr = put_Permission(Permission);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t UserPermission::GetExpirationDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpirationDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void UserPermission::PutExpirationDate ( const _variant_t & ExpirationDate ) {
    HRESULT _hr = put_ExpirationDate(ExpirationDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr UserPermission::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT UserPermission::Remove ( ) {
    HRESULT _hr = raw_Remove();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Permission wrapper method implementations
//

UserPermissionPtr Permission::GetItem ( const _variant_t & Index ) {
    struct UserPermission * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

long Permission::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL Permission::GetEnableTrustedBrowser ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_EnableTrustedBrowser(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Permission::PutEnableTrustedBrowser ( VARIANT_BOOL Enable ) {
    HRESULT _hr = put_EnableTrustedBrowser(Enable);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

UserPermissionPtr Permission::Add ( _bstr_t UserId, const _variant_t & Permission, const _variant_t & ExpirationDate ) {
    struct UserPermission * _result = 0;
    HRESULT _hr = raw_Add(UserId, Permission, ExpirationDate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return UserPermissionPtr(_result, false);
}

HRESULT Permission::ApplyPolicy ( _bstr_t FileName ) {
    HRESULT _hr = raw_ApplyPolicy(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr Permission::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT Permission::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL Permission::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Permission::PutEnabled ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_Enabled(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Permission::GetRequestPermissionURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_RequestPermissionURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Permission::PutRequestPermissionURL ( _bstr_t Contact ) {
    HRESULT _hr = put_RequestPermissionURL(Contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Permission::GetPolicyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PolicyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t Permission::GetPolicyDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PolicyDescription(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL Permission::GetStoreLicenses ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_StoreLicenses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Permission::PutStoreLicenses ( VARIANT_BOOL Enabled ) {
    HRESULT _hr = put_StoreLicenses(Enabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Permission::GetDocumentAuthor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Permission::PutDocumentAuthor ( _bstr_t Author ) {
    HRESULT _hr = put_DocumentAuthor(Author);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL Permission::GetPermissionFromPolicy ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PermissionFromPolicy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr Permission::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface MsoDebugOptions_UTRunResult wrapper method implementations
//

VARIANT_BOOL MsoDebugOptions_UTRunResult::GetPassed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Passed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t MsoDebugOptions_UTRunResult::GetErrorString ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ErrorString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface MsoDebugOptions_UT wrapper method implementations
//

_bstr_t MsoDebugOptions_UT::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t MsoDebugOptions_UT::GetCollectionName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CollectionName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

MsoDebugOptions_UTRunResultPtr MsoDebugOptions_UT::Run ( ) {
    struct MsoDebugOptions_UTRunResult * _result = 0;
    HRESULT _hr = raw_Run(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTRunResultPtr(_result, false);
}

//
// interface MsoDebugOptions_UTs wrapper method implementations
//

MsoDebugOptions_UTPtr MsoDebugOptions_UTs::GetItem ( int Index ) {
    struct MsoDebugOptions_UT * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTPtr(_result, false);
}

int MsoDebugOptions_UTs::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr MsoDebugOptions_UTs::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

MsoDebugOptions_UTsPtr MsoDebugOptions_UTs::GetUnitTestsInCollection ( _bstr_t bstrCollectionName ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = raw_GetUnitTestsInCollection(bstrCollectionName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

MsoDebugOptions_UTPtr MsoDebugOptions_UTs::GetUnitTest ( _bstr_t bstrCollectionName, _bstr_t bstrUnitTestName ) {
    struct MsoDebugOptions_UT * _result = 0;
    HRESULT _hr = raw_GetUnitTest(bstrCollectionName, bstrUnitTestName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTPtr(_result, false);
}

MsoDebugOptions_UTsPtr MsoDebugOptions_UTs::GetMatchingUnitTestsInCollection ( _bstr_t bstrCollectionName, _bstr_t bstrUnitTestNameFilter ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = raw_GetMatchingUnitTestsInCollection(bstrCollectionName, bstrUnitTestNameFilter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

//
// interface MsoDebugOptions_UTManager wrapper method implementations
//

MsoDebugOptions_UTsPtr MsoDebugOptions_UTManager::GetUnitTests ( ) {
    struct MsoDebugOptions_UTs * _result = 0;
    HRESULT _hr = get_UnitTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MsoDebugOptions_UTsPtr(_result, false);
}

HRESULT MsoDebugOptions_UTManager::NotifyStartOfTestSuiteRun ( ) {
    HRESULT _hr = raw_NotifyStartOfTestSuiteRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT MsoDebugOptions_UTManager::NotifyEndOfTestSuiteRun ( ) {
    HRESULT _hr = raw_NotifyEndOfTestSuiteRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL MsoDebugOptions_UTManager::GetReportErrors ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReportErrors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void MsoDebugOptions_UTManager::PutReportErrors ( VARIANT_BOOL pfReportErrors ) {
    HRESULT _hr = put_ReportErrors(pfReportErrors);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface MetaProperty wrapper method implementations
//

_variant_t MetaProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void MetaProperty::PutValue ( const _variant_t & pvarValue ) {
    HRESULT _hr = put_Value(pvarValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t MetaProperty::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t MetaProperty::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL MetaProperty::GetIsReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL MetaProperty::GetIsRequired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRequired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoMetaPropertyType MetaProperty::GetType ( ) {
    enum MsoMetaPropertyType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t MetaProperty::Validate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t MetaProperty::GetValidationError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr MetaProperty::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface MetaProperties wrapper method implementations
//

MetaPropertyPtr MetaProperties::GetItem ( const _variant_t & Index ) {
    struct MetaProperty * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MetaPropertyPtr(_result, false);
}

MetaPropertyPtr MetaProperties::GetItemByInternalName ( _bstr_t InternalName ) {
    struct MetaProperty * _result = 0;
    HRESULT _hr = raw_GetItemByInternalName(InternalName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return MetaPropertyPtr(_result, false);
}

long MetaProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t MetaProperties::Validate ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t MetaProperties::GetValidationError ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ValidationError(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr MetaProperties::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t MetaProperties::GetSchemaXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SchemaXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr MetaProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PolicyItem wrapper method implementations
//

_bstr_t PolicyItem::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t PolicyItem::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t PolicyItem::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t PolicyItem::GetData ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr PolicyItem::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ServerPolicy wrapper method implementations
//

PolicyItemPtr ServerPolicy::GetItem ( const _variant_t & Index ) {
    struct PolicyItem * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PolicyItemPtr(_result, false);
}

_bstr_t ServerPolicy::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ServerPolicy::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ServerPolicy::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ServerPolicy::GetStatement ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Statement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

long ServerPolicy::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL ServerPolicy::GetBlockPreview ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BlockPreview(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ServerPolicy::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentInspector wrapper method implementations
//

_bstr_t DocumentInspector::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t DocumentInspector::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT DocumentInspector::Inspect ( enum MsoDocInspectorStatus * Status, BSTR * Results ) {
    HRESULT _hr = raw_Inspect(Status, Results);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT DocumentInspector::Fix ( enum MsoDocInspectorStatus * Status, BSTR * Results ) {
    HRESULT _hr = raw_Fix(Status, Results);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr DocumentInspector::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface DocumentInspectors wrapper method implementations
//

IUnknownPtr DocumentInspectors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

DocumentInspectorPtr DocumentInspectors::GetItem ( int Index ) {
    struct DocumentInspector * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DocumentInspectorPtr(_result, false);
}

int DocumentInspectors::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr DocumentInspectors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface WorkflowTask wrapper method implementations
//

_bstr_t WorkflowTask::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetListID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ListID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetWorkflowID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_WorkflowID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetAssignedTo ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AssignedTo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTask::GetCreatedBy ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_CreatedBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

DATE WorkflowTask::GetDueDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_DueDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DATE WorkflowTask::GetCreatedDate ( ) {
    DATE _result = 0;
    HRESULT _hr = get_CreatedDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int WorkflowTask::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WorkflowTasks wrapper method implementations
//

WorkflowTaskPtr WorkflowTasks::GetItem ( long Index ) {
    struct WorkflowTask * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkflowTaskPtr(_result, false);
}

long WorkflowTasks::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr WorkflowTasks::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface WorkflowTemplate wrapper method implementations
//

_bstr_t WorkflowTemplate::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTemplate::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTemplate::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTemplate::GetDocumentLibraryName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentLibraryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t WorkflowTemplate::GetDocumentLibraryURL ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DocumentLibraryURL(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int WorkflowTemplate::Show ( ) {
    int _result = 0;
    HRESULT _hr = raw_Show(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface WorkflowTemplates wrapper method implementations
//

WorkflowTemplatePtr WorkflowTemplates::GetItem ( long Index ) {
    struct WorkflowTemplate * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return WorkflowTemplatePtr(_result, false);
}

long WorkflowTemplates::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr WorkflowTemplates::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDocumentInspector wrapper method implementations
//

HRESULT IDocumentInspector::GetInfo ( BSTR * Name, BSTR * Desc ) {
    HRESULT _hr = raw_GetInfo(Name, Desc);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IDocumentInspector::Inspect ( IDispatch * Doc, enum MsoDocInspectorStatus * Status, BSTR * Result, BSTR * Action ) {
    HRESULT _hr = raw_Inspect(Doc, Status, Result, Action);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IDocumentInspector::Fix ( IDispatch * Doc, long hwnd, enum MsoDocInspectorStatus * Status, BSTR * Result ) {
    HRESULT _hr = raw_Fix(Doc, hwnd, Status, Result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SignatureSetup wrapper method implementations
//

VARIANT_BOOL SignatureSetup::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t SignatureSetup::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SignatureSetup::GetSignatureProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SignatureSetup::GetSuggestedSigner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSigner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureSetup::PutSuggestedSigner ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSigner(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SignatureSetup::GetSuggestedSignerLine2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSignerLine2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureSetup::PutSuggestedSignerLine2 ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSignerLine2(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SignatureSetup::GetSuggestedSignerEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SuggestedSignerEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureSetup::PutSuggestedSignerEmail ( _bstr_t pbstr ) {
    HRESULT _hr = put_SuggestedSignerEmail(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SignatureSetup::GetSigningInstructions ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SigningInstructions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureSetup::PutSigningInstructions ( _bstr_t pbstr ) {
    HRESULT _hr = put_SigningInstructions(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL SignatureSetup::GetAllowComments ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AllowComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SignatureSetup::PutAllowComments ( VARIANT_BOOL pvarf ) {
    HRESULT _hr = put_AllowComments(pvarf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL SignatureSetup::GetShowSignDate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSignDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SignatureSetup::PutShowSignDate ( VARIANT_BOOL pvarf ) {
    HRESULT _hr = put_ShowSignDate(pvarf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SignatureSetup::GetAdditionalXml ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AdditionalXml(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureSetup::PutAdditionalXml ( _bstr_t pbstr ) {
    HRESULT _hr = put_AdditionalXml(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SignatureInfo wrapper method implementations
//

VARIANT_BOOL SignatureInfo::GetReadOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReadOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t SignatureInfo::GetSignatureProvider ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureProvider(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SignatureInfo::GetSignatureText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureInfo::PutSignatureText ( _bstr_t pbstr ) {
    HRESULT _hr = put_SignatureText(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * SignatureInfo::GetSignatureImage ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_SignatureImage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SignatureInfo::PutSignatureImage ( IPictureDisp * ppipictdisp ) {
    HRESULT _hr = put_SignatureImage(ppipictdisp);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t SignatureInfo::GetSignatureComment ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SignatureComment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void SignatureInfo::PutSignatureComment ( _bstr_t pbstr ) {
    HRESULT _hr = put_SignatureComment(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t SignatureInfo::GetSignatureDetail ( enum SignatureDetail sigdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetSignatureDetail(sigdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t SignatureInfo::GetCertificateDetail ( enum CertificateDetail certdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetCertificateDetail(certdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum ContentVerificationResults SignatureInfo::GetContentVerificationResults ( ) {
    enum ContentVerificationResults _result;
    HRESULT _hr = get_ContentVerificationResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum CertificateVerificationResults SignatureInfo::GetCertificateVerificationResults ( ) {
    enum CertificateVerificationResults _result;
    HRESULT _hr = get_CertificateVerificationResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL SignatureInfo::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL SignatureInfo::GetIsCertificateExpired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL SignatureInfo::GetIsCertificateRevoked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateRevoked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL SignatureInfo::GetIsCertificateUntrusted ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateUntrusted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT SignatureInfo::ShowSignatureCertificate ( IUnknown * ParentWindow ) {
    HRESULT _hr = raw_ShowSignatureCertificate(ParentWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureInfo::SelectSignatureCertificate ( IUnknown * ParentWindow ) {
    HRESULT _hr = raw_SelectSignatureCertificate(ParentWindow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureInfo::SelectCertificateDetailByThumbprint ( _bstr_t bstrThumbprint ) {
    HRESULT _hr = raw_SelectCertificateDetailByThumbprint(bstrThumbprint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Signature wrapper method implementations
//

_bstr_t Signature::GetSigner ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Signer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t Signature::GetIssuer ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Issuer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t Signature::GetExpireDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ExpireDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL Signature::GetIsValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsValid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL Signature::GetAttachCertificate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AttachCertificate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Signature::PutAttachCertificate ( VARIANT_BOOL pvarfAttach ) {
    HRESULT _hr = put_AttachCertificate(pvarfAttach);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT Signature::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr Signature::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL Signature::GetIsCertificateExpired ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateExpired(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL Signature::GetIsCertificateRevoked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsCertificateRevoked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t Signature::GetSignDate ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SignDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL Signature::GetIsSigned ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSigned(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Signature::Sign ( const _variant_t & varSigImg, const _variant_t & varDelSuggSigner, const _variant_t & varDelSuggSignerLine2, const _variant_t & varDelSuggSignerEmail ) {
    HRESULT _hr = raw_Sign(varSigImg, varDelSuggSigner, varDelSuggSignerLine2, varDelSuggSignerEmail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

SignatureInfoPtr Signature::GetDetails ( ) {
    struct SignatureInfo * _result = 0;
    HRESULT _hr = get_Details(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignatureInfoPtr(_result, false);
}

HRESULT Signature::ShowDetails ( ) {
    HRESULT _hr = raw_ShowDetails();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL Signature::GetCanSetup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanSetup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SignatureSetupPtr Signature::GetSetup ( ) {
    struct SignatureSetup * _result = 0;
    HRESULT _hr = get_Setup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignatureSetupPtr(_result, false);
}

VARIANT_BOOL Signature::GetIsSignatureLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSignatureLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr Signature::GetSignatureLineShape ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_SignatureLineShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Signature::GetSortHint ( ) {
    long _result = 0;
    HRESULT _hr = get_SortHint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SignatureSet wrapper method implementations
//

IUnknownPtr SignatureSet::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

int SignatureSet::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SignaturePtr SignatureSet::GetItem ( int iSig ) {
    struct Signature * _result = 0;
    HRESULT _hr = get_Item(iSig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

SignaturePtr SignatureSet::Add ( ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

HRESULT SignatureSet::Commit ( ) {
    HRESULT _hr = raw_Commit();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr SignatureSet::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

SignaturePtr SignatureSet::AddNonVisibleSignature ( const _variant_t & varSigProv ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_AddNonVisibleSignature(varSigProv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

VARIANT_BOOL SignatureSet::GetCanAddSignatureLine ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanAddSignatureLine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SignaturePtr SignatureSet::AddSignatureLine ( const _variant_t & varSigProv ) {
    struct Signature * _result = 0;
    HRESULT _hr = raw_AddSignatureLine(varSigProv, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SignaturePtr(_result, false);
}

enum MsoSignatureSubset SignatureSet::GetSubset ( ) {
    enum MsoSignatureSubset _result;
    HRESULT _hr = get_Subset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SignatureSet::PutSubset ( enum MsoSignatureSubset psubset ) {
    HRESULT _hr = put_Subset(psubset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void SignatureSet::PutShowSignaturesPane ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_ShowSignaturesPane(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SignatureProvider wrapper method implementations
//

IPictureDisp * SignatureProvider::GenerateSignatureLineImage ( enum SignatureLineImage siglnimg, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = raw_GenerateSignatureLineImage(siglnimg, psigsetup, psiginfo, XmlDsigStream, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT SignatureProvider::ShowSignatureSetup ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup ) {
    HRESULT _hr = raw_ShowSignatureSetup(ParentWindow, psigsetup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureProvider::ShowSigningCeremony ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo ) {
    HRESULT _hr = raw_ShowSigningCeremony(ParentWindow, psigsetup, psiginfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureProvider::SignXmlDsig ( IUnknown * QueryContinue, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream ) {
    HRESULT _hr = raw_SignXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureProvider::NotifySignatureAdded ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo ) {
    HRESULT _hr = raw_NotifySignatureAdded(ParentWindow, psigsetup, psiginfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureProvider::VerifyXmlDsig ( IUnknown * QueryContinue, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream, enum ContentVerificationResults * pcontverres, enum CertificateVerificationResults * pcertverres ) {
    HRESULT _hr = raw_VerifyXmlDsig(QueryContinue, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SignatureProvider::ShowSignatureDetails ( IUnknown * ParentWindow, struct SignatureSetup * psigsetup, struct SignatureInfo * psiginfo, IUnknown * XmlDsigStream, enum ContentVerificationResults * pcontverres, enum CertificateVerificationResults * pcertverres ) {
    HRESULT _hr = raw_ShowSignatureDetails(ParentWindow, psigsetup, psiginfo, XmlDsigStream, pcontverres, pcertverres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t SignatureProvider::GetProviderDetail ( enum SignatureProviderDetail sigprovdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProviderDetail(sigprovdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

SAFEARRAY * SignatureProvider::HashStream ( IUnknown * QueryContinue, IUnknown * Stream ) {
    SAFEARRAY * _result = 0;
    HRESULT _hr = raw_HashStream(QueryContinue, Stream, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CustomXMLPrefixMapping wrapper method implementations
//

IDispatchPtr CustomXMLPrefixMapping::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t CustomXMLPrefixMapping::GetPrefix ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Prefix(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t CustomXMLPrefixMapping::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface CustomXMLPrefixMappings wrapper method implementations
//

IDispatchPtr CustomXMLPrefixMappings::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long CustomXMLPrefixMappings::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CustomXMLPrefixMappingPtr CustomXMLPrefixMappings::GetItem ( const _variant_t & Index ) {
    struct CustomXMLPrefixMapping * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLPrefixMappingPtr(_result, false);
}

HRESULT CustomXMLPrefixMappings::AddNamespace ( _bstr_t Prefix, _bstr_t NamespaceURI ) {
    HRESULT _hr = raw_AddNamespace(Prefix, NamespaceURI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t CustomXMLPrefixMappings::LookupNamespace ( _bstr_t Prefix ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LookupNamespace(Prefix, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t CustomXMLPrefixMappings::LookupPrefix ( _bstr_t NamespaceURI ) {
    BSTR _result = 0;
    HRESULT _hr = raw_LookupPrefix(NamespaceURI, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IUnknownPtr CustomXMLPrefixMappings::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface CustomXMLSchema wrapper method implementations
//

IDispatchPtr CustomXMLSchema::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t CustomXMLSchema::GetLocation ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t CustomXMLSchema::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT CustomXMLSchema::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLSchema::Reload ( ) {
    HRESULT _hr = raw_Reload();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _CustomXMLSchemaCollection wrapper method implementations
//

IDispatchPtr _CustomXMLSchemaCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long _CustomXMLSchemaCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CustomXMLSchemaPtr _CustomXMLSchemaCollection::GetItem ( const _variant_t & Index ) {
    struct CustomXMLSchema * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLSchemaPtr(_result, false);
}

_bstr_t _CustomXMLSchemaCollection::GetNamespaceURI ( long Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

CustomXMLSchemaPtr _CustomXMLSchemaCollection::Add ( _bstr_t NamespaceURI, _bstr_t Alias, _bstr_t FileName, VARIANT_BOOL InstallForAllUsers ) {
    struct CustomXMLSchema * _result = 0;
    HRESULT _hr = raw_Add(NamespaceURI, Alias, FileName, InstallForAllUsers, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLSchemaPtr(_result, false);
}

HRESULT _CustomXMLSchemaCollection::AddCollection ( struct _CustomXMLSchemaCollection * SchemaCollection ) {
    HRESULT _hr = raw_AddCollection(SchemaCollection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _CustomXMLSchemaCollection::Validate ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Validate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr _CustomXMLSchemaCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// dispinterface _CustomXMLPartEvents wrapper method implementations
//

HRESULT _CustomXMLPartEvents::NodeAfterInsert ( struct CustomXMLNode * NewNode, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x000b", NewNode, InUndoRedo);
}

HRESULT _CustomXMLPartEvents::NodeAfterDelete ( struct CustomXMLNode * OldNode, struct CustomXMLNode * OldParentNode, struct CustomXMLNode * OldNextSibling, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x0009\x000b", OldNode, OldParentNode, OldNextSibling, InUndoRedo);
}

HRESULT _CustomXMLPartEvents::NodeAfterReplace ( struct CustomXMLNode * OldNode, struct CustomXMLNode * NewNode, VARIANT_BOOL InUndoRedo ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009\x000b", OldNode, NewNode, InUndoRedo);
}

//
// dispinterface _CustomXMLPartsEvents wrapper method implementations
//

HRESULT _CustomXMLPartsEvents::PartAfterAdd ( struct _CustomXMLPart * NewPart ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", NewPart);
}

HRESULT _CustomXMLPartsEvents::PartBeforeDelete ( struct _CustomXMLPart * OldPart ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", OldPart);
}

HRESULT _CustomXMLPartsEvents::PartAfterLoad ( struct _CustomXMLPart * Part ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Part);
}

//
// interface _CustomXMLParts wrapper method implementations
//

IDispatchPtr _CustomXMLParts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long _CustomXMLParts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_CustomXMLPartPtr _CustomXMLParts::GetItem ( const _variant_t & Index ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

_CustomXMLPartPtr _CustomXMLParts::Add ( _bstr_t XML, const _variant_t & SchemaCollection ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = raw_Add(XML, SchemaCollection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

_CustomXMLPartPtr _CustomXMLParts::SelectByID ( _bstr_t Id ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = raw_SelectByID(Id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

_CustomXMLPartsPtr _CustomXMLParts::SelectByNamespace ( _bstr_t NamespaceURI ) {
    struct _CustomXMLParts * _result = 0;
    HRESULT _hr = raw_SelectByNamespace(NamespaceURI, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartsPtr(_result, false);
}

IUnknownPtr _CustomXMLParts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface SoftEdgeFormat wrapper method implementations
//

enum MsoSoftEdgeType SoftEdgeFormat::GetType ( ) {
    enum MsoSoftEdgeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SoftEdgeFormat::PutType ( enum MsoSoftEdgeType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float SoftEdgeFormat::GetRadius ( ) {
    float _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SoftEdgeFormat::PutRadius ( float Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ReflectionFormat wrapper method implementations
//

enum MsoReflectionType ReflectionFormat::GetType ( ) {
    enum MsoReflectionType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ReflectionFormat::PutType ( enum MsoReflectionType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ReflectionFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ReflectionFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ReflectionFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ReflectionFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ReflectionFormat::GetOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ReflectionFormat::PutOffset ( float Offset ) {
    HRESULT _hr = put_Offset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ReflectionFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ReflectionFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ColorFormat wrapper method implementations
//

IDispatchPtr ColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

MsoRGBType ColorFormat::Get__RGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ColorFormat::Put__RGB ( MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int ColorFormat::GetSchemeColor ( ) {
    int _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ColorFormat::PutSchemeColor ( int SchemeColor ) {
    HRESULT _hr = put_SchemeColor(SchemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoColorType ColorFormat::GetType ( ) {
    enum MsoColorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float ColorFormat::GetTintAndShade ( ) {
    float _result = 0;
    HRESULT _hr = get_TintAndShade(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ColorFormat::PutTintAndShade ( float pValue ) {
    HRESULT _hr = put_TintAndShade(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoThemeColorIndex ColorFormat::GetObjectThemeColor ( ) {
    enum MsoThemeColorIndex _result;
    HRESULT _hr = get_ObjectThemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ColorFormat::PutObjectThemeColor ( enum MsoThemeColorIndex ObjectThemeColor ) {
    HRESULT _hr = put_ObjectThemeColor(ObjectThemeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ColorFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ColorFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LineFormat wrapper method implementations
//

IDispatchPtr LineFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

ColorFormatPtr LineFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

void LineFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadLength LineFormat::GetBeginArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_BeginArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutBeginArrowheadLength ( enum MsoArrowheadLength BeginArrowheadLength ) {
    HRESULT _hr = put_BeginArrowheadLength(BeginArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadStyle LineFormat::GetBeginArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_BeginArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutBeginArrowheadStyle ( enum MsoArrowheadStyle BeginArrowheadStyle ) {
    HRESULT _hr = put_BeginArrowheadStyle(BeginArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadWidth LineFormat::GetBeginArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_BeginArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutBeginArrowheadWidth ( enum MsoArrowheadWidth BeginArrowheadWidth ) {
    HRESULT _hr = put_BeginArrowheadWidth(BeginArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoLineDashStyle LineFormat::GetDashStyle ( ) {
    enum MsoLineDashStyle _result;
    HRESULT _hr = get_DashStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutDashStyle ( enum MsoLineDashStyle DashStyle ) {
    HRESULT _hr = put_DashStyle(DashStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadLength LineFormat::GetEndArrowheadLength ( ) {
    enum MsoArrowheadLength _result;
    HRESULT _hr = get_EndArrowheadLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutEndArrowheadLength ( enum MsoArrowheadLength EndArrowheadLength ) {
    HRESULT _hr = put_EndArrowheadLength(EndArrowheadLength);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadStyle LineFormat::GetEndArrowheadStyle ( ) {
    enum MsoArrowheadStyle _result;
    HRESULT _hr = get_EndArrowheadStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutEndArrowheadStyle ( enum MsoArrowheadStyle EndArrowheadStyle ) {
    HRESULT _hr = put_EndArrowheadStyle(EndArrowheadStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoArrowheadWidth LineFormat::GetEndArrowheadWidth ( ) {
    enum MsoArrowheadWidth _result;
    HRESULT _hr = get_EndArrowheadWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutEndArrowheadWidth ( enum MsoArrowheadWidth EndArrowheadWidth ) {
    HRESULT _hr = put_EndArrowheadWidth(EndArrowheadWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ColorFormatPtr LineFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

void LineFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPatternType LineFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutPattern ( enum MsoPatternType Pattern ) {
    HRESULT _hr = put_Pattern(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoLineStyle LineFormat::GetStyle ( ) {
    enum MsoLineStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutStyle ( enum MsoLineStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float LineFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState LineFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float LineFormat::GetWeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutWeight ( float Weight ) {
    HRESULT _hr = put_Weight(Weight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState LineFormat::GetInsetPen ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_InsetPen(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void LineFormat::PutInsetPen ( enum MsoTriState InsetPen ) {
    HRESULT _hr = put_InsetPen(InsetPen);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThreeDFormat wrapper method implementations
//

IDispatchPtr ThreeDFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ThreeDFormat::IncrementRotationX ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::IncrementRotationY ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::ResetRotation ( ) {
    HRESULT _hr = raw_ResetRotation();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::SetThreeDFormat ( enum MsoPresetThreeDFormat PresetThreeDFormat ) {
    HRESULT _hr = raw_SetThreeDFormat(PresetThreeDFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::SetExtrusionDirection ( enum MsoPresetExtrusionDirection PresetExtrusionDirection ) {
    HRESULT _hr = raw_SetExtrusionDirection(PresetExtrusionDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

float ThreeDFormat::GetDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutDepth ( float Depth ) {
    HRESULT _hr = put_Depth(Depth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ColorFormatPtr ThreeDFormat::GetExtrusionColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ExtrusionColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

enum MsoExtrusionColorType ThreeDFormat::GetExtrusionColorType ( ) {
    enum MsoExtrusionColorType _result;
    HRESULT _hr = get_ExtrusionColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutExtrusionColorType ( enum MsoExtrusionColorType ExtrusionColorType ) {
    HRESULT _hr = put_ExtrusionColorType(ExtrusionColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ThreeDFormat::GetPerspective ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutPerspective ( enum MsoTriState Perspective ) {
    HRESULT _hr = put_Perspective(Perspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetExtrusionDirection ThreeDFormat::GetPresetExtrusionDirection ( ) {
    enum MsoPresetExtrusionDirection _result;
    HRESULT _hr = get_PresetExtrusionDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoPresetLightingDirection ThreeDFormat::GetPresetLightingDirection ( ) {
    enum MsoPresetLightingDirection _result;
    HRESULT _hr = get_PresetLightingDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutPresetLightingDirection ( enum MsoPresetLightingDirection PresetLightingDirection ) {
    HRESULT _hr = put_PresetLightingDirection(PresetLightingDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetLightingSoftness ThreeDFormat::GetPresetLightingSoftness ( ) {
    enum MsoPresetLightingSoftness _result;
    HRESULT _hr = get_PresetLightingSoftness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutPresetLightingSoftness ( enum MsoPresetLightingSoftness PresetLightingSoftness ) {
    HRESULT _hr = put_PresetLightingSoftness(PresetLightingSoftness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetMaterial ThreeDFormat::GetPresetMaterial ( ) {
    enum MsoPresetMaterial _result;
    HRESULT _hr = get_PresetMaterial(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutPresetMaterial ( enum MsoPresetMaterial PresetMaterial ) {
    HRESULT _hr = put_PresetMaterial(PresetMaterial);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetThreeDFormat ThreeDFormat::GetPresetThreeDFormat ( ) {
    enum MsoPresetThreeDFormat _result;
    HRESULT _hr = get_PresetThreeDFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float ThreeDFormat::GetRotationX ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutRotationX ( float RotationX ) {
    HRESULT _hr = put_RotationX(RotationX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetRotationY ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutRotationY ( float RotationY ) {
    HRESULT _hr = put_RotationY(RotationY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ThreeDFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT ThreeDFormat::SetPresetCamera ( enum MsoPresetCamera PresetCamera ) {
    HRESULT _hr = raw_SetPresetCamera(PresetCamera);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::IncrementRotationZ ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationZ(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::IncrementRotationHorizontal ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationHorizontal(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThreeDFormat::IncrementRotationVertical ( float Increment ) {
    HRESULT _hr = raw_IncrementRotationVertical(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoLightRigType ThreeDFormat::GetPresetLighting ( ) {
    enum MsoLightRigType _result;
    HRESULT _hr = get_PresetLighting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutPresetLighting ( enum MsoLightRigType PresetLightRigType ) {
    HRESULT _hr = put_PresetLighting(PresetLightRigType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetZ ( ) {
    float _result = 0;
    HRESULT _hr = get_Z(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutZ ( float Z ) {
    HRESULT _hr = put_Z(Z);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBevelType ThreeDFormat::GetBevelTopType ( ) {
    enum MsoBevelType _result;
    HRESULT _hr = get_BevelTopType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelTopType ( enum MsoBevelType BevelTopType ) {
    HRESULT _hr = put_BevelTopType(BevelTopType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetBevelTopInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelTopInset ( float BevelTopInset ) {
    HRESULT _hr = put_BevelTopInset(BevelTopInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetBevelTopDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelTopDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelTopDepth ( float BevelTopDepth ) {
    HRESULT _hr = put_BevelTopDepth(BevelTopDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBevelType ThreeDFormat::GetBevelBottomType ( ) {
    enum MsoBevelType _result;
    HRESULT _hr = get_BevelBottomType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelBottomType ( enum MsoBevelType BevelBottomType ) {
    HRESULT _hr = put_BevelBottomType(BevelBottomType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetBevelBottomInset ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomInset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelBottomInset ( float BevelBottomInset ) {
    HRESULT _hr = put_BevelBottomInset(BevelBottomInset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetBevelBottomDepth ( ) {
    float _result = 0;
    HRESULT _hr = get_BevelBottomDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutBevelBottomDepth ( float BevelBottomDepth ) {
    HRESULT _hr = put_BevelBottomDepth(BevelBottomDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetCamera ThreeDFormat::GetPresetCamera ( ) {
    enum MsoPresetCamera _result;
    HRESULT _hr = get_PresetCamera(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float ThreeDFormat::GetRotationZ ( ) {
    float _result = 0;
    HRESULT _hr = get_RotationZ(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutRotationZ ( float RotationZ ) {
    HRESULT _hr = put_RotationZ(RotationZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetContourWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ContourWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutContourWidth ( float Width ) {
    HRESULT _hr = put_ContourWidth(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ColorFormatPtr ThreeDFormat::GetContourColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ContourColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

float ThreeDFormat::GetFieldOfView ( ) {
    float _result = 0;
    HRESULT _hr = get_FieldOfView(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutFieldOfView ( float FOV ) {
    HRESULT _hr = put_FieldOfView(FOV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ThreeDFormat::GetProjectText ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_ProjectText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutProjectText ( enum MsoTriState ProjectText ) {
    HRESULT _hr = put_ProjectText(ProjectText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ThreeDFormat::GetLightAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_LightAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThreeDFormat::PutLightAngle ( float LightAngle ) {
    HRESULT _hr = put_LightAngle(LightAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GradientStop wrapper method implementations
//

ColorFormatPtr GradientStop::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

float GradientStop::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void GradientStop::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float GradientStop::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void GradientStop::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface GradientStops wrapper method implementations
//

GradientStopPtr GradientStops::GetItem ( int Index ) {
    struct GradientStop * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GradientStopPtr(_result, false);
}

int GradientStops::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr GradientStops::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT GradientStops::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT GradientStops::Insert ( MsoRGBType __RGB, float Position, float Transparency, int Index ) {
    HRESULT _hr = raw_Insert(__RGB, Position, Transparency, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT GradientStops::Insert2 ( MsoRGBType __RGB, float Position, float Transparency, int Index, float Brightness ) {
    HRESULT _hr = raw_Insert2(__RGB, Position, Transparency, Index, Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface GlowFormat wrapper method implementations
//

float GlowFormat::GetRadius ( ) {
    float _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void GlowFormat::PutRadius ( float Radius ) {
    HRESULT _hr = put_Radius(Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ColorFormatPtr GlowFormat::GetColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

float GlowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void GlowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ThemeColor wrapper method implementations
//

MsoRGBType ThemeColor::Get__RGB ( ) {
    MsoRGBType _result;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ThemeColor::Put__RGB ( MsoRGBType __RGB ) {
    HRESULT _hr = put___RGB(__RGB);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr ThemeColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum MsoThemeColorSchemeIndex ThemeColor::GetThemeColorSchemeIndex ( ) {
    enum MsoThemeColorSchemeIndex _result;
    HRESULT _hr = get_ThemeColorSchemeIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ThemeColorScheme wrapper method implementations
//

IDispatchPtr ThemeColorScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int ThemeColorScheme::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ThemeColorPtr ThemeColorScheme::Colors ( enum MsoThemeColorSchemeIndex Index ) {
    struct ThemeColor * _result = 0;
    HRESULT _hr = raw_Colors(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeColorPtr(_result, false);
}

IUnknownPtr ThemeColorScheme::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT ThemeColorScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThemeColorScheme::Save ( _bstr_t FileName ) {
    HRESULT _hr = raw_Save(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

MsoRGBType ThemeColorScheme::GetCustomColor ( _bstr_t Name ) {
    MsoRGBType _result;
    HRESULT _hr = raw_GetCustomColor(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ThemeFont wrapper method implementations
//

_bstr_t ThemeFont::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ThemeFont::PutName ( _bstr_t Val ) {
    HRESULT _hr = put_Name(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr ThemeFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ThemeFonts wrapper method implementations
//

IDispatchPtr ThemeFonts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int ThemeFonts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ThemeFontPtr ThemeFonts::Item ( enum MsoFontLanguageIndex Index ) {
    struct ThemeFont * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontPtr(_result, false);
}

IUnknownPtr ThemeFonts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ThemeFontScheme wrapper method implementations
//

IDispatchPtr ThemeFontScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ThemeFontScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ThemeFontScheme::Save ( _bstr_t FileName ) {
    HRESULT _hr = raw_Save(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ThemeFontsPtr ThemeFontScheme::GetMinorFont ( ) {
    struct ThemeFonts * _result = 0;
    HRESULT _hr = get_MinorFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontsPtr(_result, false);
}

ThemeFontsPtr ThemeFontScheme::GetMajorFont ( ) {
    struct ThemeFonts * _result = 0;
    HRESULT _hr = get_MajorFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontsPtr(_result, false);
}

//
// interface ThemeEffectScheme wrapper method implementations
//

IDispatchPtr ThemeEffectScheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ThemeEffectScheme::Load ( _bstr_t FileName ) {
    HRESULT _hr = raw_Load(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface OfficeTheme wrapper method implementations
//

IDispatchPtr OfficeTheme::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

ThemeColorSchemePtr OfficeTheme::GetThemeColorScheme ( ) {
    struct ThemeColorScheme * _result = 0;
    HRESULT _hr = get_ThemeColorScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeColorSchemePtr(_result, false);
}

ThemeFontSchemePtr OfficeTheme::GetThemeFontScheme ( ) {
    struct ThemeFontScheme * _result = 0;
    HRESULT _hr = get_ThemeFontScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeFontSchemePtr(_result, false);
}

ThemeEffectSchemePtr OfficeTheme::GetThemeEffectScheme ( ) {
    struct ThemeEffectScheme * _result = 0;
    HRESULT _hr = get_ThemeEffectScheme(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThemeEffectSchemePtr(_result, false);
}

//
// interface _CustomTaskPane wrapper method implementations
//

_bstr_t _CustomTaskPane::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr _CustomTaskPane::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr _CustomTaskPane::GetWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL _CustomTaskPane::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CustomTaskPane::PutVisible ( VARIANT_BOOL prop ) {
    HRESULT _hr = put_Visible(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr _CustomTaskPane::GetContentControl ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ContentControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int _CustomTaskPane::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CustomTaskPane::PutHeight ( int prop ) {
    HRESULT _hr = put_Height(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _CustomTaskPane::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CustomTaskPane::PutWidth ( int prop ) {
    HRESULT _hr = put_Width(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoCTPDockPosition _CustomTaskPane::GetDockPosition ( ) {
    enum MsoCTPDockPosition _result;
    HRESULT _hr = get_DockPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CustomTaskPane::PutDockPosition ( enum MsoCTPDockPosition prop ) {
    HRESULT _hr = put_DockPosition(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoCTPDockPositionRestrict _CustomTaskPane::GetDockPositionRestrict ( ) {
    enum MsoCTPDockPositionRestrict _result;
    HRESULT _hr = get_DockPositionRestrict(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CustomTaskPane::PutDockPositionRestrict ( enum MsoCTPDockPositionRestrict prop ) {
    HRESULT _hr = put_DockPositionRestrict(prop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _CustomTaskPane::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface _CustomTaskPaneEvents wrapper method implementations
//

HRESULT _CustomTaskPaneEvents::VisibleStateChange ( struct _CustomTaskPane * CustomTaskPaneInst ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", CustomTaskPaneInst);
}

HRESULT _CustomTaskPaneEvents::DockPositionStateChange ( struct _CustomTaskPane * CustomTaskPaneInst ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", CustomTaskPaneInst);
}

//
// interface ICTPFactory wrapper method implementations
//

_CustomTaskPanePtr ICTPFactory::CreateCTP ( _bstr_t CTPAxID, _bstr_t CTPTitle, const _variant_t & CTPParentWindow ) {
    struct _CustomTaskPane * _result = 0;
    HRESULT _hr = raw_CreateCTP(CTPAxID, CTPTitle, CTPParentWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomTaskPanePtr(_result, false);
}

//
// interface ICustomTaskPaneConsumer wrapper method implementations
//

HRESULT ICustomTaskPaneConsumer::CTPFactoryAvailable ( struct ICTPFactory * CTPFactoryInst ) {
    HRESULT _hr = raw_CTPFactoryAvailable(CTPFactoryInst);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRibbonUI wrapper method implementations
//

HRESULT IRibbonUI::Invalidate ( ) {
    HRESULT _hr = raw_Invalidate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IRibbonUI::InvalidateControl ( _bstr_t ControlID ) {
    HRESULT _hr = raw_InvalidateControl(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IRibbonUI::InvalidateControlMso ( _bstr_t ControlID ) {
    HRESULT _hr = raw_InvalidateControlMso(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IRibbonUI::ActivateTab ( _bstr_t ControlID ) {
    HRESULT _hr = raw_ActivateTab(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IRibbonUI::ActivateTabMso ( _bstr_t ControlID ) {
    HRESULT _hr = raw_ActivateTabMso(ControlID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IRibbonUI::ActivateTabQ ( _bstr_t ControlID, _bstr_t Namespace ) {
    HRESULT _hr = raw_ActivateTabQ(ControlID, Namespace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IRibbonControl wrapper method implementations
//

_bstr_t IRibbonControl::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IRibbonControl::GetContext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IRibbonControl::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IRibbonExtensibility wrapper method implementations
//

_bstr_t IRibbonExtensibility::GetCustomUI ( _bstr_t RibbonID ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCustomUI(RibbonID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ShadowFormat wrapper method implementations
//

IDispatchPtr ShadowFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ShadowFormat::IncrementOffsetX ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetX(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShadowFormat::IncrementOffsetY ( float Increment ) {
    HRESULT _hr = raw_IncrementOffsetY(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ColorFormatPtr ShadowFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

void ShadowFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ShadowFormat::GetObscured ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Obscured(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutObscured ( enum MsoTriState Obscured ) {
    HRESULT _hr = put_Obscured(Obscured);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShadowFormat::GetOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutOffsetX ( float OffsetX ) {
    HRESULT _hr = put_OffsetX(OffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShadowFormat::GetOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_OffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutOffsetY ( float OffsetY ) {
    HRESULT _hr = put_OffsetY(OffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShadowFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoShadowType ShadowFormat::GetType ( ) {
    enum MsoShadowType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutType ( enum MsoShadowType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ShadowFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoShadowStyle ShadowFormat::GetStyle ( ) {
    enum MsoShadowStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutStyle ( enum MsoShadowStyle ShadowStyle ) {
    HRESULT _hr = put_Style(ShadowStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShadowFormat::GetBlur ( ) {
    float _result = 0;
    HRESULT _hr = get_Blur(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutBlur ( float Blur ) {
    HRESULT _hr = put_Blur(Blur);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShadowFormat::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ShadowFormat::GetRotateWithShape ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotateWithShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShadowFormat::PutRotateWithShape ( enum MsoTriState RotateWithShape ) {
    HRESULT _hr = put_RotateWithShape(RotateWithShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TextColumn2 wrapper method implementations
//

int TextColumn2::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextColumn2::PutNumber ( int Number ) {
    HRESULT _hr = put_Number(Number);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextColumn2::GetSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextColumn2::PutSpacing ( float Spacing ) {
    HRESULT _hr = put_Spacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextDirection TextColumn2::GetTextDirection ( ) {
    enum MsoTextDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextColumn2::PutTextDirection ( enum MsoTextDirection Direction ) {
    HRESULT _hr = put_TextDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IAssistance wrapper method implementations
//

HRESULT IAssistance::ShowHelp ( _bstr_t HelpId, _bstr_t Scope ) {
    HRESULT _hr = raw_ShowHelp(HelpId, Scope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAssistance::SearchHelp ( _bstr_t Query, _bstr_t Scope ) {
    HRESULT _hr = raw_SearchHelp(Query, Scope);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAssistance::SetDefaultContext ( _bstr_t HelpId ) {
    HRESULT _hr = raw_SetDefaultContext(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IAssistance::ClearDefaultContext ( _bstr_t HelpId ) {
    HRESULT _hr = raw_ClearDefaultContext(HelpId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoChartData wrapper method implementations
//

IDispatchPtr IMsoChartData::GetWorkbook ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Workbook(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IMsoChartData::Activate ( ) {
    HRESULT _hr = raw_Activate();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IMsoChartData::GetIsLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IMsoChartData::BreakLink ( ) {
    HRESULT _hr = raw_BreakLink();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChartData::ActivateChartDataWindow ( ) {
    HRESULT _hr = raw_ActivateChartDataWindow();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMsoCorners wrapper method implementations
//

IDispatchPtr IMsoCorners::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoCorners::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoCorners::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoCorners::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoCorners::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoBorder wrapper method implementations
//

void IMsoBorder::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoBorder::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoBorder::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoBorder::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoBorder::PutLineStyle ( const _variant_t & pval ) {
    HRESULT _hr = put_LineStyle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoBorder::GetLineStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoBorder::PutWeight ( const _variant_t & pval ) {
    HRESULT _hr = put_Weight(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoBorder::GetWeight ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Weight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoBorder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoBorder::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoBorder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoInterior wrapper method implementations
//

void IMsoInterior::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoInterior::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoInterior::PutInvertIfNegative ( const _variant_t & pval ) {
    HRESULT _hr = put_InvertIfNegative(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetInvertIfNegative ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoInterior::PutPattern ( const _variant_t & pval ) {
    HRESULT _hr = put_Pattern(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetPattern ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoInterior::PutPatternColor ( const _variant_t & pval ) {
    HRESULT _hr = put_PatternColor(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetPatternColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoInterior::PutPatternColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_PatternColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoInterior::GetPatternColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PatternColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoInterior::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoInterior::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoInterior::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartFont wrapper method implementations
//

void ChartFont::PutBackground ( const _variant_t & pval ) {
    HRESULT _hr = put_Background(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetBackground ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutBold ( const _variant_t & pval ) {
    HRESULT _hr = put_Bold(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetBold ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutColor ( const _variant_t & pval ) {
    HRESULT _hr = put_Color(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutColorIndex ( const _variant_t & pval ) {
    HRESULT _hr = put_ColorIndex(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetColorIndex ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutFontStyle ( const _variant_t & pval ) {
    HRESULT _hr = put_FontStyle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetFontStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FontStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutItalic ( const _variant_t & pval ) {
    HRESULT _hr = put_Italic(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetItalic ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutName ( const _variant_t & pval ) {
    HRESULT _hr = put_Name(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetName ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutOutlineFont ( const _variant_t & pval ) {
    HRESULT _hr = put_OutlineFont(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetOutlineFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_OutlineFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutShadow ( const _variant_t & pval ) {
    HRESULT _hr = put_Shadow(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetShadow ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutSize ( const _variant_t & pval ) {
    HRESULT _hr = put_Size(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetSize ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutStrikeThrough ( const _variant_t & pval ) {
    HRESULT _hr = put_StrikeThrough(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetStrikeThrough ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutSubscript ( const _variant_t & pval ) {
    HRESULT _hr = put_Subscript(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetSubscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutSuperscript ( const _variant_t & pval ) {
    HRESULT _hr = put_Superscript(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetSuperscript ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void ChartFont::PutUnderline ( const _variant_t & pval ) {
    HRESULT _hr = put_Underline(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartFont::GetUnderline ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Underline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr ChartFont::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartFont::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ChartFont::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartColorFormat wrapper method implementations
//

IDispatchPtr ChartColorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartColorFormat::GetSchemeColor ( ) {
    long _result = 0;
    HRESULT _hr = get_SchemeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartColorFormat::PutSchemeColor ( long RHS ) {
    HRESULT _hr = put_SchemeColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long ChartColorFormat::Get__RGB ( ) {
    long _result = 0;
    HRESULT _hr = get___RGB(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartColorFormat::Put__RGB ( long RHS ) {
    HRESULT _hr = put___RGB(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long ChartColorFormat::Get_Default ( ) {
    long _result = 0;
    HRESULT _hr = get__Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long ChartColorFormat::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ChartColorFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartColorFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ChartFillFormat wrapper method implementations
//

HRESULT ChartFillFormat::OneColorGradient ( int Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::TwoColorGradient ( int Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::PresetTextured ( int PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::Patterned ( int Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::UserPicture ( const _variant_t & PictureFile, const _variant_t & PictureFormat, const _variant_t & PictureStackUnit, const _variant_t & PicturePlacement ) {
    HRESULT _hr = raw_UserPicture(PictureFile, PictureFormat, PictureStackUnit, PicturePlacement);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ChartFillFormat::PresetGradient ( int Style, int Variant, int PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ChartColorFormatPtr ChartFillFormat::GetBackColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

ChartColorFormatPtr ChartFillFormat::GetForeColor ( ) {
    struct ChartColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartColorFormatPtr(_result, false);
}

int ChartFillFormat::GetGradientColorType ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float ChartFillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetGradientStyle ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetPattern ( ) {
    int _result = 0;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetPresetGradientType ( ) {
    int _result = 0;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetPresetTexture ( ) {
    int _result = 0;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t ChartFillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

int ChartFillFormat::GetTextureType ( ) {
    int _result = 0;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int ChartFillFormat::GetType ( ) {
    int _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartFillFormat::PutVisible ( int pval ) {
    HRESULT _hr = put_Visible(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int ChartFillFormat::GetVisible ( ) {
    int _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ChartFillFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartFillFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr ChartFillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoCharacters wrapper method implementations
//

IDispatchPtr IMsoCharacters::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoCharacters::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoCharacters::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoCharacters::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IMsoCharacters::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

ChartFontPtr IMsoCharacters::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

_variant_t IMsoCharacters::Insert ( _bstr_t bstr ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Insert(bstr, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_bstr_t IMsoCharacters::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoCharacters::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoCharacters::GetPhoneticCharacters ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneticCharacters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoCharacters::PutPhoneticCharacters ( _bstr_t RHS ) {
    HRESULT _hr = put_PhoneticCharacters(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoCharacters::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoCharacters::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface TabStop2 wrapper method implementations
//

IDispatchPtr TabStop2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT TabStop2::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

float TabStop2::GetPosition ( ) {
    float _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TabStop2::PutPosition ( float Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTabStopType TabStop2::GetType ( ) {
    enum MsoTabStopType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TabStop2::PutType ( enum MsoTabStopType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface TabStops2 wrapper method implementations
//

TabStop2Ptr TabStops2::Item ( const _variant_t & Index ) {
    struct TabStop2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStop2Ptr(_result, false);
}

IDispatchPtr TabStops2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

TabStop2Ptr TabStops2::Add ( enum MsoTabStopType Type, float Position ) {
    struct TabStop2 * _result = 0;
    HRESULT _hr = raw_Add(Type, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStop2Ptr(_result, false);
}

int TabStops2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float TabStops2::GetDefaultSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_DefaultSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TabStops2::PutDefaultSpacing ( float Spacing ) {
    HRESULT _hr = put_DefaultSpacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr TabStops2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface RulerLevel2 wrapper method implementations
//

IDispatchPtr RulerLevel2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

float RulerLevel2::GetFirstMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void RulerLevel2::PutFirstMargin ( float FirstMargin ) {
    HRESULT _hr = put_FirstMargin(FirstMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float RulerLevel2::GetLeftMargin ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void RulerLevel2::PutLeftMargin ( float LeftMargin ) {
    HRESULT _hr = put_LeftMargin(LeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface RulerLevels2 wrapper method implementations
//

IDispatchPtr RulerLevels2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int RulerLevels2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

RulerLevel2Ptr RulerLevels2::Item ( const _variant_t & Index ) {
    struct RulerLevel2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevel2Ptr(_result, false);
}

IUnknownPtr RulerLevels2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface Ruler2 wrapper method implementations
//

IDispatchPtr Ruler2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

RulerLevels2Ptr Ruler2::GetLevels ( ) {
    struct RulerLevels2 * _result = 0;
    HRESULT _hr = get_Levels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return RulerLevels2Ptr(_result, false);
}

TabStops2Ptr Ruler2::GetTabStops ( ) {
    struct TabStops2 * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStops2Ptr(_result, false);
}

//
// interface EncryptionProvider wrapper method implementations
//

_variant_t EncryptionProvider::GetProviderDetail ( enum EncryptionProviderDetail encprovdet ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetProviderDetail(encprovdet, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

int EncryptionProvider::NewSession ( IUnknown * ParentWindow ) {
    int _result = 0;
    HRESULT _hr = raw_NewSession(ParentWindow, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int EncryptionProvider::Authenticate ( IUnknown * ParentWindow, IUnknown * EncryptionData, unsigned int * PermissionsMask ) {
    int _result = 0;
    HRESULT _hr = raw_Authenticate(ParentWindow, EncryptionData, PermissionsMask, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int EncryptionProvider::CloneSession ( int SessionHandle ) {
    int _result = 0;
    HRESULT _hr = raw_CloneSession(SessionHandle, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT EncryptionProvider::EndSession ( int SessionHandle ) {
    HRESULT _hr = raw_EndSession(SessionHandle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int EncryptionProvider::Save ( int SessionHandle, IUnknown * EncryptionData ) {
    int _result = 0;
    HRESULT _hr = raw_Save(SessionHandle, EncryptionData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT EncryptionProvider::EncryptStream ( int SessionHandle, _bstr_t StreamName, IUnknown * UnencryptedStream, IUnknown * EncryptedStream ) {
    HRESULT _hr = raw_EncryptStream(SessionHandle, StreamName, UnencryptedStream, EncryptedStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT EncryptionProvider::DecryptStream ( int SessionHandle, _bstr_t StreamName, IUnknown * EncryptedStream, IUnknown * UnencryptedStream ) {
    HRESULT _hr = raw_DecryptStream(SessionHandle, StreamName, EncryptedStream, UnencryptedStream);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT EncryptionProvider::ShowSettings ( int SessionHandle, IUnknown * ParentWindow, VARIANT_BOOL ReadOnly, VARIANT_BOOL * Remove ) {
    HRESULT _hr = raw_ShowSettings(SessionHandle, ParentWindow, ReadOnly, Remove);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBlogExtensibility wrapper method implementations
//

HRESULT IBlogExtensibility::BlogProviderProperties ( BSTR * BlogProvider, BSTR * FriendlyName, enum MsoBlogCategorySupport * CategorySupport, VARIANT_BOOL * Padding ) {
    HRESULT _hr = raw_BlogProviderProperties(BlogProvider, FriendlyName, CategorySupport, Padding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::SetupBlogAccount ( _bstr_t Account, long ParentWindow, IDispatch * Document, VARIANT_BOOL NewAccount, VARIANT_BOOL * ShowPictureUI ) {
    HRESULT _hr = raw_SetupBlogAccount(Account, ParentWindow, Document, NewAccount, ShowPictureUI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::GetUserBlogs ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * BlogNames, SAFEARRAY * * BlogIDs, SAFEARRAY * * BlogURLs ) {
    HRESULT _hr = raw_GetUserBlogs(Account, ParentWindow, Document, BlogNames, BlogIDs, BlogURLs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::GetRecentPosts ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * PostTitles, SAFEARRAY * * PostDates, SAFEARRAY * * PostIDs ) {
    HRESULT _hr = raw_GetRecentPosts(Account, ParentWindow, Document, PostTitles, PostDates, PostIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::Open ( _bstr_t Account, _bstr_t PostID, long ParentWindow, BSTR * xHTML, BSTR * Title, BSTR * DatePosted, SAFEARRAY * * Categories ) {
    HRESULT _hr = raw_Open(Account, PostID, ParentWindow, xHTML, Title, DatePosted, Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::PublishPost ( _bstr_t Account, long ParentWindow, IDispatch * Document, _bstr_t xHTML, _bstr_t Title, _bstr_t DateTime, SAFEARRAY * Categories, VARIANT_BOOL Draft, BSTR * PostID, BSTR * PublishMessage ) {
    HRESULT _hr = raw_PublishPost(Account, ParentWindow, Document, xHTML, Title, DateTime, Categories, Draft, PostID, PublishMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::RepublishPost ( _bstr_t Account, long ParentWindow, IDispatch * Document, _bstr_t PostID, _bstr_t xHTML, _bstr_t Title, _bstr_t DateTime, SAFEARRAY * Categories, VARIANT_BOOL Draft, BSTR * PublishMessage ) {
    HRESULT _hr = raw_RepublishPost(Account, ParentWindow, Document, PostID, xHTML, Title, DateTime, Categories, Draft, PublishMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogExtensibility::GetCategories ( _bstr_t Account, long ParentWindow, IDispatch * Document, SAFEARRAY * * Categories ) {
    HRESULT _hr = raw_GetCategories(Account, ParentWindow, Document, Categories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IBlogPictureExtensibility wrapper method implementations
//

HRESULT IBlogPictureExtensibility::BlogPictureProviderProperties ( BSTR * BlogPictureProvider, BSTR * FriendlyName ) {
    HRESULT _hr = raw_BlogPictureProviderProperties(BlogPictureProvider, FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogPictureExtensibility::CreatePictureAccount ( _bstr_t Account, _bstr_t BlogProvider, long ParentWindow, IDispatch * Document ) {
    HRESULT _hr = raw_CreatePictureAccount(Account, BlogProvider, ParentWindow, Document);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IBlogPictureExtensibility::PublishPicture ( _bstr_t Account, long ParentWindow, IDispatch * Document, IUnknown * Image, BSTR * PictureURI, long ImageType ) {
    HRESULT _hr = raw_PublishPicture(Account, ParentWindow, Document, Image, PictureURI, ImageType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterPreferences wrapper method implementations
//

HRESULT IConverterPreferences::HrGetMacroEnabled ( int * pfMacroEnabled ) {
    HRESULT _hr = raw_HrGetMacroEnabled(pfMacroEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterPreferences::HrCheckFormat ( int * pFormat ) {
    HRESULT _hr = raw_HrCheckFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterPreferences::HrGetLossySave ( int * pfLossySave ) {
    HRESULT _hr = raw_HrGetLossySave(pfLossySave);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterApplicationPreferences wrapper method implementations
//

HRESULT IConverterApplicationPreferences::HrGetLcid ( unsigned long * plcid ) {
    HRESULT _hr = raw_HrGetLcid(plcid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterApplicationPreferences::HrGetHwnd ( long * phwnd ) {
    HRESULT _hr = raw_HrGetHwnd(phwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterApplicationPreferences::HrGetApplication ( BSTR * pbstrApplication ) {
    HRESULT _hr = raw_HrGetApplication(pbstrApplication);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterApplicationPreferences::HrCheckFormat ( int * pFormat ) {
    HRESULT _hr = raw_HrCheckFormat(pFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverterUICallback wrapper method implementations
//

HRESULT IConverterUICallback::HrReportProgress ( unsigned int uPercentComplete ) {
    HRESULT _hr = raw_HrReportProgress(uPercentComplete);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterUICallback::HrMessageBox ( _bstr_t bstrText, _bstr_t bstrCaption, unsigned int uType, int * pidResult ) {
    HRESULT _hr = raw_HrMessageBox(bstrText, bstrCaption, uType, pidResult);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverterUICallback::HrInputBox ( _bstr_t bstrText, _bstr_t bstrCaption, BSTR * pbstrInput, int fPassword ) {
    HRESULT _hr = raw_HrInputBox(bstrText, bstrCaption, pbstrInput, fPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConverter wrapper method implementations
//

HRESULT IConverter::HrInitConverter ( struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrInitConverter(pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverter::HrUninitConverter ( struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrUninitConverter(pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverter::HrImport ( _bstr_t bstrSourcePath, _bstr_t bstrDestPath, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrImport(bstrSourcePath, bstrDestPath, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverter::HrExport ( _bstr_t bstrSourcePath, _bstr_t bstrDestPath, _bstr_t bstrClass, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrExport(bstrSourcePath, bstrDestPath, bstrClass, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverter::HrGetFormat ( _bstr_t bstrPath, BSTR * pbstrClass, struct IConverterApplicationPreferences * pcap, struct IConverterPreferences * * ppcp, struct IConverterUICallback * pcuic ) {
    HRESULT _hr = raw_HrGetFormat(bstrPath, pbstrClass, pcap, ppcp, pcuic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IConverter::HrGetErrorString ( long hrErr, BSTR * pbstrErrorMsg, struct IConverterApplicationPreferences * pcap ) {
    HRESULT _hr = raw_HrGetErrorString(hrErr, pbstrErrorMsg, pcap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SmartArtLayout wrapper method implementations
//

IDispatchPtr SmartArtLayout::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t SmartArtLayout::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtLayout::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtLayout::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtLayout::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtLayouts wrapper method implementations
//

IUnknownPtr SmartArtLayouts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SmartArtLayoutPtr SmartArtLayouts::Item ( const _variant_t & Index ) {
    struct SmartArtLayout * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtLayoutPtr(_result, false);
}

IDispatchPtr SmartArtLayouts::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int SmartArtLayouts::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArtQuickStyle wrapper method implementations
//

IDispatchPtr SmartArtQuickStyle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t SmartArtQuickStyle::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtQuickStyle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtQuickStyle::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtQuickStyle::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtQuickStyles wrapper method implementations
//

IUnknownPtr SmartArtQuickStyles::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SmartArtQuickStylePtr SmartArtQuickStyles::Item ( const _variant_t & Index ) {
    struct SmartArtQuickStyle * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtQuickStylePtr(_result, false);
}

IDispatchPtr SmartArtQuickStyles::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int SmartArtQuickStyles::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArtColor wrapper method implementations
//

IDispatchPtr SmartArtColor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t SmartArtColor::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtColor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtColor::GetDescription ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t SmartArtColor::GetCategory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Category(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface SmartArtColors wrapper method implementations
//

IUnknownPtr SmartArtColors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SmartArtColorPtr SmartArtColors::Item ( const _variant_t & Index ) {
    struct SmartArtColor * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtColorPtr(_result, false);
}

IDispatchPtr SmartArtColors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int SmartArtColors::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerField wrapper method implementations
//

_bstr_t PickerField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoPickerField PickerField::GetType ( ) {
    enum MsoPickerField _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL PickerField::GetIsHidden ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsHidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerFields wrapper method implementations
//

PickerFieldPtr PickerFields::GetItem ( int Index ) {
    struct PickerField * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerFieldPtr(_result, false);
}

long PickerFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr PickerFields::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerProperty wrapper method implementations
//

_bstr_t PickerProperty::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t PickerProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoPickerField PickerProperty::GetType ( ) {
    enum MsoPickerField _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PickerProperties wrapper method implementations
//

PickerPropertyPtr PickerProperties::GetItem ( int Index ) {
    struct PickerProperty * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertyPtr(_result, false);
}

long PickerProperties::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

PickerPropertyPtr PickerProperties::Add ( _bstr_t Id, _bstr_t Value, enum MsoPickerField Type ) {
    struct PickerProperty * _result = 0;
    HRESULT _hr = raw_Add(Id, Value, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertyPtr(_result, false);
}

HRESULT PickerProperties::Remove ( _bstr_t Id ) {
    HRESULT _hr = raw_Remove(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr PickerProperties::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerResult wrapper method implementations
//

_bstr_t PickerResult::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t PickerResult::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void PickerResult::PutDisplayName ( _bstr_t DisplayName ) {
    HRESULT _hr = put_DisplayName(DisplayName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t PickerResult::GetType ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void PickerResult::PutType ( _bstr_t Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t PickerResult::GetSIPId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SIPId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void PickerResult::PutSIPId ( _bstr_t SIPId ) {
    HRESULT _hr = put_SIPId(SIPId);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t PickerResult::GetItemData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ItemData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void PickerResult::PutItemData ( const _variant_t & ItemData ) {
    HRESULT _hr = put_ItemData(ItemData);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t PickerResult::GetSubItems ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SubItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void PickerResult::PutSubItems ( const _variant_t & SubItems ) {
    HRESULT _hr = put_SubItems(SubItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t PickerResult::GetDuplicateResults ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DuplicateResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

PickerFieldsPtr PickerResult::GetFields ( ) {
    struct PickerFields * _result = 0;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerFieldsPtr(_result, false);
}

void PickerResult::PutFields ( struct PickerFields * Fields ) {
    HRESULT _hr = put_Fields(Fields);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PickerResults wrapper method implementations
//

PickerResultPtr PickerResults::GetItem ( int Index ) {
    struct PickerResult * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultPtr(_result, false);
}

long PickerResults::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

PickerResultPtr PickerResults::Add ( _bstr_t Id, _bstr_t DisplayName, _bstr_t Type, _bstr_t SIPId, const _variant_t & ItemData, const _variant_t & SubItems ) {
    struct PickerResult * _result = 0;
    HRESULT _hr = raw_Add(Id, DisplayName, Type, SIPId, ItemData, SubItems, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultPtr(_result, false);
}

IUnknownPtr PickerResults::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PickerDialog wrapper method implementations
//

_bstr_t PickerDialog::GetDataHandlerId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DataHandlerId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void PickerDialog::PutDataHandlerId ( _bstr_t Id ) {
    HRESULT _hr = put_DataHandlerId(Id);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t PickerDialog::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void PickerDialog::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

PickerPropertiesPtr PickerDialog::GetProperties ( ) {
    struct PickerProperties * _result = 0;
    HRESULT _hr = get_Properties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerPropertiesPtr(_result, false);
}

PickerResultsPtr PickerDialog::CreatePickerResults ( ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_CreatePickerResults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

PickerResultsPtr PickerDialog::Show ( VARIANT_BOOL IsMultiSelect, struct PickerResults * ExistingResults ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_Show(IsMultiSelect, ExistingResults, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

PickerResultsPtr PickerDialog::Resolve ( _bstr_t TokenText, int duplicateDlgMode ) {
    struct PickerResults * _result = 0;
    HRESULT _hr = raw_Resolve(TokenText, duplicateDlgMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PickerResultsPtr(_result, false);
}

//
// interface IMsoContactCard wrapper method implementations
//

_bstr_t IMsoContactCard::GetAddress ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Address(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoContactCardAddressType IMsoContactCard::GetAddressType ( ) {
    enum MsoContactCardAddressType _result;
    HRESULT _hr = get_AddressType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoContactCardType IMsoContactCard::GetCardType ( ) {
    enum MsoContactCardType _result;
    HRESULT _hr = get_CardType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoContactCard::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface EffectParameter wrapper method implementations
//

_bstr_t EffectParameter::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t EffectParameter::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void EffectParameter::PutValue ( const _variant_t & Value ) {
    HRESULT _hr = put_Value(Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface EffectParameters wrapper method implementations
//

EffectParameterPtr EffectParameters::GetItem ( const _variant_t & Index ) {
    struct EffectParameter * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParameterPtr(_result, false);
}

int EffectParameters::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr EffectParameters::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface PictureEffect wrapper method implementations
//

enum MsoPictureEffectType PictureEffect::GetType ( ) {
    enum MsoPictureEffectType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureEffect::PutPosition ( int Position ) {
    HRESULT _hr = put_Position(Position);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int PictureEffect::GetPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT PictureEffect::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

EffectParametersPtr PictureEffect::GetEffectParameters ( ) {
    struct EffectParameters * _result = 0;
    HRESULT _hr = get_EffectParameters(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return EffectParametersPtr(_result, false);
}

void PictureEffect::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState PictureEffect::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface PictureEffects wrapper method implementations
//

PictureEffectPtr PictureEffects::GetItem ( int Index ) {
    struct PictureEffect * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectPtr(_result, false);
}

int PictureEffects::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr PictureEffects::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

PictureEffectPtr PictureEffects::Insert ( enum MsoPictureEffectType EffectType, int Position ) {
    struct PictureEffect * _result = 0;
    HRESULT _hr = raw_Insert(EffectType, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectPtr(_result, false);
}

HRESULT PictureEffects::Delete ( int Index ) {
    HRESULT _hr = raw_Delete(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FillFormat wrapper method implementations
//

IDispatchPtr FillFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT FillFormat::Background ( ) {
    HRESULT _hr = raw_Background();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::OneColorGradient ( enum MsoGradientStyle Style, int Variant, float Degree ) {
    HRESULT _hr = raw_OneColorGradient(Style, Variant, Degree);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::Patterned ( enum MsoPatternType Pattern ) {
    HRESULT _hr = raw_Patterned(Pattern);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::PresetGradient ( enum MsoGradientStyle Style, int Variant, enum MsoPresetGradientType PresetGradientType ) {
    HRESULT _hr = raw_PresetGradient(Style, Variant, PresetGradientType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::PresetTextured ( enum MsoPresetTexture PresetTexture ) {
    HRESULT _hr = raw_PresetTextured(PresetTexture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::Solid ( ) {
    HRESULT _hr = raw_Solid();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::TwoColorGradient ( enum MsoGradientStyle Style, int Variant ) {
    HRESULT _hr = raw_TwoColorGradient(Style, Variant);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::UserPicture ( _bstr_t PictureFile ) {
    HRESULT _hr = raw_UserPicture(PictureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT FillFormat::UserTextured ( _bstr_t TextureFile ) {
    HRESULT _hr = raw_UserTextured(TextureFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ColorFormatPtr FillFormat::GetBackColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

void FillFormat::PutBackColor ( struct ColorFormat * BackColor ) {
    HRESULT _hr = put_BackColor(BackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ColorFormatPtr FillFormat::GetForeColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_ForeColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

void FillFormat::PutForeColor ( struct ColorFormat * ForeColor ) {
    HRESULT _hr = put_ForeColor(ForeColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoGradientColorType FillFormat::GetGradientColorType ( ) {
    enum MsoGradientColorType _result;
    HRESULT _hr = get_GradientColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float FillFormat::GetGradientDegree ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientDegree(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoGradientStyle FillFormat::GetGradientStyle ( ) {
    enum MsoGradientStyle _result;
    HRESULT _hr = get_GradientStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int FillFormat::GetGradientVariant ( ) {
    int _result = 0;
    HRESULT _hr = get_GradientVariant(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoPatternType FillFormat::GetPattern ( ) {
    enum MsoPatternType _result;
    HRESULT _hr = get_Pattern(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoPresetGradientType FillFormat::GetPresetGradientType ( ) {
    enum MsoPresetGradientType _result;
    HRESULT _hr = get_PresetGradientType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoPresetTexture FillFormat::GetPresetTexture ( ) {
    enum MsoPresetTexture _result;
    HRESULT _hr = get_PresetTexture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t FillFormat::GetTextureName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextureName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoTextureType FillFormat::GetTextureType ( ) {
    enum MsoTextureType _result;
    HRESULT _hr = get_TextureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float FillFormat::GetTransparency ( ) {
    float _result = 0;
    HRESULT _hr = get_Transparency(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTransparency ( float Transparency ) {
    HRESULT _hr = put_Transparency(Transparency);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoFillType FillFormat::GetType ( ) {
    enum MsoFillType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState FillFormat::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

GradientStopsPtr FillFormat::GetGradientStops ( ) {
    struct GradientStops * _result = 0;
    HRESULT _hr = get_GradientStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GradientStopsPtr(_result, false);
}

float FillFormat::GetTextureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureOffsetX ( float TextureOffsetX ) {
    HRESULT _hr = put_TextureOffsetX(TextureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float FillFormat::GetTextureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureOffsetY ( float TextureOffsetY ) {
    HRESULT _hr = put_TextureOffsetY(TextureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextureAlignment FillFormat::GetTextureAlignment ( ) {
    enum MsoTextureAlignment _result;
    HRESULT _hr = get_TextureAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureAlignment ( enum MsoTextureAlignment TextureAlignment ) {
    HRESULT _hr = put_TextureAlignment(TextureAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float FillFormat::GetTextureHorizontalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureHorizontalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureHorizontalScale ( float HorizontalScale ) {
    HRESULT _hr = put_TextureHorizontalScale(HorizontalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float FillFormat::GetTextureVerticalScale ( ) {
    float _result = 0;
    HRESULT _hr = get_TextureVerticalScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureVerticalScale ( float VerticalScale ) {
    HRESULT _hr = put_TextureVerticalScale(VerticalScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState FillFormat::GetTextureTile ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TextureTile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutTextureTile ( enum MsoTriState TextureTile ) {
    HRESULT _hr = put_TextureTile(TextureTile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState FillFormat::GetRotateWithObject ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_RotateWithObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutRotateWithObject ( enum MsoTriState RotateWithObject ) {
    HRESULT _hr = put_RotateWithObject(RotateWithObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

PictureEffectsPtr FillFormat::GetPictureEffects ( ) {
    struct PictureEffects * _result = 0;
    HRESULT _hr = get_PictureEffects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureEffectsPtr(_result, false);
}

float FillFormat::GetGradientAngle ( ) {
    float _result = 0;
    HRESULT _hr = get_GradientAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FillFormat::PutGradientAngle ( float GradientAngle ) {
    HRESULT _hr = put_GradientAngle(GradientAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Font2 wrapper method implementations
//

IDispatchPtr Font2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum MsoTriState Font2::GetBold ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Bold(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutBold ( enum MsoTriState Bold ) {
    HRESULT _hr = put_Bold(Bold);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetItalic ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Italic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutItalic ( enum MsoTriState Italic ) {
    HRESULT _hr = put_Italic(Italic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextStrike Font2::GetStrike ( ) {
    enum MsoTextStrike _result;
    HRESULT _hr = get_Strike(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutStrike ( enum MsoTextStrike Strike ) {
    HRESULT _hr = put_Strike(Strike);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextCaps Font2::GetCaps ( ) {
    enum MsoTextCaps _result;
    HRESULT _hr = get_Caps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutCaps ( enum MsoTextCaps Caps ) {
    HRESULT _hr = put_Caps(Caps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetAutorotateNumbers ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutorotateNumbers(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutAutorotateNumbers ( enum MsoTriState RotateNumbers ) {
    HRESULT _hr = put_AutorotateNumbers(RotateNumbers);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Font2::GetBaselineOffset ( ) {
    float _result = 0;
    HRESULT _hr = get_BaselineOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutBaselineOffset ( float Offset ) {
    HRESULT _hr = put_BaselineOffset(Offset);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Font2::GetKerning ( ) {
    float _result = 0;
    HRESULT _hr = get_Kerning(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutKerning ( float KerningSize ) {
    HRESULT _hr = put_Kerning(KerningSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Font2::GetSize ( ) {
    float _result = 0;
    HRESULT _hr = get_Size(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSize ( float Size ) {
    HRESULT _hr = put_Size(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Font2::GetSpacing ( ) {
    float _result = 0;
    HRESULT _hr = get_Spacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSpacing ( float Spacing ) {
    HRESULT _hr = put_Spacing(Spacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextUnderlineType Font2::GetUnderlineStyle ( ) {
    enum MsoTextUnderlineType _result;
    HRESULT _hr = get_UnderlineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutUnderlineStyle ( enum MsoTextUnderlineType Style ) {
    HRESULT _hr = put_UnderlineStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetAllcaps ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Allcaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutAllcaps ( enum MsoTriState Allcaps ) {
    HRESULT _hr = put_Allcaps(Allcaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetDoubleStrikeThrough ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_DoubleStrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutDoubleStrikeThrough ( enum MsoTriState DoubleStrikeThrough ) {
    HRESULT _hr = put_DoubleStrikeThrough(DoubleStrikeThrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetEqualize ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Equalize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutEqualize ( enum MsoTriState Equalize ) {
    HRESULT _hr = put_Equalize(Equalize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

FillFormatPtr Font2::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

GlowFormatPtr Font2::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

ReflectionFormatPtr Font2::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

LineFormatPtr Font2::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

ShadowFormatPtr Font2::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

ColorFormatPtr Font2::GetHighlight ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_Highlight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

ColorFormatPtr Font2::GetUnderlineColor ( ) {
    struct ColorFormat * _result = 0;
    HRESULT _hr = get_UnderlineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ColorFormatPtr(_result, false);
}

enum MsoTriState Font2::GetSmallcaps ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Smallcaps(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSmallcaps ( enum MsoTriState Smallcaps ) {
    HRESULT _hr = put_Smallcaps(Smallcaps);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoSoftEdgeType Font2::GetSoftEdgeFormat ( ) {
    enum MsoSoftEdgeType _result;
    HRESULT _hr = get_SoftEdgeFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSoftEdgeFormat ( enum MsoSoftEdgeType SoftEdgeFormat ) {
    HRESULT _hr = put_SoftEdgeFormat(SoftEdgeFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetStrikeThrough ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_StrikeThrough(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutStrikeThrough ( enum MsoTriState StrikeThrough ) {
    HRESULT _hr = put_StrikeThrough(StrikeThrough);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetSubscript ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Subscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSubscript ( enum MsoTriState Subscript ) {
    HRESULT _hr = put_Subscript(Subscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetSuperscript ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Superscript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutSuperscript ( enum MsoTriState Superscript ) {
    HRESULT _hr = put_Superscript(Superscript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetTextEffect Font2::GetWordArtformat ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtformat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Font2::PutWordArtformat ( enum MsoPresetTextEffect WordArtformat ) {
    HRESULT _hr = put_WordArtformat(WordArtformat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Font2::GetEmbeddable ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Embeddable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState Font2::GetEmbedded ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Embedded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t Font2::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Font2::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Font2::GetNameAscii ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameAscii(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Font2::PutNameAscii ( _bstr_t NameAscii ) {
    HRESULT _hr = put_NameAscii(NameAscii);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Font2::GetNameComplexScript ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameComplexScript(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Font2::PutNameComplexScript ( _bstr_t NameComplexScript ) {
    HRESULT _hr = put_NameComplexScript(NameComplexScript);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Font2::GetNameFarEast ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameFarEast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Font2::PutNameFarEast ( _bstr_t NameFarEast ) {
    HRESULT _hr = put_NameFarEast(NameFarEast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Font2::GetNameOther ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameOther(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Font2::PutNameOther ( _bstr_t NameOther ) {
    HRESULT _hr = put_NameOther(NameOther);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface BulletFormat2 wrapper method implementations
//

IDispatchPtr BulletFormat2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int BulletFormat2::GetCharacter ( ) {
    int _result = 0;
    HRESULT _hr = get_Character(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutCharacter ( int Character ) {
    HRESULT _hr = put_Character(Character);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

Font2Ptr BulletFormat2::GetFont ( ) {
    struct Font2 * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Font2Ptr(_result, false);
}

int BulletFormat2::GetNumber ( ) {
    int _result = 0;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT BulletFormat2::Picture ( _bstr_t FileName ) {
    HRESULT _hr = raw_Picture(FileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

float BulletFormat2::GetRelativeSize ( ) {
    float _result = 0;
    HRESULT _hr = get_RelativeSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutRelativeSize ( float Size ) {
    HRESULT _hr = put_RelativeSize(Size);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int BulletFormat2::GetStartValue ( ) {
    int _result = 0;
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutStartValue ( int Start ) {
    HRESULT _hr = put_StartValue(Start);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoNumberedBulletStyle BulletFormat2::GetStyle ( ) {
    enum MsoNumberedBulletStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutStyle ( enum MsoNumberedBulletStyle Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBulletType BulletFormat2::GetType ( ) {
    enum MsoBulletType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutType ( enum MsoBulletType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState BulletFormat2::GetUseTextColor ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_UseTextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutUseTextColor ( enum MsoTriState UseTextColor ) {
    HRESULT _hr = put_UseTextColor(UseTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState BulletFormat2::GetUseTextFont ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_UseTextFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutUseTextFont ( enum MsoTriState UseTextFont ) {
    HRESULT _hr = put_UseTextFont(UseTextFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState BulletFormat2::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void BulletFormat2::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ParagraphFormat2 wrapper method implementations
//

IDispatchPtr ParagraphFormat2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum MsoParagraphAlignment ParagraphFormat2::GetAlignment ( ) {
    enum MsoParagraphAlignment _result;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutAlignment ( enum MsoParagraphAlignment Alignment ) {
    HRESULT _hr = put_Alignment(Alignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBaselineAlignment ParagraphFormat2::GetBaselineAlignment ( ) {
    enum MsoBaselineAlignment _result;
    HRESULT _hr = get_BaselineAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutBaselineAlignment ( enum MsoBaselineAlignment BaselineAlignment ) {
    HRESULT _hr = put_BaselineAlignment(BaselineAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

BulletFormat2Ptr ParagraphFormat2::GetBullet ( ) {
    struct BulletFormat2 * _result = 0;
    HRESULT _hr = get_Bullet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return BulletFormat2Ptr(_result, false);
}

enum MsoTriState ParagraphFormat2::GetFarEastLineBreakLevel ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_FarEastLineBreakLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutFarEastLineBreakLevel ( enum MsoTriState Break ) {
    HRESULT _hr = put_FarEastLineBreakLevel(Break);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetFirstLineIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutFirstLineIndent ( float Indent ) {
    HRESULT _hr = put_FirstLineIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ParagraphFormat2::GetHangingPunctuation ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HangingPunctuation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutHangingPunctuation ( enum MsoTriState Hanging ) {
    HRESULT _hr = put_HangingPunctuation(Hanging);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int ParagraphFormat2::GetIndentLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_IndentLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutIndentLevel ( int Level ) {
    HRESULT _hr = put_IndentLevel(Level);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetLeftIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutLeftIndent ( float Indent ) {
    HRESULT _hr = put_LeftIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ParagraphFormat2::GetLineRuleAfter ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutLineRuleAfter ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleAfter(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ParagraphFormat2::GetLineRuleBefore ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutLineRuleBefore ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleBefore(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ParagraphFormat2::GetLineRuleWithin ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LineRuleWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutLineRuleWithin ( enum MsoTriState LineRule ) {
    HRESULT _hr = put_LineRuleWithin(LineRule);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetRightIndent ( ) {
    float _result = 0;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutRightIndent ( float Indent ) {
    HRESULT _hr = put_RightIndent(Indent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetSpaceAfter ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutSpaceAfter ( float Space ) {
    HRESULT _hr = put_SpaceAfter(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetSpaceBefore ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutSpaceBefore ( float Space ) {
    HRESULT _hr = put_SpaceBefore(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ParagraphFormat2::GetSpaceWithin ( ) {
    float _result = 0;
    HRESULT _hr = get_SpaceWithin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutSpaceWithin ( float Space ) {
    HRESULT _hr = put_SpaceWithin(Space);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

TabStops2Ptr ParagraphFormat2::GetTabStops ( ) {
    struct TabStops2 * _result = 0;
    HRESULT _hr = get_TabStops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TabStops2Ptr(_result, false);
}

enum MsoTextDirection ParagraphFormat2::GetTextDirection ( ) {
    enum MsoTextDirection _result;
    HRESULT _hr = get_TextDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutTextDirection ( enum MsoTextDirection Direction ) {
    HRESULT _hr = put_TextDirection(Direction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ParagraphFormat2::GetWordWrap ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ParagraphFormat2::PutWordWrap ( enum MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Crop wrapper method implementations
//

float Crop::GetPictureOffsetX ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureOffsetX(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutPictureOffsetX ( float PictureOffsetX ) {
    HRESULT _hr = put_PictureOffsetX(PictureOffsetX);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetPictureOffsetY ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureOffsetY(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutPictureOffsetY ( float PictureOffsetY ) {
    HRESULT _hr = put_PictureOffsetY(PictureOffsetY);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetPictureWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutPictureWidth ( float PictureWidth ) {
    HRESULT _hr = put_PictureWidth(PictureWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetPictureHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_PictureHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutPictureHeight ( float PictureHeight ) {
    HRESULT _hr = put_PictureHeight(PictureHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetShapeLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutShapeLeft ( float ShapeLeft ) {
    HRESULT _hr = put_ShapeLeft(ShapeLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetShapeTop ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutShapeTop ( float ShapeTop ) {
    HRESULT _hr = put_ShapeTop(ShapeTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetShapeWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutShapeWidth ( float ShapeWidth ) {
    HRESULT _hr = put_ShapeWidth(ShapeWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Crop::GetShapeHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_ShapeHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Crop::PutShapeHeight ( float ShapeHeight ) {
    HRESULT _hr = put_ShapeHeight(ShapeHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface PictureFormat wrapper method implementations
//

IDispatchPtr PictureFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT PictureFormat::IncrementBrightness ( float Increment ) {
    HRESULT _hr = raw_IncrementBrightness(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT PictureFormat::IncrementContrast ( float Increment ) {
    HRESULT _hr = raw_IncrementContrast(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

float PictureFormat::GetBrightness ( ) {
    float _result = 0;
    HRESULT _hr = get_Brightness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutBrightness ( float Brightness ) {
    HRESULT _hr = put_Brightness(Brightness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPictureColorType PictureFormat::GetColorType ( ) {
    enum MsoPictureColorType _result;
    HRESULT _hr = get_ColorType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutColorType ( enum MsoPictureColorType ColorType ) {
    HRESULT _hr = put_ColorType(ColorType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float PictureFormat::GetContrast ( ) {
    float _result = 0;
    HRESULT _hr = get_Contrast(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutContrast ( float Contrast ) {
    HRESULT _hr = put_Contrast(Contrast);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float PictureFormat::GetCropBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_CropBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutCropBottom ( float CropBottom ) {
    HRESULT _hr = put_CropBottom(CropBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float PictureFormat::GetCropLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_CropLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutCropLeft ( float CropLeft ) {
    HRESULT _hr = put_CropLeft(CropLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float PictureFormat::GetCropRight ( ) {
    float _result = 0;
    HRESULT _hr = get_CropRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutCropRight ( float CropRight ) {
    HRESULT _hr = put_CropRight(CropRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float PictureFormat::GetCropTop ( ) {
    float _result = 0;
    HRESULT _hr = get_CropTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutCropTop ( float CropTop ) {
    HRESULT _hr = put_CropTop(CropTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

MsoRGBType PictureFormat::GetTransparencyColor ( ) {
    MsoRGBType _result;
    HRESULT _hr = get_TransparencyColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutTransparencyColor ( MsoRGBType TransparencyColor ) {
    HRESULT _hr = put_TransparencyColor(TransparencyColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState PictureFormat::GetTransparentBackground ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_TransparentBackground(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void PictureFormat::PutTransparentBackground ( enum MsoTriState TransparentBackground ) {
    HRESULT _hr = put_TransparentBackground(TransparentBackground);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CropPtr PictureFormat::GetCrop ( ) {
    struct Crop * _result = 0;
    HRESULT _hr = get_Crop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CropPtr(_result, false);
}

//
// interface ContactCard wrapper method implementations
//

HRESULT ContactCard::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ContactCard::Show ( enum MsoContactCardStyle CardStyle, long RectangleLeft, long RectangleRight, long RectangleTop, long RectangleBottom, long HorizontalPosition, VARIANT_BOOL ShowWithDelay ) {
    HRESULT _hr = raw_Show(CardStyle, RectangleLeft, RectangleRight, RectangleTop, RectangleBottom, HorizontalPosition, ShowWithDelay);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface TextRange2 wrapper method implementations
//

_bstr_t TextRange2::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void TextRange2::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int TextRange2::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

TextRange2Ptr TextRange2::Item ( const _variant_t & Index ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

IUnknownPtr TextRange2::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr TextRange2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

TextRange2Ptr TextRange2::GetParagraphs ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Paragraphs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::GetSentences ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Sentences(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::GetWords ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Words(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::GetCharacters ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::GetLines ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Lines(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::GetRuns ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_Runs(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

ParagraphFormat2Ptr TextRange2::GetParagraphFormat ( ) {
    struct ParagraphFormat2 * _result = 0;
    HRESULT _hr = get_ParagraphFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ParagraphFormat2Ptr(_result, false);
}

Font2Ptr TextRange2::GetFont ( ) {
    struct Font2 * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Font2Ptr(_result, false);
}

int TextRange2::GetLength ( ) {
    int _result = 0;
    HRESULT _hr = get_Length(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int TextRange2::GetStart ( ) {
    int _result = 0;
    HRESULT _hr = get_Start(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float TextRange2::GetBoundLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float TextRange2::GetBoundTop ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float TextRange2::GetBoundWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float TextRange2::GetBoundHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_BoundHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

TextRange2Ptr TextRange2::TrimText ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_TrimText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::InsertAfter ( _bstr_t NewText ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertAfter(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::InsertBefore ( _bstr_t NewText ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertBefore(NewText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::InsertSymbol ( _bstr_t FontName, int CharNumber, enum MsoTriState Unicode ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertSymbol(FontName, CharNumber, Unicode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

HRESULT TextRange2::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

TextRange2Ptr TextRange2::Paste ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::PasteSpecial ( enum MsoClipboardFormat Format ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_PasteSpecial(Format, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

HRESULT TextRange2::ChangeCase ( enum MsoTextChangeCase Type ) {
    HRESULT _hr = raw_ChangeCase(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::AddPeriods ( ) {
    HRESULT _hr = raw_AddPeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::RemovePeriods ( ) {
    HRESULT _hr = raw_RemovePeriods();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

TextRange2Ptr TextRange2::Find ( _bstr_t FindWhat, int After, enum MsoTriState MatchCase, enum MsoTriState WholeWords ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Find(FindWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::Replace ( _bstr_t FindWhat, _bstr_t ReplaceWhat, int After, enum MsoTriState MatchCase, enum MsoTriState WholeWords ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_Replace(FindWhat, ReplaceWhat, After, MatchCase, WholeWords, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

HRESULT TextRange2::RotatedBounds ( float * X1, float * Y1, float * X2, float * Y2, float * X3, float * Y3, float * x4, float * y4 ) {
    HRESULT _hr = raw_RotatedBounds(X1, Y1, X2, Y2, X3, Y3, x4, y4);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoLanguageID TextRange2::GetLanguageID ( ) {
    enum MsoLanguageID _result;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextRange2::PutLanguageID ( enum MsoLanguageID LanguageID ) {
    HRESULT _hr = put_LanguageID(LanguageID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT TextRange2::RtlRun ( ) {
    HRESULT _hr = raw_RtlRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT TextRange2::LtrRun ( ) {
    HRESULT _hr = raw_LtrRun();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

TextRange2Ptr TextRange2::GetMathZones ( int Start, int Length ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_MathZones(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextRange2Ptr TextRange2::InsertChartField ( enum MsoChartFieldType ChartFieldType, _bstr_t Formula, int Position ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = raw_InsertChartField(ChartFieldType, Formula, Position, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

//
// interface TextFrame2 wrapper method implementations
//

IDispatchPtr TextFrame2::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

float TextFrame2::GetMarginBottom ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginBottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutMarginBottom ( float MarginBottom ) {
    HRESULT _hr = put_MarginBottom(MarginBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame2::GetMarginLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutMarginLeft ( float MarginLeft ) {
    HRESULT _hr = put_MarginLeft(MarginLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame2::GetMarginRight ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginRight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutMarginRight ( float MarginRight ) {
    HRESULT _hr = put_MarginRight(MarginRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float TextFrame2::GetMarginTop ( ) {
    float _result = 0;
    HRESULT _hr = get_MarginTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutMarginTop ( float MarginTop ) {
    HRESULT _hr = put_MarginTop(MarginTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTextOrientation TextFrame2::GetOrientation ( ) {
    enum MsoTextOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutOrientation ( enum MsoTextOrientation Orientation ) {
    HRESULT _hr = put_Orientation(Orientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoHorizontalAnchor TextFrame2::GetHorizontalAnchor ( ) {
    enum MsoHorizontalAnchor _result;
    HRESULT _hr = get_HorizontalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutHorizontalAnchor ( enum MsoHorizontalAnchor HorizontalAnchor ) {
    HRESULT _hr = put_HorizontalAnchor(HorizontalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoVerticalAnchor TextFrame2::GetVerticalAnchor ( ) {
    enum MsoVerticalAnchor _result;
    HRESULT _hr = get_VerticalAnchor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutVerticalAnchor ( enum MsoVerticalAnchor VerticalAnchor ) {
    HRESULT _hr = put_VerticalAnchor(VerticalAnchor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPathFormat TextFrame2::GetPathFormat ( ) {
    enum MsoPathFormat _result;
    HRESULT _hr = get_PathFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutPathFormat ( enum MsoPathFormat PathFormat ) {
    HRESULT _hr = put_PathFormat(PathFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoWarpFormat TextFrame2::GetWarpFormat ( ) {
    enum MsoWarpFormat _result;
    HRESULT _hr = get_WarpFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutWarpFormat ( enum MsoWarpFormat WarpFormat ) {
    HRESULT _hr = put_WarpFormat(WarpFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoPresetTextEffect TextFrame2::GetWordArtformat ( ) {
    enum MsoPresetTextEffect _result;
    HRESULT _hr = get_WordArtformat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutWordArtformat ( enum MsoPresetTextEffect WordArtformat ) {
    HRESULT _hr = put_WordArtformat(WordArtformat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState TextFrame2::GetWordWrap ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_WordWrap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutWordWrap ( enum MsoTriState WordWrap ) {
    HRESULT _hr = put_WordWrap(WordWrap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoAutoSize TextFrame2::GetAutoSize ( ) {
    enum MsoAutoSize _result;
    HRESULT _hr = get_AutoSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutAutoSize ( enum MsoAutoSize AutoSize ) {
    HRESULT _hr = put_AutoSize(AutoSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ThreeDFormatPtr TextFrame2::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

enum MsoTriState TextFrame2::GetHasText ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

TextRange2Ptr TextFrame2::GetTextRange ( ) {
    struct TextRange2 * _result = 0;
    HRESULT _hr = get_TextRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextRange2Ptr(_result, false);
}

TextColumn2Ptr TextFrame2::GetColumn ( ) {
    struct TextColumn2 * _result = 0;
    HRESULT _hr = get_Column(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextColumn2Ptr(_result, false);
}

Ruler2Ptr TextFrame2::GetRuler ( ) {
    struct Ruler2 * _result = 0;
    HRESULT _hr = get_Ruler(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return Ruler2Ptr(_result, false);
}

HRESULT TextFrame2::DeleteText ( ) {
    HRESULT _hr = raw_DeleteText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTriState TextFrame2::GetNoTextRotation ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_NoTextRotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void TextFrame2::PutNoTextRotation ( enum MsoTriState NoTextRotation ) {
    HRESULT _hr = put_NoTextRotation(NoTextRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoChartFormat wrapper method implementations
//

FillFormatPtr IMsoChartFormat::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

GlowFormatPtr IMsoChartFormat::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

LineFormatPtr IMsoChartFormat::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

IDispatchPtr IMsoChartFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

PictureFormatPtr IMsoChartFormat::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

ShadowFormatPtr IMsoChartFormat::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

SoftEdgeFormatPtr IMsoChartFormat::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

TextFrame2Ptr IMsoChartFormat::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

ThreeDFormatPtr IMsoChartFormat::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

IDispatchPtr IMsoChartFormat::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoChartFormat::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

AdjustmentsPtr IMsoChartFormat::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

enum MsoAutoShapeType IMsoChartFormat::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartFormat::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoLegend wrapper method implementations
//

IDispatchPtr IMsoLegend::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoLegend::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoLegend::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr IMsoLegend::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoLegend::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

ChartFontPtr IMsoLegend::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

IDispatchPtr IMsoLegend::LegendEntries ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LegendEntries(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum XlLegendPosition IMsoLegend::GetPosition ( ) {
    enum XlLegendPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutPosition ( enum XlLegendPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoLegend::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoLegend::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IMsoLegend::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutHeight ( double RHS ) {
    HRESULT _hr = put_Height(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoInteriorPtr IMsoLegend::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoLegend::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

double IMsoLegend::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoLegend::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoLegend::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutWidth ( double RHS ) {
    HRESULT _hr = put_Width(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoLegend::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoLegend::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoLegend::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegend::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoLegend::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoLegend::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoLegend::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoWalls wrapper method implementations
//

_bstr_t IMsoWalls::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoWalls::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoWalls::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoWalls::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoWalls::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoWalls::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoWalls::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

_variant_t IMsoWalls::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoWalls::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoWalls::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IMsoWalls::GetPictureUnit ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoWalls::PutPictureUnit ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureUnit(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoWalls::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoWalls::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoWalls::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoWalls::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoWalls::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoFloor wrapper method implementations
//

_bstr_t IMsoFloor::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoFloor::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoFloor::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoFloor::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoFloor::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoFloor::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoFloor::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

_variant_t IMsoFloor::GetPictureType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoFloor::PutPictureType ( const _variant_t & pvar ) {
    HRESULT _hr = put_PictureType(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoFloor::Paste ( ) {
    HRESULT _hr = raw_Paste();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IMsoFloor::GetThickness ( ) {
    long _result = 0;
    HRESULT _hr = get_Thickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoFloor::PutThickness ( long RHS ) {
    HRESULT _hr = put_Thickness(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoFloor::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoFloor::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoFloor::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoPlotArea wrapper method implementations
//

_bstr_t IMsoPlotArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoPlotArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoPlotArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoPlotArea::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoPlotArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IMsoPlotArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutHeight ( double pd ) {
    HRESULT _hr = put_Height(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoInteriorPtr IMsoPlotArea::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoPlotArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

double IMsoPlotArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutLeft ( double pd ) {
    HRESULT _hr = put_Left(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutTop ( double pd ) {
    HRESULT _hr = put_Top(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutWidth ( double pd ) {
    HRESULT _hr = put_Width(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetInsideLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideLeft(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutInsideLeft ( double pd ) {
    HRESULT _hr = put_InsideLeft(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetInsideTop ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideTop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutInsideTop ( double pd ) {
    HRESULT _hr = put_InsideTop(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetInsideWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutInsideWidth ( double pd ) {
    HRESULT _hr = put_InsideWidth(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoPlotArea::GetInsideHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_InsideHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutInsideHeight ( double pd ) {
    HRESULT _hr = put_InsideHeight(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlChartElementPosition IMsoPlotArea::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoPlotArea::PutPosition ( enum XlChartElementPosition pval ) {
    HRESULT _hr = put_Position(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoPlotArea::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoPlotArea::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoPlotArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartArea wrapper method implementations
//

_bstr_t IMsoChartArea::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoChartArea::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoChartArea::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoChartArea::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoChartArea::Clear ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Clear(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoChartArea::ClearContents ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearContents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoChartArea::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

ChartFontPtr IMsoChartArea::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

VARIANT_BOOL IMsoChartArea::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutShadow ( VARIANT_BOOL pf ) {
    HRESULT _hr = put_Shadow(pf);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartArea::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IMsoChartArea::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutHeight ( double pd ) {
    HRESULT _hr = put_Height(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoInteriorPtr IMsoChartArea::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoChartArea::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

double IMsoChartArea::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutLeft ( double pd ) {
    HRESULT _hr = put_Left(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoChartArea::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutTop ( double pd ) {
    HRESULT _hr = put_Top(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoChartArea::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutWidth ( double pd ) {
    HRESULT _hr = put_Width(pd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartArea::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChartArea::PutAutoScaleFont ( const _variant_t & pvar ) {
    HRESULT _hr = put_AutoScaleFont(pvar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoChartArea::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

VARIANT_BOOL IMsoChartArea::GetRoundedCorners ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_RoundedCorners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartArea::PutRoundedCorners ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_RoundedCorners(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoChartArea::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoChartArea::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoSeriesLines wrapper method implementations
//

_bstr_t IMsoSeriesLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoSeriesLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoSeriesLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoSeriesLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoSeriesLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoChartFormatPtr IMsoSeriesLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoSeriesLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoSeriesLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoLeaderLines wrapper method implementations
//

HRESULT IMsoLeaderLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoBorderPtr IMsoLeaderLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

HRESULT IMsoLeaderLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoChartFormatPtr IMsoLeaderLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoLeaderLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoLeaderLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoLeaderLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface GridLines wrapper method implementations
//

_bstr_t GridLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t GridLines::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr GridLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr GridLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t GridLines::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoChartFormatPtr GridLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr GridLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long GridLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoUpBars wrapper method implementations
//

_bstr_t IMsoUpBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoUpBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoUpBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoUpBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoUpBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoUpBars::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoUpBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

IMsoChartFormatPtr IMsoUpBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoUpBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoUpBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoDownBars wrapper method implementations
//

_bstr_t IMsoDownBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoDownBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoDownBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoDownBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoDownBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoDownBars::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoDownBars::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

IMsoChartFormatPtr IMsoDownBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoDownBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoDownBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoLegendKey wrapper method implementations
//

IDispatchPtr IMsoLegendKey::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoLegendKey::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoLegendKey::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoLegendKey::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoLegendKey::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoLegendKey::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

VARIANT_BOOL IMsoLegendKey::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoLegendKey::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex IMsoLegendKey::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoLegendKey::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex IMsoLegendKey::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoLegendKey::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlMarkerStyle IMsoLegendKey::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoLegendKey::GetPictureType ( ) {
    long _result = 0;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutPictureType ( long RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoLegendKey::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoLegendKey::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoLegendKey::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoLegendKey::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoLegendKey::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoLegendKey::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoLegendKey::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IMsoLegendKey::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoLegendKey::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoLegendKey::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoLegendKey::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoLegendKey::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoLegendKey::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface LegendEntry wrapper method implementations
//

IDispatchPtr LegendEntry::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t LegendEntry::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

ChartFontPtr LegendEntry::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

long LegendEntry::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoLegendKeyPtr LegendEntry::GetLegendKey ( ) {
    struct IMsoLegendKey * _result = 0;
    HRESULT _hr = get_LegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLegendKeyPtr(_result, false);
}

_variant_t LegendEntry::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t LegendEntry::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void LegendEntry::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double LegendEntry::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double LegendEntry::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double LegendEntry::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double LegendEntry::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartFormatPtr LegendEntry::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr LegendEntry::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long LegendEntry::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface LegendEntries wrapper method implementations
//

IDispatchPtr LegendEntries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long LegendEntries::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

LegendEntryPtr LegendEntries::Item ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

IUnknownPtr LegendEntries::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr LegendEntries::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long LegendEntries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

LegendEntryPtr LegendEntries::Get_Default ( const _variant_t & Index ) {
    struct LegendEntry * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LegendEntryPtr(_result, false);
}

//
// interface IMsoErrorBars wrapper method implementations
//

IDispatchPtr IMsoErrorBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoErrorBars::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoErrorBars::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr IMsoErrorBars::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoErrorBars::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoErrorBars::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlEndStyleCap IMsoErrorBars::GetEndStyle ( ) {
    enum XlEndStyleCap _result;
    HRESULT _hr = get_EndStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoErrorBars::PutEndStyle ( enum XlEndStyleCap RHS ) {
    HRESULT _hr = put_EndStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoErrorBars::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoErrorBars::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoErrorBars::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoSeries wrapper method implementations
//

IDispatchPtr IMsoSeries::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoSeries::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlAxisGroup IMsoSeries::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutAxisGroup ( enum XlAxisGroup RHS ) {
    HRESULT _hr = put_AxisGroup(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoBorderPtr IMsoSeries::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoSeries::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoSeries::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IDispatchPtr IMsoSeries::DataLabels ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DataLabels(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoSeries::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoSeries::ErrorBar ( enum XlErrorBarDirection Direction, enum XlErrorBarInclude Include, enum XlErrorBarType Type, const _variant_t & Amount, const _variant_t & MinusValues ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ErrorBar(Direction, Include, Type, Amount, MinusValues, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoErrorBarsPtr IMsoSeries::GetErrorBars ( ) {
    struct IMsoErrorBars * _result = 0;
    HRESULT _hr = get_ErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoErrorBarsPtr(_result, false);
}

long IMsoSeries::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoSeries::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoSeries::PutFormula ( _bstr_t RHS ) {
    HRESULT _hr = put_Formula(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoSeries::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoSeries::PutFormulaLocal ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoSeries::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoSeries::PutFormulaR1C1 ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoSeries::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoSeries::PutFormulaR1C1Local ( _bstr_t RHS ) {
    HRESULT _hr = put_FormulaR1C1Local(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetHasDataLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutHasDataLabels ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabels(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetHasErrorBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasErrorBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutHasErrorBars ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasErrorBars(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoInteriorPtr IMsoSeries::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoSeries::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

VARIANT_BOOL IMsoSeries::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoSeries::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex IMsoSeries::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoSeries::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex IMsoSeries::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoSeries::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlMarkerStyle IMsoSeries::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoSeries::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoSeries::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoSeries::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlChartPictureType IMsoSeries::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoSeries::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoSeries::GetPlotOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutPlotOrder ( long RHS ) {
    HRESULT _hr = put_PlotOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoSeries::Points ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Points(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoSeries::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoSeries::GetSmooth ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Smooth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutSmooth ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Smooth(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoSeries::Trendlines ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Trendlines(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoSeries::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlChartType IMsoSeries::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoSeries::ApplyCustomType ( enum XlChartType ChartType ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IMsoSeries::GetValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Values(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoSeries::PutValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_Values(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoSeries::GetXValues ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_XValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoSeries::PutXValues ( const _variant_t & RHS ) {
    HRESULT _hr = put_XValues(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoSeries::GetBubbleSizes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_BubbleSizes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoSeries::PutBubbleSizes ( const _variant_t & RHS ) {
    HRESULT _hr = put_BubbleSizes(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlBarShape IMsoSeries::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutBarShape ( enum XlBarShape RHS ) {
    HRESULT _hr = put_BarShape(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetHasLeaderLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutHasLeaderLines ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLeaderLines(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoLeaderLinesPtr IMsoSeries::GetLeaderLines ( ) {
    struct IMsoLeaderLines * _result = 0;
    HRESULT _hr = get_LeaderLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLeaderLinesPtr(_result, false);
}

_variant_t IMsoSeries::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoChartFormatPtr IMsoSeries::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoSeries::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoSeries::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoSeries::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoSeries::GetPlotColorIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_PlotColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long IMsoSeries::GetInvertColor ( ) {
    long _result = 0;
    HRESULT _hr = get_InvertColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutInvertColor ( long RHS ) {
    HRESULT _hr = put_InvertColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex IMsoSeries::GetInvertColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_InvertColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutInvertColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_InvertColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoSeries::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoSeries::PutIsFiltered ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IsFiltered(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface SeriesCollection wrapper method implementations
//

IDispatchPtr SeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoSeriesPtr SeriesCollection::Add ( const _variant_t & Source, enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_Add(Source, Rowcol, SeriesLabels, CategoryLabels, Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

long SeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t SeriesCollection::Extend ( const _variant_t & Source, const _variant_t & Rowcol, const _variant_t & CategoryLabels ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Extend(Source, Rowcol, CategoryLabels, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoSeriesPtr SeriesCollection::Item ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

IUnknownPtr SeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

_variant_t SeriesCollection::Paste ( enum XlRowCol Rowcol, const _variant_t & SeriesLabels, const _variant_t & CategoryLabels, const _variant_t & Replace, const _variant_t & NewSeries ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(Rowcol, SeriesLabels, CategoryLabels, Replace, NewSeries, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoSeriesPtr SeriesCollection::NewSeries ( ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_NewSeries(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

IDispatchPtr SeriesCollection::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long SeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoSeriesPtr SeriesCollection::Get_Default ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

//
// interface IMsoDataLabel wrapper method implementations
//

IDispatchPtr IMsoDataLabel::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoDataLabel::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoDataLabel::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr IMsoDataLabel::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoDataLabel::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoDataLabel::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoDataLabel::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

_bstr_t IMsoDataLabel::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutCaption ( _bstr_t RHS ) {
    HRESULT _hr = put_Caption(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoCharactersPtr IMsoDataLabel::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

ChartFontPtr IMsoDataLabel::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

_variant_t IMsoDataLabel::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoDataLabel::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutLeft ( double RHS ) {
    HRESULT _hr = put_Left(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutText ( _bstr_t RHS ) {
    HRESULT _hr = put_Text(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoDataLabel::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutTop ( double RHS ) {
    HRESULT _hr = put_Top(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoDataLabel::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlDataLabelPosition IMsoDataLabel::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabel::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabel::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabel::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoDataLabel::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

double IMsoDataLabel::Get_Height ( ) {
    double _result = 0;
    HRESULT _hr = get__Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoDataLabel::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoDataLabel::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoDataLabel::Get_Width ( ) {
    double _result = 0;
    HRESULT _hr = get__Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabel::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabel::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IMsoDataLabel::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoDataLabel::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutHeight ( double pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoDataLabel::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabel::PutWidth ( double pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMsoTrendline wrapper method implementations
//

IDispatchPtr IMsoTrendline::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

double IMsoTrendline::GetBackward ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutBackward ( double RHS ) {
    HRESULT _hr = put_Backward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoBorderPtr IMsoTrendline::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoTrendline::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoDataLabelPtr IMsoTrendline::GetDataLabel ( ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

_variant_t IMsoTrendline::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoTrendline::GetDisplayEquation ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayEquation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutDisplayEquation ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayEquation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoTrendline::GetDisplayRSquared ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayRSquared(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutDisplayRSquared ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_DisplayRSquared(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoTrendline::GetForward ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutForward ( double RHS ) {
    HRESULT _hr = put_Forward(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoTrendline::GetIndex ( ) {
    long _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoTrendline::GetIntercept ( ) {
    double _result = 0;
    HRESULT _hr = get_Intercept(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutIntercept ( double RHS ) {
    HRESULT _hr = put_Intercept(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoTrendline::GetInterceptIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InterceptIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutInterceptIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InterceptIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoTrendline::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoTrendline::PutName ( _bstr_t RHS ) {
    HRESULT _hr = put_Name(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoTrendline::GetNameIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NameIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutNameIsAuto ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NameIsAuto(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoTrendline::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_Order(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutOrder ( long RHS ) {
    HRESULT _hr = put_Order(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoTrendline::GetPeriod ( ) {
    long _result = 0;
    HRESULT _hr = get_Period(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutPeriod ( long RHS ) {
    HRESULT _hr = put_Period(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoTrendline::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlTrendlineType IMsoTrendline::GetType ( ) {
    enum XlTrendlineType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutType ( enum XlTrendlineType RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoTrendline::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoTrendline::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoTrendline::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoTrendline::GetBackward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Backward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutBackward2 ( double RHS ) {
    HRESULT _hr = put_Backward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoTrendline::GetForward2 ( ) {
    double _result = 0;
    HRESULT _hr = get_Forward2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTrendline::PutForward2 ( double RHS ) {
    HRESULT _hr = put_Forward2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface Trendlines wrapper method implementations
//

IDispatchPtr Trendlines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoTrendlinePtr Trendlines::Add ( enum XlTrendlineType Type, const _variant_t & Order, const _variant_t & Period, const _variant_t & Forward, const _variant_t & Backward, const _variant_t & Intercept, const _variant_t & DisplayEquation, const _variant_t & DisplayRSquared, const _variant_t & Name ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = raw_Add(Type, Order, Period, Forward, Backward, Intercept, DisplayEquation, DisplayRSquared, Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

long Trendlines::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoTrendlinePtr Trendlines::Item ( const _variant_t & Index ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

IUnknownPtr Trendlines::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr Trendlines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Trendlines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoTrendlinePtr Trendlines::Get_Default ( const _variant_t & Index ) {
    struct IMsoTrendline * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTrendlinePtr(_result, false);
}

//
// interface IMsoDataLabels wrapper method implementations
//

IDispatchPtr IMsoDataLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoDataLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_variant_t IMsoDataLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr IMsoDataLabels::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t IMsoDataLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoDataLabels::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoDataLabels::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

IMsoCharactersPtr IMsoDataLabels::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

ChartFontPtr IMsoDataLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

_variant_t IMsoDataLabels::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutHorizontalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_HorizontalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutOrientation ( const _variant_t & RHS ) {
    HRESULT _hr = put_Orientation(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutVerticalAlignment ( const _variant_t & RHS ) {
    HRESULT _hr = put_VerticalAlignment(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoDataLabels::GetReadingOrder ( ) {
    long _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutReadingOrder ( long RHS ) {
    HRESULT _hr = put_ReadingOrder(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetAutoText ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutAutoText ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_AutoText(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoDataLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoDataLabels::PutNumberFormat ( _bstr_t RHS ) {
    HRESULT _hr = put_NumberFormat(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutNumberFormatLinked ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_NumberFormatLinked(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutNumberFormatLocal ( const _variant_t & RHS ) {
    HRESULT _hr = put_NumberFormatLocal(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowLegendKey ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowLegendKey(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetType ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutType ( const _variant_t & RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlDataLabelPosition IMsoDataLabels::GetPosition ( ) {
    enum XlDataLabelPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutPosition ( enum XlDataLabelPosition RHS ) {
    HRESULT _hr = put_Position(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowSeriesName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowSeriesName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowSeriesName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowSeriesName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowCategoryName ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowCategoryName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowCategoryName ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowCategoryName(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowValue ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowValue ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowValue(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowPercentage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowPercentage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowPercentage ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowPercentage(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataLabels::GetShowBubbleSize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowBubbleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowBubbleSize ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowBubbleSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoDataLabels::GetSeparator ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Separator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataLabels::PutSeparator ( const _variant_t & RHS ) {
    HRESULT _hr = put_Separator(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoDataLabels::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoDataLabelPtr IMsoDataLabels::Item ( const _variant_t & Index ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

IUnknownPtr IMsoDataLabels::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IMsoChartFormatPtr IMsoDataLabels::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoDataLabels::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoDataLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoDataLabelPtr IMsoDataLabels::Get_Default ( const _variant_t & Index ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

HRESULT IMsoDataLabels::Propagate ( const _variant_t & Index ) {
    HRESULT _hr = raw_Propagate(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IMsoDataLabels::GetShowRange ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowRange(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataLabels::PutShowRange ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ShowRange(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ChartPoint wrapper method implementations
//

IDispatchPtr ChartPoint::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t ChartPoint::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr ChartPoint::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_variant_t ChartPoint::ClearFormats ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ClearFormats(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t ChartPoint::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoDataLabelPtr ChartPoint::GetDataLabel ( ) {
    struct IMsoDataLabel * _result = 0;
    HRESULT _hr = get_DataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataLabelPtr(_result, false);
}

_variant_t ChartPoint::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

long ChartPoint::GetExplosion ( ) {
    long _result = 0;
    HRESULT _hr = get_Explosion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutExplosion ( long RHS ) {
    HRESULT _hr = put_Explosion(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL ChartPoint::GetHasDataLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutHasDataLabel ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataLabel(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoInteriorPtr ChartPoint::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

VARIANT_BOOL ChartPoint::GetInvertIfNegative ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_InvertIfNegative(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutInvertIfNegative ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_InvertIfNegative(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long ChartPoint::GetMarkerBackgroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerBackgroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerBackgroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerBackgroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex ChartPoint::GetMarkerBackgroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerBackgroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerBackgroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerBackgroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long ChartPoint::GetMarkerForegroundColor ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerForegroundColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerForegroundColor ( long RHS ) {
    HRESULT _hr = put_MarkerForegroundColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlColorIndex ChartPoint::GetMarkerForegroundColorIndex ( ) {
    enum XlColorIndex _result;
    HRESULT _hr = get_MarkerForegroundColorIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerForegroundColorIndex ( enum XlColorIndex RHS ) {
    HRESULT _hr = put_MarkerForegroundColorIndex(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long ChartPoint::GetMarkerSize ( ) {
    long _result = 0;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerSize ( long RHS ) {
    HRESULT _hr = put_MarkerSize(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlMarkerStyle ChartPoint::GetMarkerStyle ( ) {
    enum XlMarkerStyle _result;
    HRESULT _hr = get_MarkerStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutMarkerStyle ( enum XlMarkerStyle RHS ) {
    HRESULT _hr = put_MarkerStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartPoint::Paste ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Paste(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlChartPictureType ChartPoint::GetPictureType ( ) {
    enum XlChartPictureType _result;
    HRESULT _hr = get_PictureType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutPictureType ( enum XlChartPictureType RHS ) {
    HRESULT _hr = put_PictureType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double ChartPoint::GetPictureUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutPictureUnit ( double RHS ) {
    HRESULT _hr = put_PictureUnit(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t ChartPoint::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL ChartPoint::GetApplyPictToSides ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToSides(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutApplyPictToSides ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToSides(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL ChartPoint::GetApplyPictToFront ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToFront(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutApplyPictToFront ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToFront(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL ChartPoint::GetApplyPictToEnd ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ApplyPictToEnd(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutApplyPictToEnd ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_ApplyPictToEnd(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL ChartPoint::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutShadow ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Shadow(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL ChartPoint::GetSecondaryPlot ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SecondaryPlot(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutSecondaryPlot ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_SecondaryPlot(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ChartFillFormatPtr ChartPoint::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

_variant_t ChartPoint::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL ChartPoint::GetHas3DEffect ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutHas3DEffect ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DEffect(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr ChartPoint::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr ChartPoint::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartPoint::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double ChartPoint::GetPictureUnit2 ( ) {
    double _result = 0;
    HRESULT _hr = get_PictureUnit2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ChartPoint::PutPictureUnit2 ( double RHS ) {
    HRESULT _hr = put_PictureUnit2(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t ChartPoint::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double ChartPoint::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double ChartPoint::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double ChartPoint::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double ChartPoint::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double ChartPoint::PieSliceLocation ( enum XlPieSliceLocation loc, enum XlPieSliceIndex Index ) {
    double _result = 0;
    HRESULT _hr = raw_PieSliceLocation(loc, Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface Points wrapper method implementations
//

IDispatchPtr Points::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Points::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ChartPointPtr Points::Item ( long Index ) {
    struct ChartPoint * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPointPtr(_result, false);
}

IUnknownPtr Points::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr Points::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Points::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ChartPointPtr Points::Get_Default ( long Index ) {
    struct ChartPoint * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartPointPtr(_result, false);
}

//
// interface IMsoDataTable wrapper method implementations
//

void IMsoDataTable::PutShowLegendKey ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_ShowLegendKey(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataTable::GetShowLegendKey ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendKey(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataTable::PutHasBorderHorizontal ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderHorizontal(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataTable::GetHasBorderHorizontal ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataTable::PutHasBorderVertical ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderVertical(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataTable::GetHasBorderVertical ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderVertical(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDataTable::PutHasBorderOutline ( VARIANT_BOOL pfVisible ) {
    HRESULT _hr = put_HasBorderOutline(pfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoDataTable::GetHasBorderOutline ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasBorderOutline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoBorderPtr IMsoDataTable::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

ChartFontPtr IMsoDataTable::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

HRESULT IMsoDataTable::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoDataTable::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IMsoDataTable::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoDataTable::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoDataTable::PutAutoScaleFont ( const _variant_t & RHS ) {
    HRESULT _hr = put_AutoScaleFont(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoDataTable::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoDataTable::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoDataTable::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartTitle wrapper method implementations
//

void IMsoChartTitle::PutCaption ( _bstr_t pbstr ) {
    HRESULT _hr = put_Caption(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IMsoCharactersPtr IMsoChartTitle::GetCharacters ( const _variant_t & Start, const _variant_t & Length ) {
    struct IMsoCharacters * _result = 0;
    HRESULT _hr = get_Characters(Start, Length, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCharactersPtr(_result, false);
}

ChartFontPtr IMsoChartTitle::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

void IMsoChartTitle::PutHorizontalAlignment ( const _variant_t & Val ) {
    HRESULT _hr = put_HorizontalAlignment(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartTitle::GetHorizontalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HorizontalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

double IMsoChartTitle::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutLeft ( double pval ) {
    HRESULT _hr = put_Left(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChartTitle::PutOrientation ( const _variant_t & Val ) {
    HRESULT _hr = put_Orientation(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartTitle::GetOrientation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoChartTitle::GetShadow ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutShadow ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_Shadow(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChartTitle::PutText ( _bstr_t pbstr ) {
    HRESULT _hr = put_Text(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

double IMsoChartTitle::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutTop ( double pval ) {
    HRESULT _hr = put_Top(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChartTitle::PutVerticalAlignment ( const _variant_t & Val ) {
    HRESULT _hr = put_VerticalAlignment(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartTitle::GetVerticalAlignment ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_VerticalAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

int IMsoChartTitle::GetReadingOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutReadingOrder ( int pval ) {
    HRESULT _hr = put_ReadingOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChartTitle::PutAutoScaleFont ( const _variant_t & Val ) {
    HRESULT _hr = put_AutoScaleFont(Val);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChartTitle::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoInteriorPtr IMsoChartTitle::GetInterior ( ) {
    struct IMsoInterior * _result = 0;
    HRESULT _hr = get_Interior(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoInteriorPtr(_result, false);
}

ChartFillFormatPtr IMsoChartTitle::GetFill ( ) {
    struct ChartFillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFillFormatPtr(_result, false);
}

_variant_t IMsoChartTitle::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoBorderPtr IMsoChartTitle::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_bstr_t IMsoChartTitle::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IDispatchPtr IMsoChartTitle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoChartTitle::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoChartTitle::GetIncludeInLayout ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IncludeInLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutIncludeInLayout ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_IncludeInLayout(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlChartElementPosition IMsoChartTitle::GetPosition ( ) {
    enum XlChartElementPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutPosition ( enum XlChartElementPosition pval ) {
    HRESULT _hr = put_Position(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoChartTitle::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

double IMsoChartTitle::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoChartTitle::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoChartTitle::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoChartTitle::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartTitle::PutFormula ( _bstr_t pbstr ) {
    HRESULT _hr = put_Formula(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetFormula ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Formula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoChartTitle::PutFormulaR1C1 ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetFormulaR1C1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoChartTitle::PutFormulaLocal ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaLocal(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetFormulaLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoChartTitle::PutFormulaR1C1Local ( _bstr_t pbstr ) {
    HRESULT _hr = put_FormulaR1C1Local(pbstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t IMsoChartTitle::GetFormulaR1C1Local ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FormulaR1C1Local(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMsoTickLabels wrapper method implementations
//

IDispatchPtr IMsoTickLabels::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoTickLabels::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

ChartFontPtr IMsoTickLabels::GetFont ( ) {
    struct ChartFont * _result = 0;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ChartFontPtr(_result, false);
}

_bstr_t IMsoTickLabels::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t IMsoTickLabels::GetNumberFormat ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void IMsoTickLabels::PutNumberFormat ( _bstr_t pval ) {
    HRESULT _hr = put_NumberFormat(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoTickLabels::GetNumberFormatLinked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_NumberFormatLinked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutNumberFormatLinked ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_NumberFormatLinked(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoTickLabels::GetNumberFormatLocal ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NumberFormatLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoTickLabels::PutNumberFormatLocal ( const _variant_t & pval ) {
    HRESULT _hr = put_NumberFormatLocal(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlTickLabelOrientation IMsoTickLabels::GetOrientation ( ) {
    enum XlTickLabelOrientation _result;
    HRESULT _hr = get_Orientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutOrientation ( enum XlTickLabelOrientation pval ) {
    HRESULT _hr = put_Orientation(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoTickLabels::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

int IMsoTickLabels::GetReadingOrder ( ) {
    int _result = 0;
    HRESULT _hr = get_ReadingOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutReadingOrder ( int pval ) {
    HRESULT _hr = put_ReadingOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoTickLabels::GetAutoScaleFont ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AutoScaleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoTickLabels::PutAutoScaleFont ( const _variant_t & pval ) {
    HRESULT _hr = put_AutoScaleFont(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoTickLabels::GetDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_Depth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int IMsoTickLabels::GetOffset ( ) {
    int _result = 0;
    HRESULT _hr = get_Offset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutOffset ( int pval ) {
    HRESULT _hr = put_Offset(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoTickLabels::GetAlignment ( ) {
    int _result = 0;
    HRESULT _hr = get_Alignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutAlignment ( int pval ) {
    HRESULT _hr = put_Alignment(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoTickLabels::GetMultiLevel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MultiLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoTickLabels::PutMultiLevel ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MultiLevel(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartFormatPtr IMsoTickLabels::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoTickLabels::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoTickLabels::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoAxis wrapper method implementations
//

VARIANT_BOOL IMsoAxis::GetAxisBetweenCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AxisBetweenCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutAxisBetweenCategories ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_AxisBetweenCategories(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlAxisGroup IMsoAxis::GetAxisGroup ( ) {
    enum XlAxisGroup _result;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoAxisTitlePtr IMsoAxis::GetAxisTitle ( ) {
    struct IMsoAxisTitle * _result = 0;
    HRESULT _hr = get_AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisTitlePtr(_result, false);
}

_variant_t IMsoAxis::GetCategoryNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CategoryNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoAxis::PutCategoryNames ( const _variant_t & pval ) {
    HRESULT _hr = put_CategoryNames(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlAxisCrosses IMsoAxis::GetCrosses ( ) {
    enum XlAxisCrosses _result;
    HRESULT _hr = get_Crosses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutCrosses ( enum XlAxisCrosses pval ) {
    HRESULT _hr = put_Crosses(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetCrossesAt ( ) {
    double _result = 0;
    HRESULT _hr = get_CrossesAt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutCrossesAt ( double pval ) {
    HRESULT _hr = put_CrossesAt(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoAxis::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoAxis::GetHasMajorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutHasMajorGridlines ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasMajorGridlines(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetHasMinorGridlines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasMinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutHasMinorGridlines ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasMinorGridlines(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutHasTitle ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasTitle(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

GridLinesPtr IMsoAxis::GetMajorGridlines ( ) {
    struct GridLines * _result = 0;
    HRESULT _hr = get_MajorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridLinesPtr(_result, false);
}

enum XlTickMark IMsoAxis::GetMajorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MajorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMajorTickMark ( enum XlTickMark pval ) {
    HRESULT _hr = put_MajorTickMark(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetMajorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMajorUnit ( double pval ) {
    HRESULT _hr = put_MajorUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetLogBase ( ) {
    double _result = 0;
    HRESULT _hr = get_LogBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutLogBase ( double pval ) {
    HRESULT _hr = put_LogBase(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetTickLabelSpacingIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_TickLabelSpacingIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutTickLabelSpacingIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_TickLabelSpacingIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetMajorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MajorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMajorUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MajorUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetMaximumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MaximumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMaximumScale ( double pval ) {
    HRESULT _hr = put_MaximumScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetMaximumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MaximumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMaximumScaleIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MaximumScaleIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetMinimumScale ( ) {
    double _result = 0;
    HRESULT _hr = get_MinimumScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinimumScale ( double pval ) {
    HRESULT _hr = put_MinimumScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetMinimumScaleIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinimumScaleIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinimumScaleIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MinimumScaleIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

GridLinesPtr IMsoAxis::GetMinorGridlines ( ) {
    struct GridLines * _result = 0;
    HRESULT _hr = get_MinorGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GridLinesPtr(_result, false);
}

enum XlTickMark IMsoAxis::GetMinorTickMark ( ) {
    enum XlTickMark _result;
    HRESULT _hr = get_MinorTickMark(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinorTickMark ( enum XlTickMark pval ) {
    HRESULT _hr = put_MinorTickMark(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetMinorUnit ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinorUnit ( double pval ) {
    HRESULT _hr = put_MinorUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetMinorUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MinorUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinorUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_MinorUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetReversePlotOrder ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ReversePlotOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutReversePlotOrder ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_ReversePlotOrder(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlScaleType IMsoAxis::GetScaleType ( ) {
    enum XlScaleType _result;
    HRESULT _hr = get_ScaleType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutScaleType ( enum XlScaleType pval ) {
    HRESULT _hr = put_ScaleType(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoAxis::Select ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum XlTickLabelPosition IMsoAxis::GetTickLabelPosition ( ) {
    enum XlTickLabelPosition _result;
    HRESULT _hr = get_TickLabelPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutTickLabelPosition ( enum XlTickLabelPosition pval ) {
    HRESULT _hr = put_TickLabelPosition(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoTickLabelsPtr IMsoAxis::GetTickLabels ( ) {
    struct IMsoTickLabels * _result = 0;
    HRESULT _hr = get_TickLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoTickLabelsPtr(_result, false);
}

int IMsoAxis::GetTickLabelSpacing ( ) {
    int _result = 0;
    HRESULT _hr = get_TickLabelSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutTickLabelSpacing ( int pval ) {
    HRESULT _hr = put_TickLabelSpacing(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoAxis::GetTickMarkSpacing ( ) {
    int _result = 0;
    HRESULT _hr = get_TickMarkSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutTickMarkSpacing ( int pval ) {
    HRESULT _hr = put_TickMarkSpacing(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlAxisType IMsoAxis::GetType ( ) {
    enum XlAxisType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutType ( enum XlAxisType pval ) {
    HRESULT _hr = put_Type(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlTimeUnit IMsoAxis::GetBaseUnit ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_BaseUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutBaseUnit ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_BaseUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetBaseUnitIsAuto ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BaseUnitIsAuto(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutBaseUnitIsAuto ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_BaseUnitIsAuto(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlTimeUnit IMsoAxis::GetMajorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MajorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMajorUnitScale ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_MajorUnitScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlTimeUnit IMsoAxis::GetMinorUnitScale ( ) {
    enum XlTimeUnit _result;
    HRESULT _hr = get_MinorUnitScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutMinorUnitScale ( enum XlTimeUnit pval ) {
    HRESULT _hr = put_MinorUnitScale(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlCategoryType IMsoAxis::GetCategoryType ( ) {
    enum XlCategoryType _result;
    HRESULT _hr = get_CategoryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutCategoryType ( enum XlCategoryType pval ) {
    HRESULT _hr = put_CategoryType(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetLeft ( ) {
    double _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoAxis::GetTop ( ) {
    double _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoAxis::GetWidth ( ) {
    double _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

double IMsoAxis::GetHeight ( ) {
    double _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum XlDisplayUnit IMsoAxis::GetDisplayUnit ( ) {
    enum XlDisplayUnit _result;
    HRESULT _hr = get_DisplayUnit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutDisplayUnit ( enum XlDisplayUnit pval ) {
    HRESULT _hr = put_DisplayUnit(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

double IMsoAxis::GetDisplayUnitCustom ( ) {
    double _result = 0;
    HRESULT _hr = get_DisplayUnitCustom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutDisplayUnitCustom ( double pval ) {
    HRESULT _hr = put_DisplayUnitCustom(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoAxis::GetHasDisplayUnitLabel ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoAxis::PutHasDisplayUnitLabel ( VARIANT_BOOL pval ) {
    HRESULT _hr = put_HasDisplayUnitLabel(pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoDisplayUnitLabelPtr IMsoAxis::GetDisplayUnitLabel ( ) {
    struct IMsoDisplayUnitLabel * _result = 0;
    HRESULT _hr = get_DisplayUnitLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDisplayUnitLabelPtr(_result, false);
}

IMsoBorderPtr IMsoAxis::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

_bstr_t IMsoAxis::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IMsoChartFormatPtr IMsoAxis::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoAxis::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoAxis::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoAxis::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface Axes wrapper method implementations
//

long Axes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoAxisPtr Axes::GetItem ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct IMsoAxis * _result = 0;
    HRESULT _hr = get_Item(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisPtr(_result, false);
}

IUnknownPtr Axes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr Axes::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long Axes::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoAxisPtr Axes::Get_Default ( enum XlAxisType Type, enum XlAxisGroup AxisGroup ) {
    struct IMsoAxis * _result = 0;
    HRESULT _hr = get__Default(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoAxisPtr(_result, false);
}

IDispatchPtr Axes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMsoDropLines wrapper method implementations
//

_bstr_t IMsoDropLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IMsoDropLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IMsoDropLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoBorderPtr IMsoDropLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

HRESULT IMsoDropLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoChartFormatPtr IMsoDropLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoDropLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoDropLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoHiLoLines wrapper method implementations
//

IDispatchPtr IMsoHiLoLines::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoHiLoLines::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT IMsoHiLoLines::Select ( ) {
    HRESULT _hr = raw_Select();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoBorderPtr IMsoHiLoLines::GetBorder ( ) {
    struct IMsoBorder * _result = 0;
    HRESULT _hr = get_Border(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoBorderPtr(_result, false);
}

HRESULT IMsoHiLoLines::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoChartFormatPtr IMsoHiLoLines::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

IDispatchPtr IMsoHiLoLines::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoHiLoLines::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IMsoChartGroup wrapper method implementations
//

void IMsoChartGroup::PutAxisGroup ( int piGroup ) {
    HRESULT _hr = put_AxisGroup(piGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetAxisGroup ( ) {
    int _result = 0;
    HRESULT _hr = get_AxisGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutDoughnutHoleSize ( int pDoughnutHoleSize ) {
    HRESULT _hr = put_DoughnutHoleSize(pDoughnutHoleSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetDoughnutHoleSize ( ) {
    int _result = 0;
    HRESULT _hr = get_DoughnutHoleSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoDownBarsPtr IMsoChartGroup::GetDownBars ( ) {
    struct IMsoDownBars * _result = 0;
    HRESULT _hr = get_DownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDownBarsPtr(_result, false);
}

IMsoDropLinesPtr IMsoChartGroup::GetDropLines ( ) {
    struct IMsoDropLines * _result = 0;
    HRESULT _hr = get_DropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDropLinesPtr(_result, false);
}

void IMsoChartGroup::PutFirstSliceAngle ( int pFirstSliceAngle ) {
    HRESULT _hr = put_FirstSliceAngle(pFirstSliceAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetFirstSliceAngle ( ) {
    int _result = 0;
    HRESULT _hr = get_FirstSliceAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutGapWidth ( int pGapWidth ) {
    HRESULT _hr = put_GapWidth(pGapWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetGapWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_GapWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHasDropLines ( VARIANT_BOOL pfHasDropLines ) {
    HRESULT _hr = put_HasDropLines(pfHasDropLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHasDropLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDropLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHasHiLoLines ( VARIANT_BOOL pfHasHiLoLines ) {
    HRESULT _hr = put_HasHiLoLines(pfHasHiLoLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHasHiLoLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHasRadarAxisLabels ( VARIANT_BOOL pfHasRadarAxisLabels ) {
    HRESULT _hr = put_HasRadarAxisLabels(pfHasRadarAxisLabels);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHasRadarAxisLabels ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasRadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHasSeriesLines ( VARIANT_BOOL pfHasSeriesLines ) {
    HRESULT _hr = put_HasSeriesLines(pfHasSeriesLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHasSeriesLines ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasSeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHasUpDownBars ( VARIANT_BOOL pfHasUpDownBars ) {
    HRESULT _hr = put_HasUpDownBars(pfHasUpDownBars);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHasUpDownBars ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasUpDownBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoHiLoLinesPtr IMsoChartGroup::GetHiLoLines ( ) {
    struct IMsoHiLoLines * _result = 0;
    HRESULT _hr = get_HiLoLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoHiLoLinesPtr(_result, false);
}

int IMsoChartGroup::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutOverlap ( int pOverlap ) {
    HRESULT _hr = put_Overlap(pOverlap);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetOverlap ( ) {
    int _result = 0;
    HRESULT _hr = get_Overlap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoChartGroup::GetRadarAxisLabels ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_RadarAxisLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChartGroup::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoSeriesLinesPtr IMsoChartGroup::GetSeriesLines ( ) {
    struct IMsoSeriesLines * _result = 0;
    HRESULT _hr = get_SeriesLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesLinesPtr(_result, false);
}

void IMsoChartGroup::PutSubType ( int pSubType ) {
    HRESULT _hr = put_SubType(pSubType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetSubType ( ) {
    int _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutType ( int ptype ) {
    HRESULT _hr = put_Type(ptype);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetType ( ) {
    int _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoUpBarsPtr IMsoChartGroup::GetUpBars ( ) {
    struct IMsoUpBars * _result = 0;
    HRESULT _hr = get_UpBars(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoUpBarsPtr(_result, false);
}

void IMsoChartGroup::PutVaryByCategories ( VARIANT_BOOL pfVaryByCategories ) {
    HRESULT _hr = put_VaryByCategories(pfVaryByCategories);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetVaryByCategories ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_VaryByCategories(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum XlSizeRepresents IMsoChartGroup::GetSizeRepresents ( ) {
    enum XlSizeRepresents _result;
    HRESULT _hr = get_SizeRepresents(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutSizeRepresents ( enum XlSizeRepresents pXlSizeRepresents ) {
    HRESULT _hr = put_SizeRepresents(pXlSizeRepresents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChartGroup::PutBubbleScale ( int pbubblescale ) {
    HRESULT _hr = put_BubbleScale(pbubblescale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetBubbleScale ( ) {
    int _result = 0;
    HRESULT _hr = get_BubbleScale(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutShowNegativeBubbles ( VARIANT_BOOL pfShowNegativeBubbles ) {
    HRESULT _hr = put_ShowNegativeBubbles(pfShowNegativeBubbles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetShowNegativeBubbles ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowNegativeBubbles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutSplitType ( enum XlChartSplitType pChartSplitType ) {
    HRESULT _hr = put_SplitType(pChartSplitType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlChartSplitType IMsoChartGroup::GetSplitType ( ) {
    enum XlChartSplitType _result;
    HRESULT _hr = get_SplitType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t IMsoChartGroup::GetSplitValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SplitValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChartGroup::PutSplitValue ( const _variant_t & pSplitValue ) {
    HRESULT _hr = put_SplitValue(pSplitValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChartGroup::GetSecondPlotSize ( ) {
    int _result = 0;
    HRESULT _hr = get_SecondPlotSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutSecondPlotSize ( int pSecondPlotSize ) {
    HRESULT _hr = put_SecondPlotSize(pSecondPlotSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChartGroup::GetHas3DShading ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Has3DShading(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChartGroup::PutHas3DShading ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_Has3DShading(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoChartGroup::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoChartGroup::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IDispatchPtr IMsoChartGroup::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChartGroup::CategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChartGroup::FullCategoryCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullCategoryCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface ChartGroups wrapper method implementations
//

IDispatchPtr ChartGroups::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartGroupPtr ChartGroups::Item ( const _variant_t & Index ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IUnknownPtr ChartGroups::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr ChartGroups::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long ChartGroups::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface FullSeriesCollection wrapper method implementations
//

IDispatchPtr FullSeriesCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long FullSeriesCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoSeriesPtr FullSeriesCollection::Item ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

IUnknownPtr FullSeriesCollection::_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = raw__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr FullSeriesCollection::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long FullSeriesCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoSeriesPtr FullSeriesCollection::Get_Default ( const _variant_t & Index ) {
    struct IMsoSeries * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoSeriesPtr(_result, false);
}

//
// interface IMsoCategory wrapper method implementations
//

IDispatchPtr IMsoCategory::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t IMsoCategory::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

VARIANT_BOOL IMsoCategory::GetIsFiltered ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsFiltered(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoCategory::PutIsFiltered ( VARIANT_BOOL pfIsFiltered ) {
    HRESULT _hr = put_IsFiltered(pfIsFiltered);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface CategoryCollection wrapper method implementations
//

IDispatchPtr CategoryCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long CategoryCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoCategoryPtr CategoryCollection::Item ( const _variant_t & Index ) {
    struct IMsoCategory * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCategoryPtr(_result, false);
}

IDispatchPtr CategoryCollection::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long CategoryCollection::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoCategoryPtr CategoryCollection::Get_Default ( const _variant_t & Index ) {
    struct IMsoCategory * _result = 0;
    HRESULT _hr = get__Default(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCategoryPtr(_result, false);
}

//
// interface _CommandBars wrapper method implementations
//

CommandBarControlPtr _CommandBars::GetActionControl ( ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = get_ActionControl(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

CommandBarPtr _CommandBars::GetActiveMenuBar ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_ActiveMenuBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

CommandBarPtr _CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = raw_Add(Name, Position, MenuBar, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

int _CommandBars::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _CommandBars::GetDisplayTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutDisplayTooltips ( VARIANT_BOOL pvarfDisplayTooltips ) {
    HRESULT _hr = put_DisplayTooltips(pvarfDisplayTooltips);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _CommandBars::GetDisplayKeysInTooltips ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayKeysInTooltips(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutDisplayKeysInTooltips ( VARIANT_BOOL pvarfDisplayKeys ) {
    HRESULT _hr = put_DisplayKeysInTooltips(pvarfDisplayKeys);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CommandBarControlPtr _CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

CommandBarPtr _CommandBars::GetItem ( const _variant_t & Index ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

VARIANT_BOOL _CommandBars::GetLargeButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_LargeButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutLargeButtons ( VARIANT_BOOL pvarfLargeButtons ) {
    HRESULT _hr = put_LargeButtons(pvarfLargeButtons);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoMenuAnimation _CommandBars::GetMenuAnimationStyle ( ) {
    enum MsoMenuAnimation _result;
    HRESULT _hr = get_MenuAnimationStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutMenuAnimationStyle ( enum MsoMenuAnimation pma ) {
    HRESULT _hr = put_MenuAnimationStyle(pma);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr _CommandBars::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

IDispatchPtr _CommandBars::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT _CommandBars::ReleaseFocus ( ) {
    HRESULT _hr = raw_ReleaseFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _CommandBars::GetIdsString ( int ids, BSTR * pbstrName ) {
    int _result = 0;
    HRESULT _hr = get_IdsString(ids, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _CommandBars::GetTmcGetName ( int tmc, BSTR * pbstrName ) {
    int _result = 0;
    HRESULT _hr = get_TmcGetName(tmc, pbstrName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _CommandBars::GetAdaptiveMenus ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdaptiveMenus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutAdaptiveMenus ( VARIANT_BOOL pvarfAdaptiveMenus ) {
    HRESULT _hr = put_AdaptiveMenus(pvarfAdaptiveMenus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CommandBarControlsPtr _CommandBars::FindControls ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = raw_FindControls(Type, Id, Tag, Visible, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

CommandBarPtr _CommandBars::AddEx ( const _variant_t & TbidOrName, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary, const _variant_t & TbtrProtection ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = raw_AddEx(TbidOrName, Position, MenuBar, Temporary, TbtrProtection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

VARIANT_BOOL _CommandBars::GetDisplayFonts ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisplayFonts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutDisplayFonts ( VARIANT_BOOL pvarfDisplayFonts ) {
    HRESULT _hr = put_DisplayFonts(pvarfDisplayFonts);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _CommandBars::GetDisableCustomize ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableCustomize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutDisableCustomize ( VARIANT_BOOL pvarfDisableCustomize ) {
    HRESULT _hr = put_DisableCustomize(pvarfDisableCustomize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL _CommandBars::GetDisableAskAQuestionDropdown ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_DisableAskAQuestionDropdown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBars::PutDisableAskAQuestionDropdown ( VARIANT_BOOL pvarfDisableAskAQuestionDropdown ) {
    HRESULT _hr = put_DisableAskAQuestionDropdown(pvarfDisableAskAQuestionDropdown);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _CommandBars::ExecuteMso ( _bstr_t idMso ) {
    HRESULT _hr = raw_ExecuteMso(idMso);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _CommandBars::GetEnabledMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetEnabledMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _CommandBars::GetVisibleMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetVisibleMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _CommandBars::GetPressedMso ( _bstr_t idMso ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetPressedMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t _CommandBars::GetLabelMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetLabelMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _CommandBars::GetScreentipMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetScreentipMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _CommandBars::GetSupertipMso ( _bstr_t idMso ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetSupertipMso(idMso, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

IPictureDisp * _CommandBars::GetImageMso ( _bstr_t idMso, int Width, int Height ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = raw_GetImageMso(idMso, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT _CommandBars::CommitRenderingTransaction ( long hwnd ) {
    HRESULT _hr = raw_CommitRenderingTransaction(hwnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CommandBar wrapper method implementations
//

VARIANT_BOOL CommandBar::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t CommandBar::GetContext ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Context(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBar::PutContext ( _bstr_t pbstrContext ) {
    HRESULT _hr = put_Context(pbstrContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CommandBarControlsPtr CommandBar::GetControls ( ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

HRESULT CommandBar::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL CommandBar::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CommandBarControlPtr CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_FindControl(Type, Id, Tag, Visible, Recursive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

int CommandBar::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBar::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long CommandBar::GetInstanceId ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int CommandBar::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutLeft ( int pxpLeft ) {
    HRESULT _hr = put_Left(pxpLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CommandBar::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBar::PutName ( _bstr_t pbstrName ) {
    HRESULT _hr = put_Name(pbstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CommandBar::GetNameLocal ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NameLocal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBar::PutNameLocal ( _bstr_t pbstrNameLocal ) {
    HRESULT _hr = put_NameLocal(pbstrNameLocal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr CommandBar::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

enum MsoBarPosition CommandBar::GetPosition ( ) {
    enum MsoBarPosition _result;
    HRESULT _hr = get_Position(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutPosition ( enum MsoBarPosition ppos ) {
    HRESULT _hr = put_Position(ppos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBar::GetRowIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_RowIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutRowIndex ( int piRow ) {
    HRESULT _hr = put_RowIndex(piRow);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBarProtection CommandBar::GetProtection ( ) {
    enum MsoBarProtection _result;
    HRESULT _hr = get_Protection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutProtection ( enum MsoBarProtection pprot ) {
    HRESULT _hr = put_Protection(pprot);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT CommandBar::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y ) {
    HRESULT _hr = raw_ShowPopup(x, y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int CommandBar::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutTop ( int pypTop ) {
    HRESULT _hr = put_Top(pypTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBarType CommandBar::GetType ( ) {
    enum MsoBarType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL CommandBar::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBar::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL CommandBar::GetAdaptiveMenu ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AdaptiveMenu(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBar::PutAdaptiveMenu ( VARIANT_BOOL pvarfAdaptiveMenu ) {
    HRESULT _hr = put_AdaptiveMenu(pvarfAdaptiveMenu);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBar::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t CommandBar::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface CommandBarControl wrapper method implementations
//

VARIANT_BOOL CommandBarControl::GetBeginGroup ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BeginGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutBeginGroup ( VARIANT_BOOL pvarfBeginGroup ) {
    HRESULT _hr = put_BeginGroup(pvarfBeginGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL CommandBarControl::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t CommandBarControl::GetCaption ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Caption(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutCaption ( _bstr_t pbstrCaption ) {
    HRESULT _hr = put_Caption(pbstrCaption);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr CommandBarControl::GetControl ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Control(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

CommandBarControlPtr CommandBarControl::Copy ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Copy(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

HRESULT CommandBarControl::Delete ( const _variant_t & Temporary ) {
    HRESULT _hr = raw_Delete(Temporary);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t CommandBarControl::GetDescriptionText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DescriptionText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutDescriptionText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_DescriptionText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL CommandBarControl::GetEnabled ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Enabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutEnabled ( VARIANT_BOOL pvarfEnabled ) {
    HRESULT _hr = put_Enabled(pvarfEnabled);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT CommandBarControl::Execute ( ) {
    HRESULT _hr = raw_Execute();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int CommandBarControl::GetHeight ( ) {
    int _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutHeight ( int pdy ) {
    HRESULT _hr = put_Height(pdy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBarControl::GetHelpContextId ( ) {
    int _result = 0;
    HRESULT _hr = get_HelpContextId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutHelpContextId ( int pid ) {
    HRESULT _hr = put_HelpContextId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CommandBarControl::GetHelpFile ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HelpFile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutHelpFile ( _bstr_t pbstrFilename ) {
    HRESULT _hr = put_HelpFile(pbstrFilename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBarControl::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int CommandBarControl::GetIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_Index(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

long CommandBarControl::GetInstanceId ( ) {
    long _result = 0;
    HRESULT _hr = get_InstanceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CommandBarControlPtr CommandBarControl::Move ( const _variant_t & Bar, const _variant_t & Before ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Move(Bar, Before, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

int CommandBarControl::GetLeft ( ) {
    int _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoControlOLEUsage CommandBarControl::GetOLEUsage ( ) {
    enum MsoControlOLEUsage _result;
    HRESULT _hr = get_OLEUsage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutOLEUsage ( enum MsoControlOLEUsage pcou ) {
    HRESULT _hr = put_OLEUsage(pcou);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CommandBarControl::GetOnAction ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_OnAction(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutOnAction ( _bstr_t pbstrOnAction ) {
    HRESULT _hr = put_OnAction(pbstrOnAction);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CommandBarPtr CommandBarControl::GetParent ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

_bstr_t CommandBarControl::GetParameter ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Parameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutParameter ( _bstr_t pbstrParam ) {
    HRESULT _hr = put_Parameter(pbstrParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBarControl::GetPriority ( ) {
    int _result = 0;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutPriority ( int pnPri ) {
    HRESULT _hr = put_Priority(pnPri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT CommandBarControl::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::SetFocus ( ) {
    HRESULT _hr = raw_SetFocus();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t CommandBarControl::GetTag ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutTag ( _bstr_t pbstrTag ) {
    HRESULT _hr = put_Tag(pbstrTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CommandBarControl::GetTooltipText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TooltipText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CommandBarControl::PutTooltipText ( _bstr_t pbstrTooltip ) {
    HRESULT _hr = put_TooltipText(pbstrTooltip);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBarControl::GetTop ( ) {
    int _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoControlType CommandBarControl::GetType ( ) {
    enum MsoControlType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL CommandBarControl::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutVisible ( VARIANT_BOOL pvarfVisible ) {
    HRESULT _hr = put_Visible(pvarfVisible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int CommandBarControl::GetWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarControl::PutWidth ( int pdx ) {
    HRESULT _hr = put_Width(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL CommandBarControl::GetIsPriorityDropped ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPriorityDropped(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT CommandBarControl::Reserved1 ( ) {
    HRESULT _hr = raw_Reserved1();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved2 ( ) {
    HRESULT _hr = raw_Reserved2();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved3 ( ) {
    HRESULT _hr = raw_Reserved3();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved4 ( ) {
    HRESULT _hr = raw_Reserved4();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved5 ( ) {
    HRESULT _hr = raw_Reserved5();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved6 ( ) {
    HRESULT _hr = raw_Reserved6();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CommandBarControl::Reserved7 ( ) {
    HRESULT _hr = raw_Reserved7();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface CommandBarControls wrapper method implementations
//

CommandBarControlPtr CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Parameter, const _variant_t & Before, const _variant_t & Temporary ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = raw_Add(Type, Id, Parameter, Before, Temporary, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

int CommandBarControls::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CommandBarControlPtr CommandBarControls::GetItem ( const _variant_t & Index ) {
    struct CommandBarControl * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlPtr(_result, false);
}

IUnknownPtr CommandBarControls::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

CommandBarPtr CommandBarControls::GetParent ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

//
// interface _CommandBarButton wrapper method implementations
//

VARIANT_BOOL _CommandBarButton::GetBuiltInFace ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltInFace(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutBuiltInFace ( VARIANT_BOOL pvarfBuiltIn ) {
    HRESULT _hr = put_BuiltInFace(pvarfBuiltIn);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _CommandBarButton::CopyFace ( ) {
    HRESULT _hr = raw_CopyFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _CommandBarButton::GetFaceId ( ) {
    int _result = 0;
    HRESULT _hr = get_FaceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutFaceId ( int pid ) {
    HRESULT _hr = put_FaceId(pid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _CommandBarButton::PasteFace ( ) {
    HRESULT _hr = raw_PasteFace();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t _CommandBarButton::GetShortcutText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ShortcutText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _CommandBarButton::PutShortcutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_ShortcutText(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoButtonState _CommandBarButton::GetState ( ) {
    enum MsoButtonState _result;
    HRESULT _hr = get_State(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutState ( enum MsoButtonState pstate ) {
    HRESULT _hr = put_State(pstate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoButtonStyle _CommandBarButton::GetStyle ( ) {
    enum MsoButtonStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutStyle ( enum MsoButtonStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoCommandBarButtonHyperlinkType _CommandBarButton::GetHyperlinkType ( ) {
    enum MsoCommandBarButtonHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutHyperlinkType ( enum MsoCommandBarButtonHyperlinkType phlType ) {
    HRESULT _hr = put_HyperlinkType(phlType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * _CommandBarButton::GetPicture ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Picture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutPicture ( IPictureDisp * ppdispPicture ) {
    HRESULT _hr = put_Picture(ppdispPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IPictureDisp * _CommandBarButton::GetMask ( ) {
    IPictureDisp * _result = 0;
    HRESULT _hr = get_Mask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarButton::PutMask ( IPictureDisp * ppipictdispMask ) {
    HRESULT _hr = put_Mask(ppipictdispMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _CommandBarButton::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface CommandBarPopup wrapper method implementations
//

CommandBarPtr CommandBarPopup::GetCommandBar ( ) {
    struct CommandBar * _result = 0;
    HRESULT _hr = get_CommandBar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarPtr(_result, false);
}

CommandBarControlsPtr CommandBarPopup::GetControls ( ) {
    struct CommandBarControls * _result = 0;
    HRESULT _hr = get_Controls(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CommandBarControlsPtr(_result, false);
}

enum MsoOLEMenuGroup CommandBarPopup::GetOLEMenuGroup ( ) {
    enum MsoOLEMenuGroup _result;
    HRESULT _hr = get_OLEMenuGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void CommandBarPopup::PutOLEMenuGroup ( enum MsoOLEMenuGroup pomg ) {
    HRESULT _hr = put_OLEMenuGroup(pomg);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t CommandBarPopup::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface _CommandBarComboBox wrapper method implementations
//

HRESULT _CommandBarComboBox::AddItem ( _bstr_t Text, const _variant_t & Index ) {
    HRESULT _hr = raw_AddItem(Text, Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _CommandBarComboBox::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int _CommandBarComboBox::GetDropDownLines ( ) {
    int _result = 0;
    HRESULT _hr = get_DropDownLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarComboBox::PutDropDownLines ( int pcLines ) {
    HRESULT _hr = put_DropDownLines(pcLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _CommandBarComboBox::GetDropDownWidth ( ) {
    int _result = 0;
    HRESULT _hr = get_DropDownWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarComboBox::PutDropDownWidth ( int pdx ) {
    HRESULT _hr = put_DropDownWidth(pdx);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _CommandBarComboBox::GetList ( int Index ) {
    BSTR _result = 0;
    HRESULT _hr = get_List(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _CommandBarComboBox::PutList ( int Index, _bstr_t pbstrItem ) {
    HRESULT _hr = put_List(Index, pbstrItem);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _CommandBarComboBox::GetListCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ListCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

int _CommandBarComboBox::GetListHeaderCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ListHeaderCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarComboBox::PutListHeaderCount ( int pcItems ) {
    HRESULT _hr = put_ListHeaderCount(pcItems);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int _CommandBarComboBox::GetListIndex ( ) {
    int _result = 0;
    HRESULT _hr = get_ListIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarComboBox::PutListIndex ( int pi ) {
    HRESULT _hr = put_ListIndex(pi);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT _CommandBarComboBox::RemoveItem ( int Index ) {
    HRESULT _hr = raw_RemoveItem(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoComboStyle _CommandBarComboBox::GetStyle ( ) {
    enum MsoComboStyle _result;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void _CommandBarComboBox::PutStyle ( enum MsoComboStyle pstyle ) {
    HRESULT _hr = put_Style(pstyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t _CommandBarComboBox::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _CommandBarComboBox::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _CommandBarComboBox::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface _CommandBarActiveX wrapper method implementations
//

_bstr_t _CommandBarActiveX::GetControlCLSID ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ControlCLSID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void _CommandBarActiveX::PutControlCLSID ( _bstr_t pbstrClsid ) {
    HRESULT _hr = put_ControlCLSID(pbstrClsid);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IUnknownPtr _CommandBarActiveX::GetQueryControlInterface ( _bstr_t bstrIid ) {
    IUnknown * _result = 0;
    HRESULT _hr = get_QueryControlInterface(bstrIid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT _CommandBarActiveX::SetInnerObjectFactory ( IUnknown * pUnk ) {
    HRESULT _hr = raw_SetInnerObjectFactory(pUnk);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _CommandBarActiveX::EnsureControl ( ) {
    HRESULT _hr = raw_EnsureControl();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void _CommandBarActiveX::PutInitWith ( IUnknown * _arg1 ) {
    HRESULT _hr = put_InitWith(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t _CommandBarActiveX::GetInstanceIdPtr ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_InstanceIdPtr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ConnectorFormat wrapper method implementations
//

IDispatchPtr ConnectorFormat::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT ConnectorFormat::BeginConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_BeginConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ConnectorFormat::BeginDisconnect ( ) {
    HRESULT _hr = raw_BeginDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ConnectorFormat::EndConnect ( struct Shape * ConnectedShape, int ConnectionSite ) {
    HRESULT _hr = raw_EndConnect(ConnectedShape, ConnectionSite);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ConnectorFormat::EndDisconnect ( ) {
    HRESULT _hr = raw_EndDisconnect();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTriState ConnectorFormat::GetBeginConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_BeginConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr ConnectorFormat::GetBeginConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_BeginConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

int ConnectorFormat::GetBeginConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_BeginConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState ConnectorFormat::GetEndConnected ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_EndConnected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr ConnectorFormat::GetEndConnectedShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_EndConnectedShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

int ConnectorFormat::GetEndConnectionSite ( ) {
    int _result = 0;
    HRESULT _hr = get_EndConnectionSite(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoConnectorType ConnectorFormat::GetType ( ) {
    enum MsoConnectorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ConnectorFormat::PutType ( enum MsoConnectorType Type ) {
    HRESULT _hr = put_Type(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface FreeformBuilder wrapper method implementations
//

IDispatchPtr FreeformBuilder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT FreeformBuilder::AddNodes ( enum MsoSegmentType SegmentType, enum MsoEditingType EditingType, float X1, float Y1, float X2, float Y2, float X3, float Y3 ) {
    HRESULT _hr = raw_AddNodes(SegmentType, EditingType, X1, Y1, X2, Y2, X3, Y3);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr FreeformBuilder::ConvertToShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_ConvertToShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface GroupShapes wrapper method implementations
//

IDispatchPtr GroupShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int GroupShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr GroupShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

IUnknownPtr GroupShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

ShapeRangePtr GroupShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

//
// interface Shape wrapper method implementations
//

IDispatchPtr Shape::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT Shape::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr Shape::Duplicate ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

HRESULT Shape::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapeRangePtr Shape::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

HRESULT Shape::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

AdjustmentsPtr Shape::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

enum MsoAutoShapeType Shape::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBlackWhiteMode Shape::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CalloutFormatPtr Shape::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

int Shape::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState Shape::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ConnectorFormatPtr Shape::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

FillFormatPtr Shape::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

GroupShapesPtr Shape::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

float Shape::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Shape::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float Shape::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

LineFormatPtr Shape::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

enum MsoTriState Shape::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t Shape::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Shape::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ShapeNodesPtr Shape::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

float Shape::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

PictureFormatPtr Shape::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

ShadowFormatPtr Shape::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

TextEffectFormatPtr Shape::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

TextFramePtr Shape::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

ThreeDFormatPtr Shape::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

float Shape::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoShapeType Shape::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState Shape::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t Shape::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoTriState Shape::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float Shape::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int Shape::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ScriptPtr Shape::GetScript ( ) {
    struct Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

_bstr_t Shape::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Shape::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState Shape::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoDiagramPtr Shape::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

enum MsoTriState Shape::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DiagramNodePtr Shape::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

enum MsoTriState Shape::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr Shape::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

CanvasShapesPtr Shape::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

int Shape::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT Shape::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void Shape::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

TextFrame2Ptr Shape::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

HRESULT Shape::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT Shape::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTriState Shape::GetHasChart ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartPtr Shape::GetChart ( ) {
    struct IMsoChart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartPtr(_result, false);
}

enum MsoShapeStyleIndex Shape::GetShapeStyle ( ) {
    enum MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutShapeStyle ( enum MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBackgroundStyleIndex Shape::GetBackgroundStyle ( ) {
    enum MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void Shape::PutBackgroundStyle ( enum MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SoftEdgeFormatPtr Shape::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

GlowFormatPtr Shape::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

ReflectionFormatPtr Shape::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

enum MsoTriState Shape::GetHasSmartArt ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasSmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SmartArtPtr Shape::GetSmartArt ( ) {
    struct SmartArt * _result = 0;
    HRESULT _hr = get_SmartArt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtPtr(_result, false);
}

HRESULT Shape::ConvertTextToSmartArt ( struct SmartArtLayout * Layout ) {
    HRESULT _hr = raw_ConvertTextToSmartArt(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_bstr_t Shape::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void Shape::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ShapeRange wrapper method implementations
//

IDispatchPtr ShapeRange::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int ShapeRange::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr ShapeRange::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

IUnknownPtr ShapeRange::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

HRESULT ShapeRange::Align ( enum MsoAlignCmd AlignCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Align(AlignCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::Apply ( ) {
    HRESULT _hr = raw_Apply();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::Distribute ( enum MsoDistributeCmd DistributeCmd, enum MsoTriState RelativeTo ) {
    HRESULT _hr = raw_Distribute(DistributeCmd, RelativeTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapeRangePtr ShapeRange::Duplicate ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Duplicate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

HRESULT ShapeRange::Flip ( enum MsoFlipCmd FlipCmd ) {
    HRESULT _hr = raw_Flip(FlipCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::IncrementLeft ( float Increment ) {
    HRESULT _hr = raw_IncrementLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::IncrementRotation ( float Increment ) {
    HRESULT _hr = raw_IncrementRotation(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::IncrementTop ( float Increment ) {
    HRESULT _hr = raw_IncrementTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr ShapeRange::Group ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Group(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

HRESULT ShapeRange::PickUp ( ) {
    HRESULT _hr = raw_PickUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr ShapeRange::Regroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Regroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

HRESULT ShapeRange::RerouteConnections ( ) {
    HRESULT _hr = raw_RerouteConnections();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::ScaleHeight ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleHeight(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::ScaleWidth ( float Factor, enum MsoTriState RelativeToOriginalSize, enum MsoScaleFrom fScale ) {
    HRESULT _hr = raw_ScaleWidth(Factor, RelativeToOriginalSize, fScale);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::Select ( const _variant_t & Replace ) {
    HRESULT _hr = raw_Select(Replace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::SetShapesDefaultProperties ( ) {
    HRESULT _hr = raw_SetShapesDefaultProperties();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapeRangePtr ShapeRange::Ungroup ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Ungroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

HRESULT ShapeRange::ZOrder ( enum MsoZOrderCmd ZOrderCmd ) {
    HRESULT _hr = raw_ZOrder(ZOrderCmd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

AdjustmentsPtr ShapeRange::GetAdjustments ( ) {
    struct Adjustments * _result = 0;
    HRESULT _hr = get_Adjustments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return AdjustmentsPtr(_result, false);
}

enum MsoAutoShapeType ShapeRange::GetAutoShapeType ( ) {
    enum MsoAutoShapeType _result;
    HRESULT _hr = get_AutoShapeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutAutoShapeType ( enum MsoAutoShapeType AutoShapeType ) {
    HRESULT _hr = put_AutoShapeType(AutoShapeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBlackWhiteMode ShapeRange::GetBlackWhiteMode ( ) {
    enum MsoBlackWhiteMode _result;
    HRESULT _hr = get_BlackWhiteMode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutBlackWhiteMode ( enum MsoBlackWhiteMode BlackWhiteMode ) {
    HRESULT _hr = put_BlackWhiteMode(BlackWhiteMode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CalloutFormatPtr ShapeRange::GetCallout ( ) {
    struct CalloutFormat * _result = 0;
    HRESULT _hr = get_Callout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CalloutFormatPtr(_result, false);
}

int ShapeRange::GetConnectionSiteCount ( ) {
    int _result = 0;
    HRESULT _hr = get_ConnectionSiteCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState ShapeRange::GetConnector ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Connector(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ConnectorFormatPtr ShapeRange::GetConnectorFormat ( ) {
    struct ConnectorFormat * _result = 0;
    HRESULT _hr = get_ConnectorFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ConnectorFormatPtr(_result, false);
}

FillFormatPtr ShapeRange::GetFill ( ) {
    struct FillFormat * _result = 0;
    HRESULT _hr = get_Fill(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FillFormatPtr(_result, false);
}

GroupShapesPtr ShapeRange::GetGroupItems ( ) {
    struct GroupShapes * _result = 0;
    HRESULT _hr = get_GroupItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GroupShapesPtr(_result, false);
}

float ShapeRange::GetHeight ( ) {
    float _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutHeight ( float Height ) {
    HRESULT _hr = put_Height(Height);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ShapeRange::GetHorizontalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HorizontalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

float ShapeRange::GetLeft ( ) {
    float _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutLeft ( float Left ) {
    HRESULT _hr = put_Left(Left);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

LineFormatPtr ShapeRange::GetLine ( ) {
    struct LineFormat * _result = 0;
    HRESULT _hr = get_Line(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return LineFormatPtr(_result, false);
}

enum MsoTriState ShapeRange::GetLockAspectRatio ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_LockAspectRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutLockAspectRatio ( enum MsoTriState LockAspectRatio ) {
    HRESULT _hr = put_LockAspectRatio(LockAspectRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t ShapeRange::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ShapeRange::PutName ( _bstr_t Name ) {
    HRESULT _hr = put_Name(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ShapeNodesPtr ShapeRange::GetNodes ( ) {
    struct ShapeNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeNodesPtr(_result, false);
}

float ShapeRange::GetRotation ( ) {
    float _result = 0;
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutRotation ( float Rotation ) {
    HRESULT _hr = put_Rotation(Rotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

PictureFormatPtr ShapeRange::GetPictureFormat ( ) {
    struct PictureFormat * _result = 0;
    HRESULT _hr = get_PictureFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PictureFormatPtr(_result, false);
}

ShadowFormatPtr ShapeRange::GetShadow ( ) {
    struct ShadowFormat * _result = 0;
    HRESULT _hr = get_Shadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShadowFormatPtr(_result, false);
}

TextEffectFormatPtr ShapeRange::GetTextEffect ( ) {
    struct TextEffectFormat * _result = 0;
    HRESULT _hr = get_TextEffect(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextEffectFormatPtr(_result, false);
}

TextFramePtr ShapeRange::GetTextFrame ( ) {
    struct TextFrame * _result = 0;
    HRESULT _hr = get_TextFrame(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFramePtr(_result, false);
}

ThreeDFormatPtr ShapeRange::GetThreeD ( ) {
    struct ThreeDFormat * _result = 0;
    HRESULT _hr = get_ThreeD(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ThreeDFormatPtr(_result, false);
}

float ShapeRange::GetTop ( ) {
    float _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutTop ( float Top ) {
    HRESULT _hr = put_Top(Top);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoShapeType ShapeRange::GetType ( ) {
    enum MsoShapeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState ShapeRange::GetVerticalFlip ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_VerticalFlip(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_variant_t ShapeRange::GetVertices ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

enum MsoTriState ShapeRange::GetVisible ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutVisible ( enum MsoTriState Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

float ShapeRange::GetWidth ( ) {
    float _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutWidth ( float Width ) {
    HRESULT _hr = put_Width(Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int ShapeRange::GetZOrderPosition ( ) {
    int _result = 0;
    HRESULT _hr = get_ZOrderPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ScriptPtr ShapeRange::GetScript ( ) {
    struct Script * _result = 0;
    HRESULT _hr = get_Script(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScriptPtr(_result, false);
}

_bstr_t ShapeRange::GetAlternativeText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_AlternativeText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ShapeRange::PutAlternativeText ( _bstr_t AlternativeText ) {
    HRESULT _hr = put_AlternativeText(AlternativeText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState ShapeRange::GetHasDiagram ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoDiagramPtr ShapeRange::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

enum MsoTriState ShapeRange::GetHasDiagramNode ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasDiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DiagramNodePtr ShapeRange::GetDiagramNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_DiagramNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

enum MsoTriState ShapeRange::GetChild ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Child(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr ShapeRange::GetParentGroup ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_ParentGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

CanvasShapesPtr ShapeRange::GetCanvasItems ( ) {
    struct CanvasShapes * _result = 0;
    HRESULT _hr = get_CanvasItems(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CanvasShapesPtr(_result, false);
}

int ShapeRange::GetId ( ) {
    int _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT ShapeRange::CanvasCropLeft ( float Increment ) {
    HRESULT _hr = raw_CanvasCropLeft(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::CanvasCropTop ( float Increment ) {
    HRESULT _hr = raw_CanvasCropTop(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::CanvasCropRight ( float Increment ) {
    HRESULT _hr = raw_CanvasCropRight(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::CanvasCropBottom ( float Increment ) {
    HRESULT _hr = raw_CanvasCropBottom(Increment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void ShapeRange::PutRTF ( _bstr_t _arg1 ) {
    HRESULT _hr = put_RTF(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

TextFrame2Ptr ShapeRange::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

HRESULT ShapeRange::Cut ( ) {
    HRESULT _hr = raw_Cut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT ShapeRange::Copy ( ) {
    HRESULT _hr = raw_Copy();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoTriState ShapeRange::GetHasChart ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_HasChart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartPtr ShapeRange::GetChart ( ) {
    struct IMsoChart * _result = 0;
    HRESULT _hr = get_Chart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartPtr(_result, false);
}

enum MsoShapeStyleIndex ShapeRange::GetShapeStyle ( ) {
    enum MsoShapeStyleIndex _result;
    HRESULT _hr = get_ShapeStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutShapeStyle ( enum MsoShapeStyleIndex ShapeStyle ) {
    HRESULT _hr = put_ShapeStyle(ShapeStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoBackgroundStyleIndex ShapeRange::GetBackgroundStyle ( ) {
    enum MsoBackgroundStyleIndex _result;
    HRESULT _hr = get_BackgroundStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void ShapeRange::PutBackgroundStyle ( enum MsoBackgroundStyleIndex BackgroundStyle ) {
    HRESULT _hr = put_BackgroundStyle(BackgroundStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SoftEdgeFormatPtr ShapeRange::GetSoftEdge ( ) {
    struct SoftEdgeFormat * _result = 0;
    HRESULT _hr = get_SoftEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SoftEdgeFormatPtr(_result, false);
}

GlowFormatPtr ShapeRange::GetGlow ( ) {
    struct GlowFormat * _result = 0;
    HRESULT _hr = get_Glow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return GlowFormatPtr(_result, false);
}

ReflectionFormatPtr ShapeRange::GetReflection ( ) {
    struct ReflectionFormat * _result = 0;
    HRESULT _hr = get_Reflection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ReflectionFormatPtr(_result, false);
}

_bstr_t ShapeRange::GetTitle ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void ShapeRange::PutTitle ( _bstr_t Title ) {
    HRESULT _hr = put_Title(Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT ShapeRange::MergeShapes ( enum MsoMergeCmd MergeCmd, struct Shape * PrimaryShape ) {
    HRESULT _hr = raw_MergeShapes(MergeCmd, PrimaryShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface Shapes wrapper method implementations
//

IDispatchPtr Shapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int Shapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr Shapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

IUnknownPtr Shapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

ShapePtr Shapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

FreeformBuilderPtr Shapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

ShapeRangePtr Shapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

HRESULT Shapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr Shapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::GetDefault ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Default(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddDiagram ( enum MsoDiagramType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddDiagram(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddCanvas ( float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCanvas(Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddChart ( enum XlChartType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddTable ( int NumRows, int NumColumns, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTable(NumRows, NumColumns, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddSmartArt ( struct SmartArtLayout * Layout, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddSmartArt(Layout, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddChart2 ( int Style, enum XlChartType Type, float Left, float Top, float Width, float Height, VARIANT_BOOL NewLayout ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddChart2(Style, Type, Left, Top, Width, Height, NewLayout, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr Shapes::AddPicture2 ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height, enum MsoPictureCompress Compress ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture2(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, Compress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CanvasShapes wrapper method implementations
//

IDispatchPtr CanvasShapes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int CanvasShapes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ShapePtr CanvasShapes::Item ( const _variant_t & Index ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

IUnknownPtr CanvasShapes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

ShapePtr CanvasShapes::AddCallout ( enum MsoCalloutType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCallout(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddConnector ( enum MsoConnectorType Type, float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddConnector(Type, BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddCurve ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddCurve(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddLabel ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLabel(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddLine ( float BeginX, float BeginY, float EndX, float EndY ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddLine(BeginX, BeginY, EndX, EndY, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddPicture ( _bstr_t FileName, enum MsoTriState LinkToFile, enum MsoTriState SaveWithDocument, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPicture(FileName, LinkToFile, SaveWithDocument, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddPolyline ( const _variant_t & SafeArrayOfPoints ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddPolyline(SafeArrayOfPoints, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddShape ( enum MsoAutoShapeType Type, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddShape(Type, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddTextEffect ( enum MsoPresetTextEffect PresetTextEffect, _bstr_t Text, _bstr_t FontName, float FontSize, enum MsoTriState FontBold, enum MsoTriState FontItalic, float Left, float Top ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextEffect(PresetTextEffect, Text, FontName, FontSize, FontBold, FontItalic, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

ShapePtr CanvasShapes::AddTextbox ( enum MsoTextOrientation Orientation, float Left, float Top, float Width, float Height ) {
    struct Shape * _result = 0;
    HRESULT _hr = raw_AddTextbox(Orientation, Left, Top, Width, Height, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

FreeformBuilderPtr CanvasShapes::BuildFreeform ( enum MsoEditingType EditingType, float X1, float Y1 ) {
    struct FreeformBuilder * _result = 0;
    HRESULT _hr = raw_BuildFreeform(EditingType, X1, Y1, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FreeformBuilderPtr(_result, false);
}

ShapeRangePtr CanvasShapes::Range ( const _variant_t & Index ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = raw_Range(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

HRESULT CanvasShapes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

ShapePtr CanvasShapes::GetBackground ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Background(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface IMsoChart wrapper method implementations
//

IDispatchPtr IMsoChart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void IMsoChart::PutHasTitle ( VARIANT_BOOL fTitle ) {
    HRESULT _hr = put_HasTitle(fTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetHasTitle ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartTitlePtr IMsoChart::GetChartTitle ( ) {
    struct IMsoChartTitle * _result = 0;
    HRESULT _hr = get_ChartTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartTitlePtr(_result, false);
}

int IMsoChart::GetDepthPercent ( ) {
    int _result = 0;
    HRESULT _hr = get_DepthPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutDepthPercent ( int pwDepthPercent ) {
    HRESULT _hr = put_DepthPercent(pwDepthPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChart::GetElevation ( ) {
    int _result = 0;
    HRESULT _hr = get_Elevation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutElevation ( int pwElevation ) {
    HRESULT _hr = put_Elevation(pwElevation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChart::GetGapDepth ( ) {
    int _result = 0;
    HRESULT _hr = get_GapDepth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutGapDepth ( int pwGapDepth ) {
    HRESULT _hr = put_GapDepth(pwGapDepth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChart::GetHeightPercent ( ) {
    int _result = 0;
    HRESULT _hr = get_HeightPercent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutHeightPercent ( int pwHeightPercent ) {
    HRESULT _hr = put_HeightPercent(pwHeightPercent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int IMsoChart::GetPerspective ( ) {
    int _result = 0;
    HRESULT _hr = get_Perspective(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutPerspective ( int pwPerspective ) {
    HRESULT _hr = put_Perspective(pwPerspective);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChart::GetRightAngleAxes ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_RightAngleAxes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChart::PutRightAngleAxes ( const _variant_t & pvarRightAngleAxes ) {
    HRESULT _hr = put_RightAngleAxes(pvarRightAngleAxes);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChart::GetRotation ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Rotation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChart::PutRotation ( const _variant_t & pvarRotation ) {
    HRESULT _hr = put_Rotation(pvarRotation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChart::PutDisplayBlanksAs ( enum XlDisplayBlanksAs pres ) {
    HRESULT _hr = put_DisplayBlanksAs(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlDisplayBlanksAs IMsoChart::GetDisplayBlanksAs ( ) {
    enum XlDisplayBlanksAs _result;
    HRESULT _hr = get_DisplayBlanksAs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutProtectData ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectData(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetProtectData ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutProtectFormatting ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectFormatting(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetProtectFormatting ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectFormatting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutProtectGoalSeek ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectGoalSeek(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetProtectGoalSeek ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectGoalSeek(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutProtectSelection ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectSelection(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetProtectSelection ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectSelection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutProtectChartObjects ( VARIANT_BOOL pres ) {
    HRESULT _hr = put_ProtectChartObjects(pres);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetProtectChartObjects ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ProtectChartObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IMsoChart::UnProtect ( const _variant_t & Password ) {
    HRESULT _hr = raw_UnProtect(Password);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::Protect ( const _variant_t & Password, const _variant_t & DrawingObjects, const _variant_t & Contents, const _variant_t & Scenarios, const _variant_t & UserInterfaceOnly ) {
    HRESULT _hr = raw_Protect(Password, DrawingObjects, Contents, Scenarios, UserInterfaceOnly);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IMsoChart::GetChartGroups ( VARIANT * pvarIndex, const _variant_t & varIgallery, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_ChartGroups(pvarIndex, varIgallery, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChart::SeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IMsoChart::_ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines ) {
    HRESULT _hr = raw__ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long IMsoChart::GetSubType ( ) {
    long _result = 0;
    HRESULT _hr = get_SubType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutSubType ( long RHS ) {
    HRESULT _hr = put_SubType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

long IMsoChart::GetType ( ) {
    long _result = 0;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutType ( long RHS ) {
    HRESULT _hr = put_Type(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoCornersPtr IMsoChart::GetCorners ( ) {
    struct IMsoCorners * _result = 0;
    HRESULT _hr = get_Corners(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoCornersPtr(_result, false);
}

HRESULT IMsoChart::ApplyDataLabels ( enum XlDataLabelsType Type, const _variant_t & IMsoLegendKey, const _variant_t & AutoText, const _variant_t & HasLeaderLines, const _variant_t & ShowSeriesName, const _variant_t & ShowCategoryName, const _variant_t & ShowValue, const _variant_t & ShowPercentage, const _variant_t & ShowBubbleSize, const _variant_t & Separator ) {
    HRESULT _hr = raw_ApplyDataLabels(Type, IMsoLegendKey, AutoText, HasLeaderLines, ShowSeriesName, ShowCategoryName, ShowValue, ShowPercentage, ShowBubbleSize, Separator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum XlChartType IMsoChart::GetChartType ( ) {
    enum XlChartType _result;
    HRESULT _hr = get_ChartType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutChartType ( enum XlChartType RHS ) {
    HRESULT _hr = put_ChartType(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetHasDataTable ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasDataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutHasDataTable ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasDataTable(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoChart::ApplyCustomType ( enum XlChartType ChartType, const _variant_t & TypeName ) {
    HRESULT _hr = raw_ApplyCustomType(ChartType, TypeName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::GetChartElement ( long x, long y, long * ElementID, long * Arg1, long * Arg2 ) {
    HRESULT _hr = raw_GetChartElement(x, y, ElementID, Arg1, Arg2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::SetSourceData ( _bstr_t Source, const _variant_t & PlotBy ) {
    HRESULT _hr = raw_SetSourceData(Source, PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum XlRowCol IMsoChart::GetPlotBy ( ) {
    enum XlRowCol _result;
    HRESULT _hr = get_PlotBy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutPlotBy ( enum XlRowCol PlotBy ) {
    HRESULT _hr = put_PlotBy(PlotBy);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetHasLegend ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutHasLegend ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasLegend(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoLegendPtr IMsoChart::GetLegend ( ) {
    struct IMsoLegend * _result = 0;
    HRESULT _hr = get_Legend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoLegendPtr(_result, false);
}

IDispatchPtr IMsoChart::Axes ( const _variant_t & Type, enum XlAxisGroup AxisGroup ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Axes(Type, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void IMsoChart::PutHasAxis ( const _variant_t & axisType, const _variant_t & AxisGroup, const _variant_t & pval ) {
    HRESULT _hr = put_HasAxis(axisType, AxisGroup, pval);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_variant_t IMsoChart::GetHasAxis ( const _variant_t & axisType, const _variant_t & AxisGroup ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_HasAxis(axisType, AxisGroup, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

IMsoWallsPtr IMsoChart::GetWalls ( VARIANT_BOOL fBackWall ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_Walls(fBackWall, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

IMsoFloorPtr IMsoChart::GetFloor ( ) {
    struct IMsoFloor * _result = 0;
    HRESULT _hr = get_Floor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoFloorPtr(_result, false);
}

IMsoPlotAreaPtr IMsoChart::GetPlotArea ( ) {
    struct IMsoPlotArea * _result = 0;
    HRESULT _hr = get_PlotArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoPlotAreaPtr(_result, false);
}

VARIANT_BOOL IMsoChart::GetPlotVisibleOnly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_PlotVisibleOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutPlotVisibleOnly ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_PlotVisibleOnly(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IMsoChartAreaPtr IMsoChart::GetChartArea ( ) {
    struct IMsoChartArea * _result = 0;
    HRESULT _hr = get_ChartArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartAreaPtr(_result, false);
}

HRESULT IMsoChart::AutoFormat ( long rGallery, const _variant_t & varFormat ) {
    HRESULT _hr = raw_AutoFormat(rGallery, varFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL IMsoChart::GetAutoScaling ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_AutoScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutAutoScaling ( VARIANT_BOOL f ) {
    HRESULT _hr = put_AutoScaling(f);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoChart::SetBackgroundPicture ( _bstr_t bstr ) {
    HRESULT _hr = raw_SetBackgroundPicture(bstr);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::ChartWizard ( const _variant_t & varSource, const _variant_t & varGallery, const _variant_t & varFormat, const _variant_t & varPlotBy, const _variant_t & varCategoryLabels, const _variant_t & varSeriesLabels, const _variant_t & varHasLegend, const _variant_t & varTitle, const _variant_t & varCategoryTitle, const _variant_t & varValueTitle, const _variant_t & varExtraTitle, long LocaleID ) {
    HRESULT _hr = raw_ChartWizard(varSource, varGallery, varFormat, varPlotBy, varCategoryLabels, varSeriesLabels, varHasLegend, varTitle, varCategoryTitle, varValueTitle, varExtraTitle, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::CopyPicture ( int Appearance, int Format, int Size, long LocaleID ) {
    HRESULT _hr = raw_CopyPicture(Appearance, Format, Size, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoDataTablePtr IMsoChart::GetDataTable ( ) {
    struct IMsoDataTable * _result = 0;
    HRESULT _hr = get_DataTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDataTablePtr(_result, false);
}

_variant_t IMsoChart::Evaluate ( const _variant_t & varName, long LocaleID, long * ObjType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Evaluate(varName, LocaleID, ObjType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoChart::_Evaluate ( const _variant_t & varName, long LocaleID ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw__Evaluate(varName, LocaleID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

HRESULT IMsoChart::Paste ( const _variant_t & varType, long LocaleID ) {
    HRESULT _hr = raw_Paste(varType, LocaleID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum XlBarShape IMsoChart::GetBarShape ( ) {
    enum XlBarShape _result;
    HRESULT _hr = get_BarShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutBarShape ( enum XlBarShape pShape ) {
    HRESULT _hr = put_BarShape(pShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::Export ( _bstr_t bstr, const _variant_t & varFilterName, const _variant_t & varInteractive ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Export(bstr, varFilterName, varInteractive, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IMsoChart::SetDefaultChart ( const _variant_t & varName ) {
    HRESULT _hr = raw_SetDefaultChart(varName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::ApplyChartTemplate ( _bstr_t bstrFileName ) {
    HRESULT _hr = raw_ApplyChartTemplate(bstrFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::SaveChartTemplate ( _bstr_t bstrFileName ) {
    HRESULT _hr = raw_SaveChartTemplate(bstrFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoWallsPtr IMsoChart::GetSideWall ( ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_SideWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

IMsoWallsPtr IMsoChart::GetBackWall ( ) {
    struct IMsoWalls * _result = 0;
    HRESULT _hr = get_BackWall(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoWallsPtr(_result, false);
}

_variant_t IMsoChart::GetChartStyle ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChart::PutChartStyle ( const _variant_t & RHS ) {
    HRESULT _hr = put_ChartStyle(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoChart::ClearToMatchStyle ( ) {
    HRESULT _hr = raw_ClearToMatchStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IMsoChart::GetPivotLayout ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PivotLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

VARIANT_BOOL IMsoChart::GetHasPivotFields ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasPivotFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutHasPivotFields ( VARIANT_BOOL RHS ) {
    HRESULT _hr = put_HasPivotFields(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoChart::RefreshPivotTable ( ) {
    HRESULT _hr = raw_RefreshPivotTable();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

void IMsoChart::PutShowDataLabelsOverMaximum ( VARIANT_BOOL pRHS ) {
    HRESULT _hr = put_ShowDataLabelsOverMaximum(pRHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetShowDataLabelsOverMaximum ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowDataLabelsOverMaximum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IMsoChart::ApplyLayout ( long Layout, const _variant_t & varChartType ) {
    HRESULT _hr = raw_ApplyLayout(Layout, varChartType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr IMsoChart::GetSelection ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Selection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

HRESULT IMsoChart::Refresh ( ) {
    HRESULT _hr = raw_Refresh();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoChart::SetElement ( enum MsoChartElementType RHS ) {
    HRESULT _hr = raw_SetElement(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IMsoChartDataPtr IMsoChart::GetChartData ( ) {
    struct IMsoChartData * _result = 0;
    HRESULT _hr = get_ChartData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartDataPtr(_result, false);
}

IMsoChartFormatPtr IMsoChart::GetFormat ( ) {
    struct IMsoChartFormat * _result = 0;
    HRESULT _hr = get_Format(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartFormatPtr(_result, false);
}

ShapesPtr IMsoChart::GetShapes ( ) {
    struct Shapes * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapesPtr(_result, false);
}

IDispatchPtr IMsoChart::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long IMsoChart::GetCreator ( ) {
    long _result = 0;
    HRESULT _hr = get_Creator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IMsoChartGroupPtr IMsoChart::GetArea3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Area3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::AreaGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_AreaGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoChartGroupPtr IMsoChart::GetBar3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Bar3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::BarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_BarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoChartGroupPtr IMsoChart::GetColumn3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Column3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::ColumnGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ColumnGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoChartGroupPtr IMsoChart::GetLine3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Line3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::LineGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_LineGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoChartGroupPtr IMsoChart::GetPie3DGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_Pie3DGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::PieGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_PieGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChart::DoughnutGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_DoughnutGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IDispatchPtr IMsoChart::RadarGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_RadarGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

IMsoChartGroupPtr IMsoChart::GetSurfaceGroup ( long lcid ) {
    struct IMsoChartGroup * _result = 0;
    HRESULT _hr = get_SurfaceGroup(lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoChartGroupPtr(_result, false);
}

IDispatchPtr IMsoChart::XYGroups ( const _variant_t & Index, long lcid ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_XYGroups(Index, lcid, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_variant_t IMsoChart::Delete ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Delete(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoChart::Copy ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Copy(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

_variant_t IMsoChart::Select ( const _variant_t & Replace ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Select(Replace, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

VARIANT_BOOL IMsoChart::GetShowReportFilterFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowReportFilterFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutShowReportFilterFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowReportFilterFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetShowLegendFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowLegendFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutShowLegendFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowLegendFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetShowAxisFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAxisFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutShowAxisFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAxisFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetShowValueFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowValueFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutShowValueFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowValueFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL IMsoChart::GetShowAllFieldButtons ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_ShowAllFieldButtons(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutShowAllFieldButtons ( VARIANT_BOOL res ) {
    HRESULT _hr = put_ShowAllFieldButtons(res);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

void IMsoChart::PutProtectChartSheetFormatting ( VARIANT_BOOL _arg1 ) {
    HRESULT _hr = put_ProtectChartSheetFormatting(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr IMsoChart::FullSeriesCollection ( const _variant_t & Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_FullSeriesCollection(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

void IMsoChart::PutCategoryLabelLevel ( enum XlCategoryLabelLevel plevel ) {
    HRESULT _hr = put_CategoryLabelLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlCategoryLabelLevel IMsoChart::GetCategoryLabelLevel ( ) {
    enum XlCategoryLabelLevel _result;
    HRESULT _hr = get_CategoryLabelLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoChart::PutSeriesNameLevel ( enum XlSeriesNameLevel plevel ) {
    HRESULT _hr = put_SeriesNameLevel(plevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum XlSeriesNameLevel IMsoChart::GetSeriesNameLevel ( ) {
    enum XlSeriesNameLevel _result;
    HRESULT _hr = get_SeriesNameLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL IMsoChart::GetHasHiddenContent ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasHiddenContent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT IMsoChart::DeleteHiddenContent ( ) {
    HRESULT _hr = raw_DeleteHiddenContent();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

_variant_t IMsoChart::GetChartColor ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ChartColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

void IMsoChart::PutChartColor ( const _variant_t & RHS ) {
    HRESULT _hr = put_ChartColor(RHS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoChart::ClearToMatchColorStyle ( ) {
    HRESULT _hr = raw_ClearToMatchColorStyle();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface FileSearch wrapper method implementations
//

VARIANT_BOOL FileSearch::GetSearchSubFolders ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_SearchSubFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileSearch::PutSearchSubFolders ( VARIANT_BOOL SearchSubFoldersRetVal ) {
    HRESULT _hr = put_SearchSubFolders(SearchSubFoldersRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL FileSearch::GetMatchTextExactly ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchTextExactly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileSearch::PutMatchTextExactly ( VARIANT_BOOL MatchTextRetVal ) {
    HRESULT _hr = put_MatchTextExactly(MatchTextRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

VARIANT_BOOL FileSearch::GetMatchAllWordForms ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_MatchAllWordForms(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileSearch::PutMatchAllWordForms ( VARIANT_BOOL MatchAllWordFormsRetVal ) {
    HRESULT _hr = put_MatchAllWordForms(MatchAllWordFormsRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileSearch::GetFileName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileSearch::PutFileName ( _bstr_t FileNameRetVal ) {
    HRESULT _hr = put_FileName(FileNameRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoFileType FileSearch::GetFileType ( ) {
    enum MsoFileType _result;
    HRESULT _hr = get_FileType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileSearch::PutFileType ( enum MsoFileType FileTypeRetVal ) {
    HRESULT _hr = put_FileType(FileTypeRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoLastModified FileSearch::GetLastModified ( ) {
    enum MsoLastModified _result;
    HRESULT _hr = get_LastModified(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void FileSearch::PutLastModified ( enum MsoLastModified LastModifiedRetVal ) {
    HRESULT _hr = put_LastModified(LastModifiedRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileSearch::GetTextOrProperty ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TextOrProperty(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileSearch::PutTextOrProperty ( _bstr_t TextOrProperty ) {
    HRESULT _hr = put_TextOrProperty(TextOrProperty);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t FileSearch::GetLookIn ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_LookIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void FileSearch::PutLookIn ( _bstr_t LookInRetVal ) {
    HRESULT _hr = put_LookIn(LookInRetVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

int FileSearch::Execute ( enum MsoSortBy SortBy, enum MsoSortOrder SortOrder, VARIANT_BOOL AlwaysAccurate ) {
    int _result = 0;
    HRESULT _hr = raw_Execute(SortBy, SortOrder, AlwaysAccurate, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT FileSearch::NewSearch ( ) {
    HRESULT _hr = raw_NewSearch();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

FoundFilesPtr FileSearch::GetFoundFiles ( ) {
    struct FoundFiles * _result = 0;
    HRESULT _hr = get_FoundFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FoundFilesPtr(_result, false);
}

PropertyTestsPtr FileSearch::GetPropertyTests ( ) {
    struct PropertyTests * _result = 0;
    HRESULT _hr = get_PropertyTests(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return PropertyTestsPtr(_result, false);
}

SearchScopesPtr FileSearch::GetSearchScopes ( ) {
    struct SearchScopes * _result = 0;
    HRESULT _hr = get_SearchScopes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopesPtr(_result, false);
}

SearchFoldersPtr FileSearch::GetSearchFolders ( ) {
    struct SearchFolders * _result = 0;
    HRESULT _hr = get_SearchFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchFoldersPtr(_result, false);
}

FileTypesPtr FileSearch::GetFileTypes ( ) {
    struct FileTypes * _result = 0;
    HRESULT _hr = get_FileTypes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return FileTypesPtr(_result, false);
}

HRESULT FileSearch::RefreshScopes ( ) {
    HRESULT _hr = raw_RefreshScopes();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchFolders wrapper method implementations
//

ScopeFolderPtr SearchFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

int SearchFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT SearchFolders::Add ( struct ScopeFolder * ScopeFolder ) {
    HRESULT _hr = raw_Add(ScopeFolder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SearchFolders::Remove ( int Index ) {
    HRESULT _hr = raw_Remove(Index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr SearchFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolders wrapper method implementations
//

ScopeFolderPtr ScopeFolders::GetItem ( int Index ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

int ScopeFolders::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr ScopeFolders::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ScopeFolder wrapper method implementations
//

_bstr_t ScopeFolder::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t ScopeFolder::GetPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Path(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

ScopeFoldersPtr ScopeFolder::GetScopeFolders ( ) {
    struct ScopeFolders * _result = 0;
    HRESULT _hr = get_ScopeFolders(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFoldersPtr(_result, false);
}

HRESULT ScopeFolder::AddToSearchFolders ( ) {
    HRESULT _hr = raw_AddToSearchFolders();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SearchScope wrapper method implementations
//

enum MsoSearchIn SearchScope::GetType ( ) {
    enum MsoSearchIn _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

ScopeFolderPtr SearchScope::GetScopeFolder ( ) {
    struct ScopeFolder * _result = 0;
    HRESULT _hr = get_ScopeFolder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ScopeFolderPtr(_result, false);
}

//
// interface SearchScopes wrapper method implementations
//

SearchScopePtr SearchScopes::GetItem ( int Index ) {
    struct SearchScope * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SearchScopePtr(_result, false);
}

int SearchScopes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

IUnknownPtr SearchScopes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMsoDiagram wrapper method implementations
//

IDispatchPtr IMsoDiagram::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

DiagramNodesPtr IMsoDiagram::GetNodes ( ) {
    struct DiagramNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodesPtr(_result, false);
}

enum MsoDiagramType IMsoDiagram::GetType ( ) {
    enum MsoDiagramType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState IMsoDiagram::GetAutoLayout ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDiagram::PutAutoLayout ( enum MsoTriState AutoLayout ) {
    HRESULT _hr = put_AutoLayout(AutoLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState IMsoDiagram::GetReverse ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDiagram::PutReverse ( enum MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState IMsoDiagram::GetAutoFormat ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_AutoFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void IMsoDiagram::PutAutoFormat ( enum MsoTriState AutoFormat ) {
    HRESULT _hr = put_AutoFormat(AutoFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT IMsoDiagram::Convert ( enum MsoDiagramType Type ) {
    HRESULT _hr = raw_Convert(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT IMsoDiagram::FitText ( ) {
    HRESULT _hr = raw_FitText();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface DiagramNodes wrapper method implementations
//

IUnknownPtr DiagramNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

DiagramNodePtr DiagramNodes::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

HRESULT DiagramNodes::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr DiagramNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int DiagramNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface DiagramNodeChildren wrapper method implementations
//

IUnknownPtr DiagramNodeChildren::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

DiagramNodePtr DiagramNodeChildren::Item ( const _variant_t & Index ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

DiagramNodePtr DiagramNodeChildren::AddNode ( const _variant_t & Index, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Index, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

HRESULT DiagramNodeChildren::SelectAll ( ) {
    HRESULT _hr = raw_SelectAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IDispatchPtr DiagramNodeChildren::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int DiagramNodeChildren::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

DiagramNodePtr DiagramNodeChildren::GetFirstChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

DiagramNodePtr DiagramNodeChildren::GetLastChild ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

//
// interface DiagramNode wrapper method implementations
//

DiagramNodePtr DiagramNode::AddNode ( enum MsoRelativeNodePosition Pos, enum MsoDiagramNodeType NodeType ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_AddNode(Pos, NodeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

HRESULT DiagramNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT DiagramNode::MoveNode ( struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    HRESULT _hr = raw_MoveNode(TargetNode, Pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT DiagramNode::ReplaceNode ( struct DiagramNode * TargetNode ) {
    HRESULT _hr = raw_ReplaceNode(TargetNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT DiagramNode::SwapNode ( struct DiagramNode * TargetNode, VARIANT_BOOL SwapChildren ) {
    HRESULT _hr = raw_SwapNode(TargetNode, SwapChildren);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

DiagramNodePtr DiagramNode::CloneNode ( VARIANT_BOOL CopyChildren, struct DiagramNode * TargetNode, enum MsoRelativeNodePosition Pos ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_CloneNode(CopyChildren, TargetNode, Pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

HRESULT DiagramNode::TransferChildren ( struct DiagramNode * ReceivingNode ) {
    HRESULT _hr = raw_TransferChildren(ReceivingNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

DiagramNodePtr DiagramNode::NextNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_NextNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

DiagramNodePtr DiagramNode::PrevNode ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = raw_PrevNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

IDispatchPtr DiagramNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

DiagramNodeChildrenPtr DiagramNode::GetChildren ( ) {
    struct DiagramNodeChildren * _result = 0;
    HRESULT _hr = get_Children(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodeChildrenPtr(_result, false);
}

ShapePtr DiagramNode::GetShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_Shape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

DiagramNodePtr DiagramNode::GetRoot ( ) {
    struct DiagramNode * _result = 0;
    HRESULT _hr = get_Root(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return DiagramNodePtr(_result, false);
}

IMsoDiagramPtr DiagramNode::GetDiagram ( ) {
    struct IMsoDiagram * _result = 0;
    HRESULT _hr = get_Diagram(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IMsoDiagramPtr(_result, false);
}

enum MsoOrgChartLayoutType DiagramNode::GetLayout ( ) {
    enum MsoOrgChartLayoutType _result;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void DiagramNode::PutLayout ( enum MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_Layout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ShapePtr DiagramNode::GetTextShape ( ) {
    struct Shape * _result = 0;
    HRESULT _hr = get_TextShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapePtr(_result, false);
}

//
// interface CustomXMLNodes wrapper method implementations
//

IDispatchPtr CustomXMLNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long CustomXMLNodes::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CustomXMLNodePtr CustomXMLNodes::GetItem ( long Index ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

IUnknownPtr CustomXMLNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface CustomXMLNode wrapper method implementations
//

IDispatchPtr CustomXMLNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

CustomXMLNodesPtr CustomXMLNode::GetAttributes ( ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = get_Attributes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

_bstr_t CustomXMLNode::GetBaseName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_BaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

CustomXMLNodesPtr CustomXMLNode::GetChildNodes ( ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = get_ChildNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

CustomXMLNodePtr CustomXMLNode::GetFirstChild ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_FirstChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

CustomXMLNodePtr CustomXMLNode::GetLastChild ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_LastChild(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

_bstr_t CustomXMLNode::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

CustomXMLNodePtr CustomXMLNode::GetNextSibling ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_NextSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

enum MsoCustomXMLNodeType CustomXMLNode::GetNodeType ( ) {
    enum MsoCustomXMLNodeType _result;
    HRESULT _hr = get_NodeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

_bstr_t CustomXMLNode::GetNodeValue ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NodeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CustomXMLNode::PutNodeValue ( _bstr_t pbstrNodeValue ) {
    HRESULT _hr = put_NodeValue(pbstrNodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

IDispatchPtr CustomXMLNode::GetOwnerDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_OwnerDocument(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_CustomXMLPartPtr CustomXMLNode::GetOwnerPart ( ) {
    struct _CustomXMLPart * _result = 0;
    HRESULT _hr = get_OwnerPart(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLPartPtr(_result, false);
}

CustomXMLNodePtr CustomXMLNode::GetPreviousSibling ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_PreviousSibling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

CustomXMLNodePtr CustomXMLNode::GetParentNode ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_ParentNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

_bstr_t CustomXMLNode::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

void CustomXMLNode::PutText ( _bstr_t pbstrText ) {
    HRESULT _hr = put_Text(pbstrText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

_bstr_t CustomXMLNode::GetXPath ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t CustomXMLNode::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT CustomXMLNode::AppendChildNode ( _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_AppendChildNode(Name, NamespaceURI, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::AppendChildSubtree ( _bstr_t XML ) {
    HRESULT _hr = raw_AppendChildSubtree(XML);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL CustomXMLNode::HasChildNodes ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_HasChildNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT CustomXMLNode::InsertNodeBefore ( _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue, struct CustomXMLNode * NextSibling ) {
    HRESULT _hr = raw_InsertNodeBefore(Name, NamespaceURI, NodeType, NodeValue, NextSibling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::InsertSubtreeBefore ( _bstr_t XML, struct CustomXMLNode * NextSibling ) {
    HRESULT _hr = raw_InsertSubtreeBefore(XML, NextSibling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::RemoveChild ( struct CustomXMLNode * Child ) {
    HRESULT _hr = raw_RemoveChild(Child);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::ReplaceChildNode ( struct CustomXMLNode * OldNode, _bstr_t Name, _bstr_t NamespaceURI, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_ReplaceChildNode(OldNode, Name, NamespaceURI, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT CustomXMLNode::ReplaceChildSubtree ( _bstr_t XML, struct CustomXMLNode * OldNode ) {
    HRESULT _hr = raw_ReplaceChildSubtree(XML, OldNode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

CustomXMLNodesPtr CustomXMLNode::SelectNodes ( _bstr_t XPath ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = raw_SelectNodes(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

CustomXMLNodePtr CustomXMLNode::SelectSingleNode ( _bstr_t XPath ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = raw_SelectSingleNode(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

//
// interface CustomXMLValidationError wrapper method implementations
//

IDispatchPtr CustomXMLValidationError::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

_bstr_t CustomXMLValidationError::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

CustomXMLNodePtr CustomXMLValidationError::GetNode ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_Node(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

_bstr_t CustomXMLValidationError::GetText ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

enum MsoCustomXMLValidationErrorType CustomXMLValidationError::GetType ( ) {
    enum MsoCustomXMLValidationErrorType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT CustomXMLValidationError::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

long CustomXMLValidationError::GetErrorCode ( ) {
    long _result = 0;
    HRESULT _hr = get_ErrorCode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface CustomXMLValidationErrors wrapper method implementations
//

IDispatchPtr CustomXMLValidationErrors::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

long CustomXMLValidationErrors::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CustomXMLValidationErrorPtr CustomXMLValidationErrors::GetItem ( long Index ) {
    struct CustomXMLValidationError * _result = 0;
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLValidationErrorPtr(_result, false);
}

HRESULT CustomXMLValidationErrors::Add ( struct CustomXMLNode * Node, _bstr_t ErrorName, _bstr_t ErrorText, VARIANT_BOOL ClearedOnUpdate ) {
    HRESULT _hr = raw_Add(Node, ErrorName, ErrorText, ClearedOnUpdate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

IUnknownPtr CustomXMLValidationErrors::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface _CustomXMLPart wrapper method implementations
//

IDispatchPtr _CustomXMLPart::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

CustomXMLNodePtr _CustomXMLPart::GetDocumentElement ( ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = get_DocumentElement(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

_bstr_t _CustomXMLPart::GetId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Id(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_bstr_t _CustomXMLPart::GetNamespaceURI ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_NamespaceURI(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

_CustomXMLSchemaCollectionPtr _CustomXMLPart::GetSchemaCollection ( ) {
    struct _CustomXMLSchemaCollection * _result = 0;
    HRESULT _hr = get_SchemaCollection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _CustomXMLSchemaCollectionPtr(_result, false);
}

void _CustomXMLPart::PutSchemaCollection ( struct _CustomXMLSchemaCollection * ppSchemaCollection ) {
    HRESULT _hr = put_SchemaCollection(ppSchemaCollection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

CustomXMLPrefixMappingsPtr _CustomXMLPart::GetNamespaceManager ( ) {
    struct CustomXMLPrefixMappings * _result = 0;
    HRESULT _hr = get_NamespaceManager(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLPrefixMappingsPtr(_result, false);
}

_bstr_t _CustomXMLPart::GetXML ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_XML(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

HRESULT _CustomXMLPart::AddNode ( struct CustomXMLNode * Parent, _bstr_t Name, _bstr_t NamespaceURI, struct CustomXMLNode * NextSibling, enum MsoCustomXMLNodeType NodeType, _bstr_t NodeValue ) {
    HRESULT _hr = raw_AddNode(Parent, Name, NamespaceURI, NextSibling, NodeType, NodeValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT _CustomXMLPart::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

VARIANT_BOOL _CustomXMLPart::Load ( _bstr_t FilePath ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_Load(FilePath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

VARIANT_BOOL _CustomXMLPart::LoadXML ( _bstr_t XML ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_LoadXML(XML, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

CustomXMLNodesPtr _CustomXMLPart::SelectNodes ( _bstr_t XPath ) {
    struct CustomXMLNodes * _result = 0;
    HRESULT _hr = raw_SelectNodes(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodesPtr(_result, false);
}

CustomXMLNodePtr _CustomXMLPart::SelectSingleNode ( _bstr_t XPath ) {
    struct CustomXMLNode * _result = 0;
    HRESULT _hr = raw_SelectSingleNode(XPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLNodePtr(_result, false);
}

CustomXMLValidationErrorsPtr _CustomXMLPart::GetErrors ( ) {
    struct CustomXMLValidationErrors * _result = 0;
    HRESULT _hr = get_Errors(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CustomXMLValidationErrorsPtr(_result, false);
}

VARIANT_BOOL _CustomXMLPart::GetBuiltIn ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_BuiltIn(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface SmartArt wrapper method implementations
//

IDispatchPtr SmartArt::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

SmartArtNodesPtr SmartArt::GetAllNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_AllNodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

SmartArtNodesPtr SmartArt::GetNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

SmartArtLayoutPtr SmartArt::GetLayout ( ) {
    struct SmartArtLayout * _result = 0;
    HRESULT _hr = get_Layout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtLayoutPtr(_result, false);
}

void SmartArt::PutLayout ( struct SmartArtLayout * Layout ) {
    HRESULT _hr = put_Layout(Layout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SmartArtQuickStylePtr SmartArt::GetQuickStyle ( ) {
    struct SmartArtQuickStyle * _result = 0;
    HRESULT _hr = get_QuickStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtQuickStylePtr(_result, false);
}

void SmartArt::PutQuickStyle ( struct SmartArtQuickStyle * Style ) {
    HRESULT _hr = put_QuickStyle(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

SmartArtColorPtr SmartArt::GetColor ( ) {
    struct SmartArtColor * _result = 0;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtColorPtr(_result, false);
}

void SmartArt::PutColor ( struct SmartArtColor * ColorStyle ) {
    HRESULT _hr = put_Color(ColorStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

enum MsoTriState SmartArt::GetReverse ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Reverse(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SmartArt::PutReverse ( enum MsoTriState Reverse ) {
    HRESULT _hr = put_Reverse(Reverse);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

HRESULT SmartArt::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface SmartArtNodes wrapper method implementations
//

IUnknownPtr SmartArtNodes::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

SmartArtNodePtr SmartArtNodes::Item ( const _variant_t & Index ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

IDispatchPtr SmartArtNodes::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

int SmartArtNodes::GetCount ( ) {
    int _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SmartArtNodePtr SmartArtNodes::Add ( ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_Add(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

//
// interface SmartArtNode wrapper method implementations
//

IDispatchPtr SmartArtNode::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

SmartArtNodePtr SmartArtNode::AddNode ( enum MsoSmartArtNodePosition Position, enum MsoSmartArtNodeType Type ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = raw_AddNode(Position, Type, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

HRESULT SmartArtNode::Delete ( ) {
    HRESULT _hr = raw_Delete();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SmartArtNode::Promote ( ) {
    HRESULT _hr = raw_Promote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SmartArtNode::Demote ( ) {
    HRESULT _hr = raw_Demote();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

enum MsoOrgChartLayoutType SmartArtNode::GetOrgChartLayout ( ) {
    enum MsoOrgChartLayoutType _result;
    HRESULT _hr = get_OrgChartLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

void SmartArtNode::PutOrgChartLayout ( enum MsoOrgChartLayoutType Type ) {
    HRESULT _hr = put_OrgChartLayout(Type);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

ShapeRangePtr SmartArtNode::GetShapes ( ) {
    struct ShapeRange * _result = 0;
    HRESULT _hr = get_Shapes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ShapeRangePtr(_result, false);
}

TextFrame2Ptr SmartArtNode::GetTextFrame2 ( ) {
    struct TextFrame2 * _result = 0;
    HRESULT _hr = get_TextFrame2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TextFrame2Ptr(_result, false);
}

HRESULT SmartArtNode::Larger ( ) {
    HRESULT _hr = raw_Larger();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SmartArtNode::Smaller ( ) {
    HRESULT _hr = raw_Smaller();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

int SmartArtNode::GetLevel ( ) {
    int _result = 0;
    HRESULT _hr = get_Level(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

enum MsoTriState SmartArtNode::GetHidden ( ) {
    enum MsoTriState _result;
    HRESULT _hr = get_Hidden(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

SmartArtNodesPtr SmartArtNode::GetNodes ( ) {
    struct SmartArtNodes * _result = 0;
    HRESULT _hr = get_Nodes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodesPtr(_result, false);
}

SmartArtNodePtr SmartArtNode::GetParentNode ( ) {
    struct SmartArtNode * _result = 0;
    HRESULT _hr = get_ParentNode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return SmartArtNodePtr(_result, false);
}

enum MsoSmartArtNodeType SmartArtNode::GetType ( ) {
    enum MsoSmartArtNodeType _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

HRESULT SmartArtNode::ReorderUp ( ) {
    HRESULT _hr = raw_ReorderUp();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

HRESULT SmartArtNode::ReorderDown ( ) {
    HRESULT _hr = raw_ReorderDown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

} // namespace Office
